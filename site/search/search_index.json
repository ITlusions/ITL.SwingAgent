{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SwingAgent v1.6.1","text":"<p>A sophisticated 1-2 day swing trading system that combines technical analysis, machine learning pattern matching, and LLM-generated action plans for systematic trading decisions.</p>"},{"location":"#overview","title":"Overview","text":"<p>SwingAgent is a comprehensive trading system designed for short-term swing trades with holding periods of 1-2 days. The system integrates multiple analytical approaches:</p> <ul> <li>Technical Analysis: EMA trends, RSI momentum, ATR volatility, Fibonacci retracements</li> <li>Machine Learning: Vector-based KNN for historical pattern matching with centralized storage</li> <li>LLM Integration: OpenAI models for trade explanations and structured action plans</li> <li>Multi-timeframe Analysis: 15-minute and 1-hour trend alignment</li> <li>Risk Management: Systematic stop-loss and take-profit calculations</li> <li>Centralized Database: SQLAlchemy ORM with support for SQLite, PostgreSQL, MySQL, and Kubernetes CNPG</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#fibonacci-golden-pocket-strategy","title":"\ud83c\udfaf Fibonacci Golden Pocket Strategy","text":"<ul> <li>Uses 0.618-0.65 retracement levels for high-probability entry points</li> <li>Combines with momentum and mean-reversion setups</li> <li>Dynamic risk-reward calculation based on ATR</li> </ul>"},{"location":"#ml-pattern-recognition","title":"\ud83e\udde0 ML Pattern Recognition","text":"<ul> <li>Centralized SQLite/PostgreSQL-based vector store for historical pattern matching</li> <li>Cosine similarity search across feature vectors</li> <li>Statistical expectations based on similar historical setups</li> </ul>"},{"location":"#multi-timeframe-confluence","title":"\ud83d\udcca Multi-timeframe Confluence","text":"<ul> <li>15-minute and 1-hour trend alignment filtering</li> <li>Relative strength analysis vs sector ETF and SPY</li> <li>Volatility regime classification (Low/Medium/High)</li> </ul>"},{"location":"#llm-powered-insights","title":"\ud83e\udd16 LLM-Powered Insights","text":"<ul> <li>OpenAI integration for trade explanations</li> <li>Structured action plans with entry/exit scenarios</li> <li>Risk assessment and invalidation conditions</li> </ul>"},{"location":"#comprehensive-tracking","title":"\ud83d\udcc8 Comprehensive Tracking","text":"<ul> <li>Complete signal database with expectations vs outcomes</li> <li>Performance analytics by volatility regime</li> <li>Calibration analysis for prediction accuracy</li> <li>Centralized storage with migration tools from legacy databases</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/ITlusions/ITL.SwingAgent.git\ncd ITL.SwingAgent\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -e .\n\n# Optional: Set up OpenAI for LLM features\nexport OPENAI_API_KEY=\"sk-...\"\nexport SWING_LLM_MODEL=\"gpt-4o-mini\"\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":""},{"location":"#generate-a-live-signal","title":"Generate a Live Signal","text":"<pre><code>python scripts/run_swing_agent.py \\\n  --symbol AAPL \\\n  --interval 30m \\\n  --lookback-days 30 \\\n  --sector QQQ\n</code></pre>"},{"location":"#generate-historical-signals-backtesting","title":"Generate Historical Signals (Backtesting)","text":"<pre><code>python scripts/backtest_generate_signals.py \\\n  --symbol AAPL \\\n  --interval 30m \\\n  --lookback-days 180 \\\n  --warmup-bars 80 \\\n  --sector QQQ \\\n  --no-llm\n</code></pre>"},{"location":"#evaluate-signal-performance","title":"Evaluate Signal Performance","text":"<pre><code>python scripts/eval_signals.py \\\n  --max-hold-days 2.0\n</code></pre>"},{"location":"#analyze-performance","title":"Analyze Performance","text":"<pre><code>python scripts/analyze_performance.py\n</code></pre>"},{"location":"#system-architecture","title":"System Architecture","text":"<p>The system is built with a modular architecture:</p> <pre><code>SwingAgent v1.6.1\n\u251c\u2500\u2500 Core Engine\n\u2502   \u251c\u2500\u2500 agent.py          # Main orchestrator\n\u2502   \u251c\u2500\u2500 strategy.py       # Trend &amp; entry logic\n\u2502   \u251c\u2500\u2500 indicators.py     # Technical calculations\n\u2502   \u2514\u2500\u2500 config.py         # Centralized configuration\n\u251c\u2500\u2500 Database Layer\n\u2502   \u251c\u2500\u2500 database.py       # SQLAlchemy session management\n\u2502   \u251c\u2500\u2500 models_db.py      # Database models\n\u2502   \u251c\u2500\u2500 storage.py        # Signal storage operations\n\u2502   \u2514\u2500\u2500 migrate.py        # Migration utilities\n\u251c\u2500\u2500 Machine Learning\n\u2502   \u251c\u2500\u2500 features.py       # Feature engineering\n\u2502   \u2514\u2500\u2500 vectorstore.py    # Pattern matching &amp; KNN\n\u251c\u2500\u2500 AI Integration\n\u2502   \u2514\u2500\u2500 llm_predictor.py  # OpenAI integration\n\u251c\u2500\u2500 Data &amp; Backtesting\n\u2502   \u251c\u2500\u2500 data.py           # Market data fetching\n\u2502   \u2514\u2500\u2500 backtester.py     # Trade simulation\n\u2514\u2500\u2500 Scripts\n    \u251c\u2500\u2500 run_swing_agent.py\n    \u251c\u2500\u2500 backtest_generate_signals.py\n    \u251c\u2500\u2500 eval_signals.py\n    \u251c\u2500\u2500 analyze_performance.py\n    \u251c\u2500\u2500 backfill_vector_store.py\n    \u251c\u2500\u2500 db_info.py\n    \u2514\u2500\u2500 test_cnpg.py\n</code></pre>"},{"location":"#signal-generation-process","title":"Signal Generation Process","text":"<ol> <li>Data Collection: Fetch OHLCV data via Yahoo Finance</li> <li>Technical Analysis: Calculate EMA trends, RSI, ATR, Fibonacci levels</li> <li>Multi-timeframe Check: Verify 15m/1h alignment and relative strength</li> <li>Entry Logic: Apply Fibonacci golden pocket or momentum strategies</li> <li>Vector Lookup: Find similar historical patterns via KNN</li> <li>LLM Analysis: Generate explanations and action plans</li> <li>Signal Storage: Record complete signal with expectations</li> <li>Performance Tracking: Evaluate outcomes and update patterns</li> </ol>"},{"location":"#output-example","title":"Output Example","text":"<pre><code>{\n  \"symbol\": \"AAPL\",\n  \"timeframe\": \"30m\",\n  \"asof\": \"2024-01-15T15:30:00+00:00\",\n  \"trend\": {\n    \"label\": \"up\",\n    \"ema_slope\": 0.0156,\n    \"price_above_ema\": true,\n    \"rsi_14\": 62.3\n  },\n  \"entry\": {\n    \"side\": \"long\",\n    \"entry_price\": 185.50,\n    \"stop_price\": 182.20,\n    \"take_profit\": 190.80,\n    \"r_multiple\": 1.61,\n    \"fib_golden_low\": 184.20,\n    \"fib_golden_high\": 186.10\n  },\n  \"confidence\": 0.72,\n  \"expected_r\": 0.95,\n  \"expected_winrate\": 0.58,\n  \"expected_hold_days\": 1.2,\n  \"action_plan\": \"Monitor for entry between $184.20-$186.10...\",\n  \"mtf_alignment\": 2,\n  \"vol_regime\": \"M\"\n}\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#for-new-users","title":"For New Users","text":"<ul> <li>Getting Started Guide - Complete setup and your first signal</li> <li>Tutorial - Hands-on walkthrough of your first week</li> <li>FAQ - Quick answers to common questions</li> </ul>"},{"location":"#for-active-traders","title":"For Active Traders","text":"<ul> <li>Use Cases - Real-world trading scenarios and strategies</li> <li>Best Practices - Professional tips and risk management</li> <li>Glossary - Trading and technical terms explained</li> </ul>"},{"location":"#for-technical-users","title":"For Technical Users","text":"<ul> <li>API Reference - Complete function documentation  </li> <li>Configuration - Setup and customization options</li> <li>Architecture - Deep dive into system design</li> </ul>"},{"location":"#for-deployment","title":"For Deployment","text":"<ul> <li>Deployment - Production deployment guide</li> <li>Security - Security best practices</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is provided as-is for educational and research purposes.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Complete API documentation for all SwingAgent components.</p>"},{"location":"api-reference/#core-classes","title":"Core Classes","text":""},{"location":"api-reference/#swingagent","title":"SwingAgent","text":"<p>Main orchestrator class that coordinates all system components using a modular, well-structured approach.</p> <pre><code>class SwingAgent:\n    def __init__(\n        self,\n        interval: str = \"30m\",\n        lookback_days: int = 30,\n        use_llm: bool = True,\n        llm_extras: bool = True,\n        sector_symbol: str = \"XLK\"\n    )\n</code></pre> <p>Parameters: - <code>interval</code>: Trading timeframe (\"15m\", \"30m\", \"1h\", \"1d\") - <code>lookback_days</code>: Historical data period for analysis - <code>use_llm</code>: Enable OpenAI LLM integration - <code>llm_extras</code>: Enable additional LLM features (action plans, risk scenarios) - <code>sector_symbol</code>: Sector ETF for relative strength analysis (default: XLK)</p> <p>Note: Database configuration is now handled via environment variables. See Configuration Guide for details.</p> <p>Methods:</p>"},{"location":"api-reference/#analyzesymbol-str-tradesignal","title":"<code>analyze(symbol: str) -&gt; TradeSignal</code>","text":"<p>Generate a comprehensive trading signal for the given symbol.</p> <pre><code>agent = SwingAgent(interval=\"30m\", lookback_days=30)\nsignal = agent.analyze(\"AAPL\")\nprint(f\"Signal: {signal.entry.side if signal.entry else 'No setup'}\")\nprint(f\"Confidence: {signal.confidence:.1%}\")\n</code></pre>"},{"location":"api-reference/#analyze_dfsymbol-str-df-pddataframe-tradesignal","title":"<code>analyze_df(symbol: str, df: pd.DataFrame) -&gt; TradeSignal</code>","text":"<p>Generate a signal using pre-loaded market data. This method orchestrates the entire analysis pipeline:</p> <ol> <li>Market Context Building - Volatility, gaps, time of day, relative strength</li> <li>Technical Analysis - Trend labeling and entry plan generation</li> <li>Multi-timeframe Analysis - Trend alignment across 15m, 30m, 1h timeframes</li> <li>ML Expectations - Vector similarity analysis for statistical priors</li> <li>LLM Insights - AI-generated analysis and action plans</li> <li>Signal Assembly - Final signal creation and persistence</li> </ol> <pre><code>df = load_ohlcv(\"AAPL\", \"30m\", 30)\nsignal = agent.analyze_df(\"AAPL\", df)\n</code></pre>"},{"location":"api-reference/#configuration-management","title":"Configuration Management","text":""},{"location":"api-reference/#tradingconfig","title":"TradingConfig","text":"<p>Centralized configuration class that eliminates magic numbers throughout the codebase.</p> <pre><code>from swing_agent.config import get_config, update_config\n\n# Get current configuration\nconfig = get_config()\nprint(f\"EMA slope threshold: {config.EMA_SLOPE_THRESHOLD_UP}\")\nprint(f\"RSI trend threshold: {config.RSI_TREND_UP_MIN}\")\n\n# Update configuration parameters\nupdate_config(\n    EMA_SLOPE_THRESHOLD_UP=0.015,  # More sensitive trend detection\n    RSI_PERIOD=21,                 # Longer RSI period\n    ATR_STOP_MULTIPLIER=1.5       # Tighter stops\n)\n</code></pre> <p>Key Configuration Groups:</p> <ul> <li>Trend Detection: EMA slope thresholds, RSI levels</li> <li>Risk Management: ATR multipliers, stop/target ratios</li> <li>Fibonacci Analysis: Lookback periods, golden pocket levels  </li> <li>Volatility Regimes: Lookback periods, percentile thresholds</li> <li>Confidence Scoring: Base levels, bonus factors</li> <li>Vector Analysis: KNN parameters, similarity thresholds</li> </ul>"},{"location":"api-reference/#error-handling","title":"Error Handling","text":"<p>Enhanced error handling with custom exceptions and detailed error messages:</p> <pre><code>from swing_agent.data import SwingAgentDataError\n\ntry:\n    signal = agent.analyze(\"INVALID_SYMBOL\")\nexcept SwingAgentDataError as e:\n    print(f\"Data error for {e.symbol}: {e}\")\n    # Handle specific data issues (invalid symbol, no data, etc.)\nexcept RuntimeError as e:\n    print(f\"Analysis failed: {e}\")\n    # Handle general analysis errors\n</code></pre> <p>Common Error Scenarios: - Invalid or delisted symbols - Insufficient historical data - Network connectivity issues - Rate limiting from data providers - Market closure during data requests</p>"},{"location":"api-reference/#data-models","title":"Data Models","text":""},{"location":"api-reference/#tradesignal","title":"TradeSignal","text":"<p>Complete trading signal with technical analysis, ML expectations, and LLM insights.</p> <pre><code>class TradeSignal(BaseModel):\n    symbol: str\n    timeframe: Literal[\"15m\", \"30m\", \"1h\", \"1d\"] = \"30m\"\n    asof: str  # Timestamp of analysis\n    trend: TrendState  # Technical trend analysis\n    entry: Optional[EntryPlan] = None  # Entry plan if signal found\n    confidence: float = 0.0  # Overall signal confidence 0-1\n    reasoning: str = \"\"  # Analysis reasoning\n\n    # ML-derived expectations from vector similarity\n    expected_r: Optional[float] = None  # Expected R-multiple return\n    expected_winrate: Optional[float] = None  # Win rate from similar patterns\n    expected_source: Optional[str] = None  # Source of expectations\n    expected_notes: Optional[str] = None  # Additional context\n\n    # Holding time priors from historical patterns\n    expected_hold_bars: Optional[int] = None  # Expected bars to hold\n    expected_hold_days: Optional[float] = None  # Expected days to hold\n    expected_win_hold_bars: Optional[int] = None  # Bars for winning trades\n    expected_loss_hold_bars: Optional[int] = None  # Bars for losing trades\n\n    # LLM insights and action planning\n    llm_vote: Optional[Dict[str, Any]] = None  # LLM trend/bias assessment\n    llm_explanation: Optional[str] = None  # LLM reasoning\n    action_plan: Optional[str] = None  # Execution checklist\n    risk_notes: Optional[str] = None  # Risk and invalidation scenarios\n    scenarios: Optional[List[str]] = None  # Possible outcomes\n\n    # Market context enrichments\n    mtf_15m_trend: Optional[str] = None  # 15-minute trend\n    mtf_1h_trend: Optional[str] = None  # 1-hour trend\n    mtf_alignment: Optional[int] = None  # Multi-timeframe alignment score\n    rs_sector_20: Optional[float] = None  # Relative strength vs sector\n    rs_spy_20: Optional[float] = None  # Relative strength vs SPY\n    sector_symbol: Optional[str] = None  # Sector ETF symbol\n    tod_bucket: Optional[str] = None  # Time of day (\"open\", \"mid\", \"close\")\n    atr_pct: Optional[float] = None  # ATR as percentage of price\n    vol_regime: Optional[str] = None  # Volatility regime (\"L\", \"M\", \"H\")\n</code></pre> <p>Example Usage: <pre><code>agent = SwingAgent()\nsignal = agent.analyze(\"AAPL\")\n\nprint(f\"Symbol: {signal.symbol}\")\nprint(f\"Trend: {signal.trend.label.value}\")\nprint(f\"Confidence: {signal.confidence:.2f}\")\n\nif signal.entry:\n    print(f\"Entry: {signal.entry.side.value} at ${signal.entry.entry_price:.2f}\")\n    print(f\"Stop: ${signal.entry.stop_price:.2f}\")\n    print(f\"Target: ${signal.entry.take_profit:.2f}\")\n    print(f\"R-Multiple: {signal.entry.r_multiple:.2f}\")\n\nif signal.expected_r:\n    print(f\"Expected Return: {signal.expected_r:.2f}R\")\n    print(f\"Expected Win Rate: {signal.expected_winrate:.1%}\")\n</code></pre></p>"},{"location":"api-reference/#trendstate","title":"TrendState","text":"<p>Technical trend analysis with key momentum indicators.</p> <pre><code>class TrendState(BaseModel):\n    label: TrendLabel  # Classified trend direction\n    ema_slope: float  # EMA20 slope as percentage\n    price_above_ema: bool  # Current price vs EMA20\n    rsi_14: float  # 14-period RSI value (0-100)\n</code></pre> <p>TrendLabel Classifications: - <code>STRONG_UP</code>: Strong uptrend (slope &gt; 2%, RSI \u2265 60, price above EMA) - <code>UP</code>: Uptrend (slope &gt; 1%, RSI \u2265 60, price above EMA) - <code>SIDEWAYS</code>: Consolidation or unclear direction - <code>DOWN</code>: Downtrend (slope &lt; -1%, RSI \u2264 40, price below EMA) - <code>STRONG_DOWN</code>: Strong downtrend (slope &lt; -2%, RSI \u2264 40, price below EMA)</p>"},{"location":"api-reference/#entryplan","title":"EntryPlan","text":"<p>Trade entry specification with risk management levels.</p> <pre><code>class EntryPlan(BaseModel):\n    side: SignalSide  # \"long\", \"short\", or \"none\"\n    entry_price: float  # Specific entry price level\n    stop_price: float  # Stop loss price for risk management\n    take_profit: float  # Initial profit target\n    r_multiple: float  # Risk/reward ratio (target/risk)\n    comment: str  # Strategy description and context\n\n    # Fibonacci analysis context\n    fib_golden_low: Optional[float] = None  # 0.618 retracement level\n    fib_golden_high: Optional[float] = None  # 0.65 retracement level  \n    fib_target_1: Optional[float] = None  # 1.272 extension target\n    fib_target_2: Optional[float] = None  # 1.618 extension target\n</code></pre> <p>Entry Strategy Categories: 1. Fibonacci Golden Pocket: Pullback to 0.618-0.65 retracement zone 2. Momentum Continuation: Breakout above/below prior swing extremes 3. Mean Reversion: RSI extreme reversals in sideways markets</p> <p>Risk Management Validation: <pre><code># Long trade validation\nif entry.side == \"long\":\n    assert entry.stop_price &lt; entry.entry_price\n    assert entry.take_profit &gt; entry.entry_price\n\n# Short trade validation  \nif entry.side == \"short\":\n    assert entry.stop_price &gt; entry.entry_price\n    assert entry.take_profit &lt; entry.entry_price\n</code></pre></p>"},{"location":"api-reference/#tradesignal_1","title":"TradeSignal","text":"<p>Complete trading signal with technical analysis, ML expectations, and LLM insights.</p> <pre><code>class TradeSignal(BaseModel):\n    # Core identification\n    symbol: str\n    timeframe: Literal[\"15m\", \"30m\", \"1h\", \"1d\"] = \"30m\"\n    asof: str                              # ISO timestamp\n\n    # Technical analysis\n    trend: TrendState\n    entry: Optional[EntryPlan] = None\n    confidence: float = 0.0\n    reasoning: str = \"\"\n\n    # ML expectations\n    expected_r: float | None = None\n    expected_winrate: float | None = None\n    expected_source: str | None = None\n    expected_notes: str | None = None\n    expected_hold_bars: int | None = None\n    expected_hold_days: float | None = None\n    expected_win_hold_bars: int | None = None\n    expected_loss_hold_bars: int | None = None\n\n    # LLM outputs\n    llm_vote: Optional[Dict[str, Any]] = None\n    llm_explanation: Optional[str] = None\n    action_plan: Optional[str] = None\n    risk_notes: Optional[str] = None\n    scenarios: Optional[List[str]] = None\n\n    # Enrichments\n    mtf_15m_trend: Optional[str] = None\n    mtf_1h_trend: Optional[str] = None\n    mtf_alignment: Optional[int] = None      # 0-2 timeframes aligned\n    rs_sector_20: Optional[float] = None     # Relative strength vs sector\n    rs_spy_20: Optional[float] = None        # Relative strength vs SPY\n    sector_symbol: Optional[str] = None\n    tod_bucket: Optional[str] = None         # \"open\", \"mid\", \"close\"\n    atr_pct: Optional[float] = None\n    vol_regime: Optional[str] = None         # \"L\", \"M\", \"H\"\n</code></pre>"},{"location":"api-reference/#trendstate_1","title":"TrendState","text":"<p>Technical trend analysis results.</p> <pre><code>class TrendState(BaseModel):\n    label: TrendLabel                        # Trend classification\n    ema_slope: float                         # EMA20 slope (normalized)\n    price_above_ema: bool                    # Price vs EMA20 position\n    rsi_14: float                           # RSI(14) current value\n</code></pre>"},{"location":"api-reference/#entryplan_1","title":"EntryPlan","text":"<p>Trade entry plan with risk management.</p> <pre><code>class EntryPlan(BaseModel):\n    side: SignalSide                         # \"long\", \"short\", \"none\"\n    entry_price: float = Field(..., gt=0)\n    stop_price: float = Field(..., gt=0)\n    take_profit: float = Field(..., gt=0)\n    r_multiple: float = Field(..., gt=0)     # Risk-reward ratio\n    comment: str = \"\"                        # Strategy description\n\n    # Fibonacci levels\n    fib_golden_low: Optional[float] = None\n    fib_golden_high: Optional[float] = None\n    fib_target_1: Optional[float] = None     # 1.272 extension\n    fib_target_2: Optional[float] = None     # 1.618 extension\n</code></pre>"},{"location":"api-reference/#enums","title":"Enums","text":"<pre><code>class TrendLabel(str, Enum):\n    STRONG_UP = \"strong_up\"\n    UP = \"up\"\n    SIDEWAYS = \"sideways\" \n    DOWN = \"down\"\n    STRONG_DOWN = \"strong_down\"\n\nclass SignalSide(str, Enum):\n    LONG = \"long\"\n    SHORT = \"short\"\n    NONE = \"none\"\n</code></pre>"},{"location":"api-reference/#database-management","title":"Database Management","text":""},{"location":"api-reference/#database-configuration","title":"Database Configuration","text":"<pre><code>from swing_agent.database import (\n    get_database_config,\n    init_database,\n    get_session,\n    create_postgresql_url,\n    create_mysql_url,\n    create_cnpg_url\n)\n\n# Initialize database tables\ninit_database()\n\n# Get database session for queries\nwith get_session() as session:\n    # Database operations here\n    signals = session.query(Signal).all()\n\n# Create connection URLs\npostgres_url = create_postgresql_url(\n    host=\"localhost\",\n    database=\"swing_agent\", \n    username=\"user\",\n    password=\"pass\"\n)\n\nmysql_url = create_mysql_url(\n    host=\"localhost\",\n    database=\"swing_agent\",\n    username=\"user\", \n    password=\"pass\"\n)\n\n# CloudNativePG URL from environment\ncnpg_url = create_cnpg_url()\n</code></pre>"},{"location":"api-reference/#database-models","title":"Database Models","text":"<p>SQLAlchemy models for centralized storage.</p> <pre><code>from swing_agent.models_db import Signal, VectorStore\n\n# Query signals with filters\nwith get_session() as session:\n    signals = session.query(Signal).filter(\n        Signal.symbol == \"AAPL\",\n        Signal.timeframe == \"30m\"\n    ).order_by(Signal.created_at_utc.desc()).limit(10).all()\n\n    # Query vector patterns with outcomes\n    vectors = session.query(VectorStore).filter(\n        VectorStore.realized_r.isnot(None),\n        VectorStore.symbol == \"AAPL\"\n    ).all()\n</code></pre> <p>Signal Model Fields: - <code>id</code>: Unique signal identifier - <code>symbol</code>, <code>timeframe</code>, <code>asof</code>: Basic signal info - <code>trend_label</code>, <code>ema_slope</code>, <code>rsi14</code>: Technical analysis - <code>entry_price</code>, <code>stop_price</code>, <code>take_profit</code>: Entry plan - <code>confidence</code>, <code>reasoning</code>: Signal quality - <code>expected_r</code>, <code>expected_winrate</code>: ML expectations - <code>action_plan</code>, <code>risk_notes</code>: LLM insights - <code>mtf_alignment</code>, <code>vol_regime</code>: Market context - <code>realized_r</code>, <code>exit_reason</code>: Trade outcomes</p> <p>VectorStore Model Fields: - <code>vid</code>: Unique vector identifier - <code>ts_utc</code>: Vector timestamp - <code>symbol</code>, <code>timeframe</code>: Market context - <code>vector</code>: Feature vector as JSON array - <code>realized_r</code>, <code>exit_reason</code>: Outcomes - <code>payload_json</code>: Additional metadata</p>"},{"location":"api-reference/#migration-utilities","title":"Migration Utilities","text":"<pre><code>from swing_agent.migrate import (\n    migrate_signals,\n    migrate_vectors, \n    migrate_all_data\n)\n\n# Migrate from legacy separate databases\nmigrate_all_data(\n    data_dir=Path(\"data/\"),\n    target_db_url=\"postgresql://user:pass@host:5432/swing_agent\"\n)\n\n# Migrate specific components\nmigrate_signals(\n    old_signals_db=Path(\"data/signals.sqlite\"),\n    target_db_url=\"postgresql://...\"\n)\n\nmigrate_vectors(\n    old_vectors_db=Path(\"data/vec_store.sqlite\"),\n    target_db_url=\"postgresql://...\"\n)\n</code></pre>"},{"location":"api-reference/#configuration-management_1","title":"Configuration Management","text":""},{"location":"api-reference/#tradingconfig_1","title":"TradingConfig","text":"<p>Centralized configuration for all trading parameters.</p> <pre><code>from swing_agent.config import get_config, TradingConfig\n\ncfg = get_config()\n\n# Access trend detection thresholds\nema_threshold_up = cfg.EMA_SLOPE_THRESHOLD_UP      # 0.01\nema_threshold_strong = cfg.EMA_SLOPE_THRESHOLD_STRONG  # 0.02\nema_lookback = cfg.EMA_SLOPE_LOOKBACK              # 6\n\n# RSI parameters\nrsi_oversold = cfg.RSI_OVERSOLD_THRESHOLD          # 35.0\nrsi_overbought = cfg.RSI_OVERBOUGHT_THRESHOLD      # 65.0\nrsi_period = cfg.RSI_PERIOD                        # 14\n\n# Risk management\natr_stop_mult = cfg.ATR_STOP_MULTIPLIER            # 1.2\natr_target_mult = cfg.ATR_TARGET_MULTIPLIER        # 2.0\natr_period = cfg.ATR_PERIOD                        # 14\n\n# Fibonacci settings\nfib_lookback = cfg.FIB_LOOKBACK                    # 40\ngolden_low = cfg.GOLDEN_POCKET_LOW                 # 0.618\ngolden_high = cfg.GOLDEN_POCKET_HIGH               # 0.65\n</code></pre> <p>Configuration Categories: - Trend Detection: EMA slope thresholds, RSI levels - Risk Management: ATR multipliers for stops/targets - Volatility Analysis: Regime classification percentiles - Fibonacci: Lookback periods, golden pocket bounds - Multi-timeframe: Alignment scoring parameters - Vector Store: KNN search parameters</p>"},{"location":"api-reference/#technical-indicators","title":"Technical Indicators","text":""},{"location":"api-reference/#core-functions","title":"Core Functions","text":""},{"location":"api-reference/#emaseries-pdseries-span-int-pdseries","title":"<code>ema(series: pd.Series, span: int) -&gt; pd.Series</code>","text":"<p>Exponential Moving Average calculation.</p> <pre><code>from swing_agent.indicators import ema\n\nclose_prices = df[\"close\"]\nema_20 = ema(close_prices, 20)\n</code></pre>"},{"location":"api-reference/#rsiseries-pdseries-length-int-14-pdseries","title":"<code>rsi(series: pd.Series, length: int = 14) -&gt; pd.Series</code>","text":"<p>Relative Strength Index momentum oscillator.</p> <pre><code>from swing_agent.indicators import rsi\n\nrsi_values = rsi(df[\"close\"], 14)\ncurrent_rsi = rsi_values.iloc[-1]\n</code></pre>"},{"location":"api-reference/#atrdf-pddataframe-length-int-14-pdseries","title":"<code>atr(df: pd.DataFrame, length: int = 14) -&gt; pd.Series</code>","text":"<p>Average True Range volatility indicator.</p> <pre><code>from swing_agent.indicators import atr\n\natr_values = atr(df, 14)\ncurrent_atr = atr_values.iloc[-1]\n</code></pre>"},{"location":"api-reference/#fibonacci_rangedf-pddataframe-lookback-int-40-fibrange","title":"<code>fibonacci_range(df: pd.DataFrame, lookback: int = 40) -&gt; FibRange</code>","text":"<p>Calculate Fibonacci retracement and extension levels.</p> <pre><code>from swing_agent.indicators import fibonacci_range\n\nfib = fibonacci_range(df, lookback=40)\ngolden_pocket = (fib.golden_low, fib.golden_high)\nextension_1272 = fib.levels[\"1.272\"]\n</code></pre>"},{"location":"api-reference/#fibrange-object","title":"FibRange Object","text":"<pre><code>@dataclass\nclass FibRange:\n    start: float                    # Swing start price\n    end: float                      # Swing end price  \n    dir_up: bool                    # True if upward swing\n    levels: dict                    # All Fibonacci levels\n    golden_low: float               # 0.618 level\n    golden_high: float              # 0.65 level\n</code></pre> <p>Available Fibonacci Levels: - Retracements: 0.236, 0.382, 0.5, 0.618, 0.65, 0.786 - Extensions: 1.0, 1.272, 1.414, 1.618</p>"},{"location":"api-reference/#strategy-functions","title":"Strategy Functions","text":""},{"location":"api-reference/#label_trenddf-pddataframe-trendstate","title":"<code>label_trend(df: pd.DataFrame) -&gt; TrendState</code>","text":"<p>Classify market trend based on EMA slope, price position, and RSI using configurable thresholds.</p> <pre><code>from swing_agent.strategy import label_trend\n\ntrend = label_trend(df)\nprint(f\"Trend: {trend.label}, RSI: {trend.rsi_14:.1f}\")\nprint(f\"EMA Slope: {trend.ema_slope:.4f}\")\nprint(f\"Price above EMA: {trend.price_above_ema}\")\n</code></pre> <p>Trend Classification Logic: Uses three main trend categories with configurable thresholds from <code>TradingConfig</code>:</p> <ol> <li>Strong/Up Trends:</li> <li>EMA20 slope &gt; <code>EMA_SLOPE_THRESHOLD_UP</code> (default: 0.01)</li> <li>Price above EMA20</li> <li>RSI \u2265 <code>RSI_TREND_UP_MIN</code> (default: 60)</li> <li> <p>STRONG_UP if slope &gt; <code>EMA_SLOPE_THRESHOLD_STRONG</code> (default: 0.02)</p> </li> <li> <p>Strong/Down Trends:</p> </li> <li>EMA20 slope &lt; <code>EMA_SLOPE_THRESHOLD_DOWN</code> (default: -0.01)</li> <li>Price below EMA20</li> <li>RSI \u2264 <code>RSI_TREND_DOWN_MAX</code> (default: 40)</li> <li> <p>STRONG_DOWN if slope &lt; <code>EMA_SLOPE_THRESHOLD_STRONG_DOWN</code> (default: -0.02)</p> </li> <li> <p>SIDEWAYS: All other conditions</p> </li> </ol>"},{"location":"api-reference/#build_entrydf-pddataframe-trend-trendstate-optionalentryplan","title":"<code>build_entry(df: pd.DataFrame, trend: TrendState) -&gt; Optional[EntryPlan]</code>","text":"<p>Generate entry plan using three main strategies with configurable risk management.</p> <pre><code>from swing_agent.strategy import build_entry, label_trend\n\ntrend = label_trend(df)\nentry = build_entry(df, trend)\n\nif entry:\n    print(f\"Strategy: {entry.comment}\")\n    print(f\"Entry: {entry.side.value} @ {entry.entry_price:.2f}\")\n    print(f\"Stop: {entry.stop_price:.2f}, Target: {entry.take_profit:.2f}\")\n    print(f\"R-Multiple: {entry.r_multiple:.2f}\")\n    print(f\"Golden Pocket: {entry.fib_golden_low:.2f} - {entry.fib_golden_high:.2f}\")\n</code></pre> <p>Entry Strategies:</p> <ol> <li>Fibonacci Golden Pocket Pullbacks (Highest Probability):</li> <li>Triggers when price is within 61.8%-65% retracement of recent swing</li> <li>LONG: In uptrend, price pullback to golden pocket</li> <li>SHORT: In downtrend, price pullback to golden pocket</li> <li>Stop: Golden pocket boundary + <code>ATR_STOP_BUFFER</code> \u00d7 ATR (default: 0.2)</li> <li> <p>Target: Previous swing point or Fibonacci extension</p> </li> <li> <p>Momentum Continuation Breakouts:</p> </li> <li>LONG: In uptrend, breakout above previous high</li> <li>SHORT: In downtrend, breakdown below previous low</li> <li>Stop: Entry \u00b1 <code>ATR_STOP_MULTIPLIER</code> \u00d7 ATR (default: 1.2)</li> <li> <p>Target: Fibonacci extension or <code>ATR_TARGET_MULTIPLIER</code> \u00d7 ATR (default: 2.0)</p> </li> <li> <p>Mean Reversion from Extremes:</p> </li> <li>Triggers in sideways markets only</li> <li>LONG: RSI &lt; <code>RSI_OVERSOLD_THRESHOLD</code> (default: 35)</li> <li>SHORT: RSI &gt; <code>RSI_OVERBOUGHT_THRESHOLD</code> (default: 65)</li> <li>Stop: <code>ATR_MEAN_REVERSION_STOP</code> \u00d7 ATR (default: 1.0)</li> <li>Target: <code>ATR_MEAN_REVERSION_TARGET</code> \u00d7 ATR (default: 1.5)</li> </ol> <p>Risk Management Features: - All stops and targets use ATR-based calculations - R-multiple automatically calculated for each setup - Fibonacci levels included for context and additional targets - Configuration allows easy tuning of all parameters</p>"},{"location":"api-reference/#vector-store-api","title":"Vector Store API","text":""},{"location":"api-reference/#add_vectordb_path-vid-ts_utc-symbol-timeframe-vec-realized_r-exit_reason-payload","title":"<code>add_vector(db_path, vid, ts_utc, symbol, timeframe, vec, realized_r, exit_reason, payload)</code>","text":"<p>Store a feature vector with outcomes.</p> <pre><code>from swing_agent.vectorstore import add_vector\nimport numpy as np\n\nvector = np.array([0.1, 0.8, 0.3, 0.6, 0.2])\nadd_vector(\n    db_path=\"data/vec_store.sqlite\",\n    vid=\"AAPL-2024-01-15T15:30:00Z\",\n    ts_utc=\"2024-01-15T15:30:00Z\",\n    symbol=\"AAPL\",\n    timeframe=\"30m\",\n    vec=vector,\n    realized_r=1.5,\n    exit_reason=\"TP\",\n    payload={\"vol_regime\": \"M\", \"mtf_alignment\": 2}\n)\n</code></pre>"},{"location":"api-reference/#knndb_path-query_vec-k50-symbolnone-listdict","title":"<code>knn(db_path, query_vec, k=50, symbol=None) -&gt; List[Dict]</code>","text":"<p>Find k most similar historical patterns.</p> <pre><code>from swing_agent.vectorstore import knn\nimport numpy as np\n\nquery_vector = np.array([0.1, 0.8, 0.3, 0.6, 0.2])\nneighbors = knn(\n    db_path=\"data/vec_store.sqlite\",\n    query_vec=query_vector,\n    k=50,\n    symbol=\"AAPL\"  # Optional: filter by symbol\n)\n\nfor neighbor in neighbors[:5]:\n    print(f\"Similarity: {neighbor['similarity']:.3f}, R: {neighbor['realized_r']}\")\n</code></pre>"},{"location":"api-reference/#extended_statsneighbors-listdict-dict","title":"<code>extended_stats(neighbors: List[Dict]) -&gt; Dict</code>","text":"<p>Calculate statistical expectations from similar patterns.</p> <pre><code>from swing_agent.vectorstore import extended_stats\n\nstats = extended_stats(neighbors)\nprint(f\"Win Rate: {stats['p_win']:.2%}\")\nprint(f\"Average R: {stats['avg_R']:.2f}\")\nprint(f\"Median Hold: {stats['median_hold_days']} days\")\n</code></pre> <p>Returned Statistics: - <code>n</code>: Number of neighbors - <code>p_win</code>: Win rate (0-1) - <code>avg_R</code>: Average R-multiple - <code>avg_win_R</code>: Average winning R-multiple - <code>avg_loss_R</code>: Average losing R-multiple - <code>median_hold_bars</code>: Median holding period in bars - <code>median_hold_days</code>: Median holding period in days - <code>median_win_hold_bars</code>: Median winning trade duration - <code>median_loss_hold_bars</code>: Median losing trade duration - <code>profit_factor</code>: Gross profit / gross loss - <code>tp</code>: Count of take-profit exits - <code>sl</code>: Count of stop-loss exits - <code>time</code>: Count of time-based exits</p>"},{"location":"api-reference/#feature-engineering","title":"Feature Engineering","text":""},{"location":"api-reference/#build_setup_vectorprice-trend-entry-prev_range_pct-gap_pct-atr_pct-session_bin-llm_conf","title":"<code>build_setup_vector(price, trend, entry, prev_range_pct, gap_pct, atr_pct, session_bin, llm_conf)</code>","text":"<p>Convert market state into ML feature vector.</p> <pre><code>from swing_agent.features import build_setup_vector\n\nvector = build_setup_vector(\n    price=185.50,\n    trend=trend_state,\n    entry=entry_plan,\n    prev_range_pct=0.015,\n    gap_pct=0.002,\n    atr_pct=0.012,\n    session_bin=1,  # 0=open, 1=mid, 2=close\n    llm_conf=0.75\n)\n</code></pre>"},{"location":"api-reference/#time_of_day_bucketts-pdtimestamp-str","title":"<code>time_of_day_bucket(ts: pd.Timestamp) -&gt; str</code>","text":"<p>Classify timestamp into trading session.</p> <pre><code>from swing_agent.features import time_of_day_bucket\n\nbucket = time_of_day_bucket(pd.Timestamp(\"2024-01-15 10:30:00\", tz=\"US/Eastern\"))\n# Returns: \"open\", \"mid\", or \"close\"\n</code></pre>"},{"location":"api-reference/#vol_regime_from_seriesprice-pdseries-str","title":"<code>vol_regime_from_series(price: pd.Series) -&gt; str</code>","text":"<p>Classify volatility regime from price series.</p> <pre><code>from swing_agent.features import vol_regime_from_series\n\nregime = vol_regime_from_series(df[\"close\"])\n# Returns: \"L\" (low), \"M\" (medium), or \"H\" (high)\n</code></pre>"},{"location":"api-reference/#data-management","title":"Data Management","text":""},{"location":"api-reference/#load_ohlcvsymbol-interval30m-lookback_days30-pddataframe","title":"<code>load_ohlcv(symbol, interval=\"30m\", lookback_days=30) -&gt; pd.DataFrame</code>","text":"<p>Fetch market data via Yahoo Finance.</p> <pre><code>from swing_agent.data import load_ohlcv\n\n# Fetch 30 days of 30-minute AAPL data\ndf = load_ohlcv(\"AAPL\", \"30m\", 30)\n\n# Available intervals: \"15m\", \"30m\", \"1h\", \"1d\"\ndaily_data = load_ohlcv(\"AAPL\", \"1d\", 90)\n</code></pre> <p>Returned DataFrame: - Index: UTC timestamps - Columns: open, high, low, close, volume (lowercase) - Data cleaning: duplicates removed, timezone normalized</p>"},{"location":"api-reference/#llm-integration","title":"LLM Integration","text":""},{"location":"api-reference/#llm_extra_predictionfeatures-llmvote","title":"<code>llm_extra_prediction(**features) -&gt; LlmVote</code>","text":"<p>Get LLM analysis of current market setup.</p> <pre><code>from swing_agent.llm_predictor import llm_extra_prediction\n\nvote = llm_extra_prediction(\n    symbol=\"AAPL\",\n    price=185.50,\n    trend_label=\"up\",\n    rsi_14=62.3,\n    ema_slope=0.0156,\n    fib_golden_low=184.20,\n    fib_golden_high=186.10\n)\n\nprint(f\"LLM Trend: {vote.trend_label}\")\nprint(f\"Entry Bias: {vote.entry_bias}\")\nprint(f\"Confidence: {vote.confidence}\")\nprint(f\"Rationale: {vote.rationale}\")\n</code></pre>"},{"location":"api-reference/#llm_build_action_plansignal_json-stylebalanced-llmactionplan","title":"<code>llm_build_action_plan(signal_json, style=\"balanced\") -&gt; LlmActionPlan</code>","text":"<p>Generate structured action plan for a trade signal.</p> <pre><code>from swing_agent.llm_predictor import llm_build_action_plan\n\nplan = llm_build_action_plan(\n    signal_json=signal.model_dump(),\n    style=\"balanced\"  # \"conservative\", \"balanced\", \"aggressive\"\n)\n\nprint(\"Action Plan:\")\nprint(plan.action_plan)\nprint(\"\\nRisk Notes:\")\nprint(plan.risk_notes)\nprint(\"\\nScenarios:\")\nfor scenario in plan.scenarios:\n    print(f\"- {scenario}\")\n</code></pre>"},{"location":"api-reference/#storage-api","title":"Storage API","text":""},{"location":"api-reference/#record_signalts-tradesignal-db_path-str-str","title":"<code>record_signal(ts: TradeSignal, db_path: str) -&gt; str</code>","text":"<p>Store a complete trading signal in the database.</p> <pre><code>from swing_agent.storage import record_signal\n\nsignal_id = record_signal(trade_signal, \"data/signals.sqlite\")\nprint(f\"Stored signal: {signal_id}\")\n</code></pre>"},{"location":"api-reference/#mark_evaluationsignal_id-db_path-exit_reason-exit_price-exit_time_utc-realized_r","title":"<code>mark_evaluation(signal_id, db_path, exit_reason, exit_price, exit_time_utc, realized_r)</code>","text":"<p>Update signal with trade outcome.</p> <pre><code>from swing_agent.storage import mark_evaluation\n\nmark_evaluation(\n    signal_id=\"abc123\",\n    db_path=\"data/signals.sqlite\",\n    exit_reason=\"TP\",\n    exit_price=190.80,\n    exit_time_utc=\"2024-01-16T14:30:00Z\",\n    realized_r=1.61\n)\n</code></pre>"},{"location":"api-reference/#backtesting","title":"Backtesting","text":""},{"location":"api-reference/#simulate_tradedf-open_idx-side-entry-stop-target-max_hold_bars","title":"<code>simulate_trade(df, open_idx, side, entry, stop, target, max_hold_bars)</code>","text":"<p>Simulate a trade execution with realistic fills.</p> <pre><code>from swing_agent.backtester import simulate_trade\nfrom swing_agent.models import SignalSide\n\nexit_idx, exit_reason, exit_price = simulate_trade(\n    df=price_data,\n    open_idx=100,              # Bar index for trade entry\n    side=SignalSide.LONG,\n    entry=185.50,\n    stop=182.20,\n    target=190.80,\n    max_hold_bars=26           # 1 day = ~13 bars for 30m\n)\n\nprint(f\"Exit: {exit_reason} @ {exit_price} after {exit_idx-100} bars\")\n</code></pre> <p>Exit Reasons: - <code>\"TP\"</code>: Take profit hit - <code>\"SL\"</code>: Stop loss hit - <code>\"TIME\"</code>: Maximum holding period reached</p>"},{"location":"api-reference/#error-handling_1","title":"Error Handling","text":"<p>All functions include basic error handling:</p> <pre><code>try:\n    signal = agent.analyze(\"INVALID_SYMBOL\")\nexcept RuntimeError as e:\n    print(f\"Analysis failed: {e}\")\n\n# LLM functions gracefully degrade\ntry:\n    vote = llm_extra_prediction(**features)\nexcept Exception:\n    vote = None  # Continue without LLM\n</code></pre>"},{"location":"api-reference/#environment-variables","title":"Environment Variables","text":"<pre><code># Required for LLM features\nexport OPENAI_API_KEY=\"sk-...\"\nexport SWING_LLM_MODEL=\"gpt-4o-mini\"  # or \"gpt-4\", \"gpt-3.5-turbo\"\n</code></pre>"},{"location":"api-reference/#usage-examples","title":"Usage Examples","text":""},{"location":"api-reference/#complete-signal-generation","title":"Complete Signal Generation","text":"<pre><code>from swing_agent.agent import SwingAgent\n\n# Initialize agent\nagent = SwingAgent(\n    interval=\"30m\",\n    lookback_days=30,\n    log_db=\"data/signals.sqlite\",\n    vec_db=\"data/vec_store.sqlite\",\n    use_llm=True,\n    sector_symbol=\"QQQ\"\n)\n\n# Generate signal\nsignal = agent.analyze(\"AAPL\")\n\n# Access results\nif signal.entry:\n    print(f\"Entry: {signal.entry.side} @ {signal.entry.entry_price}\")\n    print(f\"Stop: {signal.entry.stop_price}\")\n    print(f\"Target: {signal.entry.take_profit}\")\n    print(f\"R-Multiple: {signal.entry.r_multiple}\")\n\nif signal.expected_r:\n    print(f\"Expected R: {signal.expected_r}\")\n    print(f\"Win Rate: {signal.expected_winrate:.2%}\")\n\nif signal.action_plan:\n    print(f\"Action Plan: {signal.action_plan}\")\n</code></pre>"},{"location":"api-reference/#custom-analysis-pipeline","title":"Custom Analysis Pipeline","text":"<pre><code>from swing_agent.data import load_ohlcv\nfrom swing_agent.strategy import label_trend, build_entry\nfrom swing_agent.indicators import fibonacci_range\nfrom swing_agent.features import build_setup_vector\n\n# 1. Load data\ndf = load_ohlcv(\"AAPL\", \"30m\", 30)\n\n# 2. Technical analysis\ntrend = label_trend(df)\nentry = build_entry(df, trend)\nfib = fibonacci_range(df, lookback=40)\n\n# 3. Feature engineering\nvector = build_setup_vector(\n    price=df[\"close\"].iloc[-1],\n    trend=trend,\n    entry=entry,\n    atr_pct=0.012,\n    session_bin=1,\n    llm_conf=0.0\n)\n\nprint(f\"Trend: {trend.label}\")\nprint(f\"Entry: {entry.side if entry else 'None'}\")\nprint(f\"Feature Vector: {vector}\")\n</code></pre>"},{"location":"architecture/","title":"System Architecture","text":"<p>This document provides a detailed overview of the SwingAgent v1.6.1 system architecture, component responsibilities, and data flow.</p>"},{"location":"architecture/#high-level-architecture","title":"High-Level Architecture","text":"graph TB     A[Market Data] --&gt; B[SwingAgent Core]     B --&gt; C[Technical Analysis]     B --&gt; D[ML Pattern Matching]     B --&gt; E[LLM Integration]     C --&gt; F[Signal Generation]     D --&gt; F     E --&gt; F     F --&gt; G[Centralized Database]     G --&gt; H[Vector Store]     G --&gt; I[Signal Storage]     H --&gt; J[Performance Tracking]     I --&gt; J     J --&gt; K[Backtesting &amp; Analytics]"},{"location":"architecture/#database-architecture","title":"Database Architecture","text":"<p>SwingAgent v1.6.1 introduces a centralized database architecture using SQLAlchemy ORM:</p> graph LR     A[SwingAgent] --&gt; B[Database Layer]     B --&gt; C[SQLite Default]     B --&gt; D[PostgreSQL]     B --&gt; E[MySQL]      B --&gt; F[CNPG Kubernetes]      G[Legacy Migration] --&gt; B     G --&gt; H[Signals DB]     G --&gt; I[Vector DB]     H --&gt; B     I --&gt; B"},{"location":"architecture/#database-features","title":"Database Features","text":"<ul> <li>Unified Storage: Single database for signals and vector patterns</li> <li>Multiple Backends: SQLite, PostgreSQL, MySQL, CloudNativePG</li> <li>Migration Tools: Automated migration from legacy separate databases</li> <li>SQLAlchemy ORM: Type-safe database operations</li> <li>Production Ready: Connection pooling, SSL support, Kubernetes integration</li> </ul>"},{"location":"architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/#1-swingagent-core-agentpy","title":"1. SwingAgent Core (<code>agent.py</code>)","text":"<p>The main orchestrator that coordinates all system components.</p> <p>Key Responsibilities: - Data fetching and preprocessing - Component orchestration - Multi-timeframe analysis coordination - Signal assembly and validation - Database session management</p> <p>Key Methods: - <code>analyze(symbol)</code>: Main entry point for signal generation - <code>analyze_df(symbol, df)</code>: Core analysis with pre-loaded data - <code>_rel_strength()</code>: Relative strength calculation - <code>_context_from_df()</code>: Market context extraction - <code>_multitimeframe_analysis()</code>: MTF trend alignment</p> <p>Data Flow: <pre><code>Input: Symbol + Configuration\n\u2193\nFetch OHLCV data (current + 15m/1h timeframes)\n\u2193\nTechnical analysis (trend, indicators, Fibonacci)\n\u2193\nMulti-timeframe alignment check\n\u2193\nEntry plan generation\n\u2193\nVector pattern matching via centralized database\n\u2193\nLLM analysis (if enabled)\n\u2193\nSignal assembly and database storage\n</code></pre></p>"},{"location":"architecture/#2-database-layer-databasepy-models_dbpy","title":"2. Database Layer (<code>database.py</code>, <code>models_db.py</code>)","text":"<p>Centralized database management using SQLAlchemy ORM.</p> <p>Key Components: - <code>database.py</code>: Session management, connection configuration - <code>models_db.py</code>: SQLAlchemy models for signals and vectors - <code>migrate.py</code>: Migration utilities for legacy databases</p> <p>Supported Backends: - SQLite: Default for development (<code>data/swing_agent.sqlite</code>) - PostgreSQL: Production deployments with <code>psycopg2</code> - MySQL: Alternative production backend with <code>PyMySQL</code> - CNPG: CloudNativePG for Kubernetes deployments</p> <p>Configuration Options: <pre><code># Environment variable configurations\nSWING_DATABASE_URL=\"postgresql://user:pass@host:5432/db\"\nSWING_DB_TYPE=\"postgresql\"  # sqlite, postgresql, mysql, cnpg\nSWING_DB_HOST=\"localhost\"\nSWING_DB_NAME=\"swing_agent\"\nSWING_DB_USER=\"username\"\nSWING_DB_PASSWORD=\"password\"\n</code></pre></p>"},{"location":"architecture/#3-configuration-management-configpy","title":"3. Configuration Management (<code>config.py</code>)","text":"<p>Centralized parameter management for all trading thresholds.</p> <p>Key Features: - Eliminates magic numbers throughout codebase - Type-safe configuration with dataclasses - Consistent parameter access via <code>get_config()</code></p> <p>Configuration Categories: - Trend detection thresholds - RSI momentum parameters - Risk management (ATR multipliers) - Volatility regime classification - Fibonacci analysis parameters - Multi-timeframe settings - Vector store configuration \u2193 Vector store lookup for historical patterns \u2193 LLM analysis (optional) \u2193 Signal assembly and storage <pre><code>### 2. Strategy Engine (`strategy.py`)\n\nImplements the core trading logic for trend identification and entry planning.\n\n**Trend Labeling Logic:**\n```python\nif slope &gt; 0.01 and price_above_ema and rsi &gt;= 60:\n    label = STRONG_UP if slope &gt; 0.02 else UP\nelif slope &lt; -0.01 and not price_above_ema and rsi &lt;= 40:\n    label = STRONG_DOWN if slope &lt; -0.02 else DOWN\nelse:\n    label = SIDEWAYS\n</code></pre></p> <p>Entry Strategies:</p> <ol> <li>Fibonacci Golden Pocket</li> <li>Entry: Within 0.618-0.65 retracement</li> <li>Stop: Below golden pocket + 0.2*ATR buffer</li> <li> <p>Target: Previous high/low or 1.272 extension</p> </li> <li> <p>Momentum Continuation</p> </li> <li>Entry: Break above/below previous high/low</li> <li>Stop: 1.2*ATR from entry</li> <li> <p>Target: 2.0*ATR or Fibonacci extension</p> </li> <li> <p>Mean Reversion</p> </li> <li>Entry: RSI &lt; 35 (oversold) or RSI &gt; 65 (overbought)</li> <li>Stop: 1.0*ATR from entry</li> <li>Target: 1.5*ATR mean reversion</li> </ol>"},{"location":"architecture/#3-technical-indicators-indicatorspy","title":"3. Technical Indicators (<code>indicators.py</code>)","text":"<p>Provides all technical analysis calculations.</p> <p>Indicators Implemented: - EMA: Exponential Moving Average with configurable span - RSI: Relative Strength Index (14-period default) - ATR: Average True Range for volatility measurement - Bollinger Width: Volatility regime classification - Fibonacci Levels: Retracement and extension calculations</p> <p>Fibonacci Calculation: <pre><code>def fibonacci_range(df, lookback=40):\n    # Find recent swing high/low within lookback period\n    # Calculate retracement levels (0.236, 0.382, 0.5, 0.618, 0.786)\n    # Calculate extension levels (1.272, 1.414, 1.618)\n    # Determine golden pocket (0.618-0.65 range)\n</code></pre></p>"},{"location":"architecture/#4-feature-engineering-featurespy","title":"4. Feature Engineering (<code>features.py</code>)","text":"<p>Converts market data into ML-ready feature vectors.</p> <p>Feature Vector Components: - Trend direction (up/down/sideways binary encoding) - RSI momentum (normalized 0-1) - Price position relative to EMAs - Fibonacci position within golden pocket - ATR percentage (volatility) - Session timing (open/mid/close buckets) - Gap analysis - LLM confidence (if available)</p> <p>Session Bucketing: - Open: First 2 hours of trading - Mid: Middle hours - Close: Last 2 hours of trading</p> <p>Volatility Regime: - Low: Bottom 33% of 60-period Bollinger width - Medium: Middle 33% - High: Top 33%</p>"},{"location":"architecture/#5-vector-store-vectorstorepy","title":"5. Vector Store (<code>vectorstore.py</code>)","text":"<p>SQLite-based similarity search for historical pattern matching.</p> <p>Database Schema: <pre><code>CREATE TABLE vec_store (\n  id TEXT PRIMARY KEY,\n  ts_utc TEXT NOT NULL,\n  symbol TEXT NOT NULL,\n  timeframe TEXT NOT NULL,\n  vec_json TEXT NOT NULL,     -- Feature vector as JSON\n  realized_r REAL,            -- Actual R-multiple outcome\n  exit_reason TEXT,           -- TP/SL/TIME\n  payload_json TEXT           -- Additional context data\n);\n</code></pre></p> <p>KNN Search Process: 1. Encode current market state into feature vector 2. Calculate cosine similarity with all stored vectors 3. Return top-k most similar historical setups 4. Filter by symbol (optional) and volatility regime 5. Calculate statistical expectations from neighbors</p> <p>Statistical Metrics: - Win rate (% of positive R outcomes) - Average R-multiple (risk-adjusted returns) - Median holding time (bars and days) - Profit factor (gross profit / gross loss) - Exit reason distribution (TP/SL/TIME)</p>"},{"location":"architecture/#6-signal-storage-storagepy","title":"6. Signal Storage (<code>storage.py</code>)","text":"<p>Comprehensive signal database with expectations and outcomes.</p> <p>Database Schema: <pre><code>CREATE TABLE signals (\n  -- Core signal data\n  id TEXT PRIMARY KEY,\n  symbol TEXT NOT NULL,\n  timeframe TEXT NOT NULL,\n  asof TEXT NOT NULL,\n  trend_label TEXT NOT NULL,\n\n  -- Technical indicators\n  ema_slope REAL NOT NULL,\n  price_above_ema INTEGER NOT NULL,\n  rsi14 REAL NOT NULL,\n\n  -- Entry plan\n  side TEXT,\n  entry_price REAL,\n  stop_price REAL,\n  take_profit REAL,\n  r_multiple REAL,\n\n  -- Fibonacci levels\n  fib_golden_low REAL,\n  fib_golden_high REAL,\n  fib_target_1 REAL,\n  fib_target_2 REAL,\n\n  -- ML expectations\n  expected_r REAL,\n  expected_winrate REAL,\n  expected_hold_bars INTEGER,\n  expected_hold_days REAL,\n\n  -- LLM outputs\n  llm_vote_json TEXT,\n  llm_explanation TEXT,\n  action_plan TEXT,\n  risk_notes TEXT,\n  scenarios_json TEXT,\n\n  -- Enrichments\n  mtf_15m_trend TEXT,\n  mtf_1h_trend TEXT,\n  mtf_alignment INTEGER,\n  rs_sector_20 REAL,\n  rs_spy_20 REAL,\n  sector_symbol TEXT,\n  tod_bucket TEXT,\n  atr_pct REAL,\n  vol_regime TEXT,\n\n  -- Evaluation results\n  evaluated INTEGER DEFAULT 0,\n  exit_reason TEXT,\n  exit_price REAL,\n  exit_time_utc TEXT,\n  realized_r REAL\n);\n</code></pre></p>"},{"location":"architecture/#7-llm-integration-llm_predictorpy","title":"7. LLM Integration (<code>llm_predictor.py</code>)","text":"<p>OpenAI integration for trade explanations and action plans.</p> <p>LLM Vote Structure: <pre><code>class LlmVote(BaseModel):\n    trend_label: Literal[\"strong_up\", \"up\", \"sideways\", \"down\", \"strong_down\"]\n    entry_bias: Literal[\"long\", \"short\", \"none\"]\n    entry_window_low: Optional[float]\n    entry_window_high: Optional[float]\n    confidence: float  # 0-1\n    rationale: str\n</code></pre></p> <p>Action Plan Structure: <pre><code>class LlmActionPlan(BaseModel):\n    action_plan: str          # Step-by-step execution plan\n    risk_notes: str           # Risk management and invalidations\n    scenarios: List[str]      # 2-4 potential outcomes\n    tone: Literal[\"conservative\", \"balanced\", \"aggressive\"]\n</code></pre></p> <p>LLM Usage Pattern: 1. Technical analysis completed first (no LLM influence on math) 2. LLM provides additional confidence and explanation 3. LLM generates structured action plans with scenarios 4. All LLM outputs stored for transparency and analysis</p>"},{"location":"architecture/#8-data-management-datapy","title":"8. Data Management (<code>data.py</code>)","text":"<p>Market data fetching and preprocessing via Yahoo Finance.</p> <p>Supported Timeframes: - 15m: 15-minute bars - 30m: 30-minute bars - 1h: 1-hour bars - 1d: Daily bars</p> <p>Data Quality Checks: - Remove duplicate timestamps - Validate OHLCV column presence - Convert timezone to UTC - Handle missing data gracefully</p>"},{"location":"architecture/#9-backtesting-engine-backtesterpy","title":"9. Backtesting Engine (<code>backtester.py</code>)","text":"<p>Trade simulation for historical performance analysis.</p> <p>Simulation Logic: <pre><code>def simulate_trade(df, open_idx, side, entry, stop, target, max_hold_bars):\n    for i in range(open_idx + 1, min(len(df), open_idx + 1 + max_hold_bars)):\n        high, low = df[\"high\"].iloc[i], df[\"low\"].iloc[i]\n\n        if side == LONG:\n            if low &lt;= stop: return i, \"SL\", stop\n            if high &gt;= target: return i, \"TP\", target\n        else:  # SHORT\n            if high &gt;= stop: return i, \"SL\", stop\n            if low &lt;= target: return i, \"TP\", target\n\n    # Time exit if max holding period reached\n    exit_idx = min(len(df) - 1, open_idx + max_hold_bars)\n    return exit_idx, \"TIME\", df[\"close\"].iloc[exit_idx]\n</code></pre></p>"},{"location":"architecture/#data-flow-diagram","title":"Data Flow Diagram","text":"sequenceDiagram     participant User     participant Agent     participant Strategy     participant Indicators     participant VectorStore     participant LLM     participant Storage      User-&gt;&gt;Agent: analyze(symbol)     Agent-&gt;&gt;Data: fetch_ohlcv(symbol)     Data--&gt;&gt;Agent: OHLCV DataFrame      Agent-&gt;&gt;Indicators: calculate_all(df)     Indicators--&gt;&gt;Agent: EMA, RSI, ATR, Fibonacci      Agent-&gt;&gt;Strategy: label_trend(df)     Strategy--&gt;&gt;Agent: TrendState      Agent-&gt;&gt;Strategy: build_entry(df, trend)     Strategy--&gt;&gt;Agent: EntryPlan      Agent-&gt;&gt;Features: build_setup_vector(...)     Features--&gt;&gt;Agent: feature_vector      Agent-&gt;&gt;VectorStore: knn(feature_vector)     VectorStore--&gt;&gt;Agent: similar_patterns      Agent-&gt;&gt;VectorStore: extended_stats(patterns)     VectorStore--&gt;&gt;Agent: expectations      opt LLM enabled         Agent-&gt;&gt;LLM: llm_extra_prediction(features)         LLM--&gt;&gt;Agent: LlmVote          Agent-&gt;&gt;LLM: llm_build_action_plan(signal)         LLM--&gt;&gt;Agent: LlmActionPlan     end      Agent-&gt;&gt;Storage: record_signal(trade_signal)     Storage--&gt;&gt;Agent: signal_id      Agent--&gt;&gt;User: TradeSignal"},{"location":"architecture/#configuration-management","title":"Configuration Management","text":"<p>Currently, configuration is handled through:</p> <ol> <li>Command-line arguments: Script-specific parameters</li> <li>Environment variables: API keys and model settings</li> <li>Hardcoded constants: Technical indicator parameters</li> </ol> <p>Environment Variables: <pre><code>OPENAI_API_KEY=sk-...           # OpenAI API key\nSWING_LLM_MODEL=gpt-4o-mini     # LLM model selection\n</code></pre></p>"},{"location":"architecture/#error-handling-strategy","title":"Error Handling Strategy","text":"<p>Current Approach: - Basic try/catch around external API calls - Graceful degradation when LLM unavailable - Data validation at component boundaries</p> <p>Areas for Improvement: - Centralized error logging - Retry logic for network failures - Input validation and sanitization - Structured error reporting</p>"},{"location":"architecture/#performance-considerations","title":"Performance Considerations","text":"<p>Bottlenecks: 1. Vector Store Lookups: Loading all vectors for each search 2. LLM API Calls: Network latency and rate limits 3. Data Fetching: Yahoo Finance API limitations 4. Historical Backtesting: Processing large datasets</p> <p>Optimization Opportunities: 1. Vector store indexing and caching 2. Batch LLM processing 3. Data caching and incremental updates 4. Parallel processing for backtests</p>"},{"location":"architecture/#security-architecture","title":"Security Architecture","text":"<p>Current Security Measures: - Environment variable for API keys - No hardcoded credentials - SQL parameterized queries (mostly)</p> <p>Security Gaps: - No API key rotation - Limited input validation - No rate limiting on external calls - Missing audit logging</p>"},{"location":"best-practices/","title":"Best Practices for SwingAgent Trading","text":"<p>This guide provides professional tips and proven strategies for getting the most out of SwingAgent while maintaining proper risk management.</p>"},{"location":"best-practices/#signal-selection-best-practices","title":"Signal Selection Best Practices","text":""},{"location":"best-practices/#quality-over-quantity","title":"Quality Over Quantity","text":"<p>The most successful SwingAgent users are highly selective about which signals they trade.</p> <p>High-Quality Signal Criteria: - Confidence \u2265 70%: Strong pattern match with historical data - R-Multiple \u2265 1.5: Favorable risk/reward ratio - Expected Win Rate \u2265 55%: Better than coin flip probability - MTF Alignment = 2: Both timeframes confirm the setup - Clear Entry Zone: Specific price range, not a single price point</p> <p>Example of a Premium Signal: <pre><code>{\n  \"symbol\": \"AAPL\",\n  \"confidence\": 0.78,\n  \"entry\": {\n    \"r_multiple\": 1.82,\n    \"fib_golden_low\": 184.20,\n    \"fib_golden_high\": 186.10\n  },\n  \"expected_winrate\": 0.62,\n  \"mtf_alignment\": 2,\n  \"vol_regime\": \"M\"\n}\n</code></pre></p>"},{"location":"best-practices/#signal-filtering-strategy","title":"Signal Filtering Strategy","text":"<p>Don't take every signal. Use this hierarchy:</p> <ol> <li>Tier 1 (Take immediately): Confidence &gt;80%, R-multiple &gt;2.0</li> <li>Tier 2 (Take selectively): Confidence 70-80%, R-multiple 1.5-2.0</li> <li>Tier 3 (Consider carefully): Confidence 60-70%, R-multiple 1.3-1.5</li> <li>Tier 4 (Usually skip): Below Tier 3 thresholds</li> </ol>"},{"location":"best-practices/#position-sizing-guidelines","title":"Position Sizing Guidelines","text":""},{"location":"best-practices/#base-position-size-formula","title":"Base Position Size Formula","text":"<pre><code>Position Size = (Account Risk %) \u00f7 (Entry Price - Stop Price) \u00d7 Account Value\n</code></pre> <p>Example: - Account: $10,000 - Risk per trade: 2% - Entry: $100 - Stop: $96 - Position Size = 2% \u00f7 $4 \u00d7 $10,000 = 50 shares</p>"},{"location":"best-practices/#volatility-adjustments","title":"Volatility Adjustments","text":"<p>Adjust your base position size based on volatility regime:</p> <ul> <li>Low Volatility (\"L\"): +25% of base size</li> <li>Medium Volatility (\"M\"): Base size</li> <li>High Volatility (\"H\"): -25% of base size</li> </ul>"},{"location":"best-practices/#confidence-adjustments","title":"Confidence Adjustments","text":"<p>Further adjust based on signal confidence:</p> <ul> <li>Confidence &gt;80%: +20% of calculated size</li> <li>Confidence 70-80%: Calculated size</li> <li>Confidence 60-70%: -20% of calculated size</li> <li>Confidence &lt;60%: Consider skipping</li> </ul>"},{"location":"best-practices/#entry-execution-best-practices","title":"Entry Execution Best Practices","text":""},{"location":"best-practices/#timing-your-entries","title":"Timing Your Entries","text":"<p>Best Entry Times: - 9:30-10:30 AM: High volume, clear direction establishment - 2:00-3:00 PM: Institutional activity, trend continuation - Avoid: First 5 minutes (too volatile), last 30 minutes (unpredictable)</p>"},{"location":"best-practices/#entry-zone-strategy","title":"Entry Zone Strategy","text":"<p>SwingAgent provides entry ranges (e.g., $184.20-$186.10). Use this approach:</p> <ol> <li>Wait for the zone: Don't chase above the high end</li> <li>Scale in: Enter 60% at zone midpoint, 40% at favorable end</li> <li>Use limit orders: Avoid market orders during volatile periods</li> <li>Set stops immediately: Place stop-loss order as soon as filled</li> </ol> <p>Example Entry Plan: <pre><code># Signal shows entry zone $184.20-$186.10\n# Place limit orders:\n# 60% of position at $185.15 (midpoint)\n# 40% of position at $184.50 (favorable end)\n# Stop loss at $182.20 for all shares\n</code></pre></p>"},{"location":"best-practices/#risk-management-best-practices","title":"Risk Management Best Practices","text":""},{"location":"best-practices/#the-2-rule","title":"The 2% Rule","text":"<p>Never risk more than 2% of your account on any single trade. This allows for a string of losses without devastating your account.</p> <p>Why 2% Works: - 10 consecutive losses = -18% account drawdown (recoverable) - Allows for statistical edge to play out over time - Prevents emotional decision-making</p>"},{"location":"best-practices/#stop-loss-discipline","title":"Stop-Loss Discipline","text":"<p>SwingAgent calculates technical stop levels. Follow them religiously:</p> <ol> <li>Set stops immediately upon entry</li> <li>Never move stops against you (only in your favor)</li> <li>Don't hope for reversals - cut losses quickly</li> <li>Honor the stop even if you \"know\" the stock will bounce</li> </ol>"},{"location":"best-practices/#position-correlation-management","title":"Position Correlation Management","text":"<p>Avoid taking multiple highly correlated positions:</p> <p>Poor Diversification: <pre><code># All tech stocks - highly correlated\nAAPL long\nMSFT long  \nGOOGL long\nNVDA long\n</code></pre></p> <p>Better Diversification: <pre><code># Mixed sectors - lower correlation\nAAPL long (tech)\nJPM long (finance)\nXLE long (energy)\nWMT long (consumer staples)\n</code></pre></p>"},{"location":"best-practices/#profit-taking-strategies","title":"Profit-Taking Strategies","text":""},{"location":"best-practices/#the-50-25-25-method","title":"The 50-25-25 Method","text":"<p>This is the most popular profit-taking strategy among successful SwingAgent users:</p> <ul> <li>50% at 1R: Lock in profit when trade moves in your favor by the amount you risked</li> <li>25% at 1.5R: Take additional profits as momentum continues</li> <li>25% at target: Let remaining position run to full target</li> </ul> <p>Example: - Entry: $100, Stop: $96, Target: $108 (Risk: $4, Reward: $8, R-multiple: 2.0) - Take 50% profit at $104 (1R = $4 profit) - Take 25% profit at $106 (1.5R = $6 profit) - Let 25% run to $108 target (2R = $8 profit)</p>"},{"location":"best-practices/#trailing-stop-strategy","title":"Trailing Stop Strategy","text":"<p>For strong trending moves, consider trailing your stop:</p> <ol> <li>After 1R profit: Move stop to breakeven</li> <li>After 1.5R profit: Move stop to +0.5R</li> <li>After 2R profit: Move stop to +1R</li> </ol>"},{"location":"best-practices/#daily-and-weekly-routines","title":"Daily and Weekly Routines","text":""},{"location":"best-practices/#morning-routine-15-minutes","title":"Morning Routine (15 minutes)","text":"<pre><code># 1. Check major market ETFs for overall direction\npython scripts/run_swing_agent.py --symbol SPY --interval 30m\npython scripts/run_swing_agent.py --symbol QQQ --interval 30m\n\n# 2. Scan your watchlist sectors\npython scripts/run_swing_agent.py --symbol XLF --interval 30m\npython scripts/run_swing_agent.py --symbol XLE --interval 30m\npython scripts/run_swing_agent.py --symbol XLV --interval 30m\n\n# 3. Check individual opportunities\npython scripts/run_swing_agent.py --symbol AAPL --interval 30m --sector QQQ\npython scripts/run_swing_agent.py --symbol MSFT --interval 30m --sector QQQ\n</code></pre>"},{"location":"best-practices/#evening-routine-10-minutes","title":"Evening Routine (10 minutes)","text":"<pre><code># Review positions and update stops\n# Plan tomorrow's potential entries\n# Check any pending signals that may trigger\n</code></pre>"},{"location":"best-practices/#weekly-review-30-minutes","title":"Weekly Review (30 minutes)","text":"<pre><code># Evaluate closed trades\npython scripts/eval_signals.py --max-hold-days 2.0\n\n# Analyze overall performance\npython scripts/analyze_performance.py\n\n# Review and update watchlists\n# Plan next week's focus sectors\n</code></pre>"},{"location":"best-practices/#market-condition-adaptations","title":"Market Condition Adaptations","text":""},{"location":"best-practices/#bull-market-best-practices","title":"Bull Market Best Practices","text":"<ul> <li>Focus on momentum signals (trend continuation)</li> <li>Hold positions longer (closer to full targets)</li> <li>Size up slightly on high-confidence long signals</li> <li>Avoid shorting unless extremely high confidence</li> </ul>"},{"location":"best-practices/#bear-market-best-practices","title":"Bear Market Best Practices","text":"<ul> <li>Focus on mean reversion and short signals</li> <li>Take profits faster (markets can reverse quickly)</li> <li>Reduce position sizes (higher overall volatility)</li> <li>Watch for false breakouts (more common in bear markets)</li> </ul>"},{"location":"best-practices/#sideways-market-best-practices","title":"Sideways Market Best Practices","text":"<ul> <li>Focus on range-bound strategies</li> <li>Quick profit-taking (trends don't last long)</li> <li>Higher selectivity (fewer quality setups)</li> <li>Consider ETF trading (less single-stock risk)</li> </ul>"},{"location":"best-practices/#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"best-practices/#sector-rotation-strategy","title":"Sector Rotation Strategy","text":"<p>Monitor sector strength weekly:</p> <pre><code># Weekly sector strength scan\nfor sector in QQQ XLF XLE XLV XLI XLP XLRE XLU XLB; do\n  python scripts/run_swing_agent.py --symbol $sector --interval 1h --lookback-days 30\ndone\n</code></pre> <p>Focus your individual stock picks from the strongest sectors.</p>"},{"location":"best-practices/#multi-timeframe-confluence","title":"Multi-Timeframe Confluence","text":"<p>For highest-probability signals, check multiple timeframes:</p> <pre><code># Same stock, different timeframes\npython scripts/run_swing_agent.py --symbol AAPL --interval 15m --lookback-days 10\npython scripts/run_swing_agent.py --symbol AAPL --interval 30m --lookback-days 20\npython scripts/run_swing_agent.py --symbol AAPL --interval 1h --lookback-days 40\n</code></pre> <p>Take positions only when 2+ timeframes agree.</p>"},{"location":"best-practices/#earnings-season-adjustments","title":"Earnings Season Adjustments","text":"<p>During earnings season (first 3 weeks of each quarter):</p> <ol> <li>Reduce position sizes by 25-50%</li> <li>Avoid holding through earnings unless specifically trading the event</li> <li>Focus on stocks that have already reported</li> <li>Increase stop-loss monitoring (gap risk is higher)</li> </ol>"},{"location":"best-practices/#common-mistakes-to-avoid","title":"Common Mistakes to Avoid","text":""},{"location":"best-practices/#overtrading","title":"Overtrading","text":"<p>Problem: Taking too many signals, especially marginal ones. Solution: Set daily/weekly trade limits. Quality over quantity.</p>"},{"location":"best-practices/#ignoring-volatility-regimes","title":"Ignoring Volatility Regimes","text":"<p>Problem: Using same position size regardless of market volatility. Solution: Always adjust size based on vol_regime (L/M/H).</p>"},{"location":"best-practices/#emotional-override","title":"Emotional Override","text":"<p>Problem: Overriding system signals based on \"gut feeling.\" Solution: Trust the system or don't trade. Consistency is key.</p>"},{"location":"best-practices/#poor-record-keeping","title":"Poor Record Keeping","text":"<p>Problem: Not tracking results systematically. Solution: Use a simple spreadsheet or the built-in evaluation tools.</p>"},{"location":"best-practices/#revenge-trading","title":"Revenge Trading","text":"<p>Problem: Increasing size after losses to \"get even.\" Solution: Stick to position sizing rules. One trade doesn't affect the next.</p>"},{"location":"best-practices/#performance-tracking","title":"Performance Tracking","text":""},{"location":"best-practices/#key-metrics-to-monitor","title":"Key Metrics to Monitor","text":"<ol> <li>Overall Win Rate: Should match system expectations</li> <li>Average R per Trade: Aim for &gt;0.3R over time</li> <li>Maximum Drawdown: Keep under 10-15%</li> <li>Trade Frequency: 3-8 trades per week typically optimal</li> <li>Sector Performance: Which sectors work best for you?</li> </ol>"},{"location":"best-practices/#monthly-review-questions","title":"Monthly Review Questions","text":"<ol> <li>Are you following entry and exit rules consistently?</li> <li>Is your actual win rate close to expected win rates?</li> <li>Are you sizing positions appropriately for volatility?</li> <li>Which signal types are working best for you?</li> <li>What can you improve next month?</li> </ol>"},{"location":"best-practices/#psychology-and-discipline","title":"Psychology and Discipline","text":""},{"location":"best-practices/#maintain-trading-discipline","title":"Maintain Trading Discipline","text":"<ul> <li>Pre-plan every trade: Entry, stop, target, size</li> <li>Accept losses as part of the business</li> <li>Don't let emotions drive decisions</li> <li>Take breaks after emotional trades</li> <li>Focus on process, not profits</li> </ul>"},{"location":"best-practices/#building-confidence","title":"Building Confidence","text":"<ul> <li>Start small: Use minimal position sizes while learning</li> <li>Paper trade first: Practice without money at risk</li> <li>Track your improvement: See your skills develop over time</li> <li>Focus on consistency: Consistent profits beat home runs</li> </ul>"},{"location":"best-practices/#handling-drawdowns","title":"Handling Drawdowns","text":"<p>Every trader experiences losing streaks:</p> <ol> <li>Expect them: 5-10 consecutive losses can happen</li> <li>Don't change the system: Maintain discipline</li> <li>Reduce size if needed: But don't stop trading completely</li> <li>Review but don't overthink: Learn but don't over-optimize</li> <li>Focus on process: Trust that edge will reassert itself</li> </ol> <p>Remember: SwingAgent provides the analysis, but your discipline and consistency in following best practices will determine your long-term success.</p>"},{"location":"configuration/","title":"Configuration Guide","text":"<p>This guide covers all configuration options for the SwingAgent v1.6.1 system.</p>"},{"location":"configuration/#database-configuration","title":"Database Configuration","text":""},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>SwingAgent v1.6.1 uses a centralized database architecture. Configuration is handled via environment variables.</p>"},{"location":"configuration/#option-1-direct-database-url","title":"Option 1: Direct Database URL","text":"<pre><code># SQLite (default)\nexport SWING_DATABASE_URL=\"sqlite:///data/swing_agent.sqlite\"\n\n# PostgreSQL\nexport SWING_DATABASE_URL=\"postgresql://user:pass@localhost:5432/swing_agent\"\n\n# MySQL\nexport SWING_DATABASE_URL=\"mysql://user:pass@localhost:3306/swing_agent\"\n</code></pre>"},{"location":"configuration/#option-2-individual-components","title":"Option 2: Individual Components","text":"<pre><code># Database type\nexport SWING_DB_TYPE=\"postgresql\"  # sqlite, postgresql, mysql, cnpg\n\n# Connection details\nexport SWING_DB_HOST=\"localhost\"\nexport SWING_DB_PORT=\"5432\"\nexport SWING_DB_NAME=\"swing_agent\"\nexport SWING_DB_USER=\"your_username\"\nexport SWING_DB_PASSWORD=\"your_password\"\n</code></pre>"},{"location":"configuration/#option-3-cloudnativepg-kubernetes","title":"Option 3: CloudNativePG (Kubernetes)","text":"<pre><code>export SWING_DB_TYPE=\"cnpg\"\nexport CNPG_CLUSTER_NAME=\"swing-postgres\"\nexport CNPG_NAMESPACE=\"default\"\nexport CNPG_SERVICE_TYPE=\"rw\"  # rw (read-write) or ro (read-only)\nexport SWING_DB_NAME=\"swing_agent\"\nexport SWING_DB_USER=\"swing_user\"\nexport SWING_DB_PASSWORD=\"your_password\"\n\n# Optional SSL configuration\nexport CNPG_SSL_MODE=\"require\"\nexport CNPG_SSL_CERT=\"/path/to/cert.pem\"\nexport CNPG_SSL_KEY=\"/path/to/key.pem\"\nexport CNPG_SSL_CA=\"/path/to/ca.pem\"\n</code></pre>"},{"location":"configuration/#database-migration","title":"Database Migration","text":""},{"location":"configuration/#from-legacy-separate-databases","title":"From Legacy Separate Databases","text":"<pre><code># Migrate from old separate SQLite files\npython -m swing_agent.migrate --data-dir data/\n\n# Migrate specific databases\npython -m swing_agent.migrate \\\n  --signals-db data/signals.sqlite \\\n  --vectors-db data/vec_store.sqlite\n</code></pre>"},{"location":"configuration/#from-sqlite-to-external-database","title":"From SQLite to External Database","text":"<pre><code># Set target database\nexport SWING_DATABASE_URL=\"postgresql://user:pass@localhost:5432/swing_agent\"\n\n# Migrate from centralized SQLite\npython -m swing_agent.migrate \\\n  --sqlite-to-external \"data/swing_agent.sqlite\"\n</code></pre>"},{"location":"configuration/#llm-configuration","title":"LLM Configuration","text":""},{"location":"configuration/#required-environment-variables","title":"Required Environment Variables","text":"<pre><code># OpenAI API Configuration (required for LLM features)\nexport OPENAI_API_KEY=\"sk-...\"                # Your OpenAI API key\nexport SWING_LLM_MODEL=\"gpt-4o-mini\"          # LLM model selection\n</code></pre>"},{"location":"configuration/#supported-llm-models","title":"Supported LLM Models","text":"<ul> <li><code>gpt-4o-mini</code> (recommended): Cost-effective, fast responses</li> <li><code>gpt-4o</code>: Higher quality, more expensive</li> <li><code>gpt-4</code>: Legacy model, good performance</li> <li><code>gpt-3.5-turbo</code>: Fastest, lowest cost</li> </ul>"},{"location":"configuration/#installation","title":"Installation","text":""},{"location":"configuration/#basic-installation","title":"Basic Installation","text":"<pre><code># Standard installation\npip install -e .\n\n# With PostgreSQL support\npip install -e \".[postgresql]\"\n\n# With MySQL support  \npip install -e \".[mysql]\"\n\n# With all external database support\npip install -e \".[external-db]\"\n</code></pre>"},{"location":"configuration/#agent-configuration","title":"Agent Configuration","text":""},{"location":"configuration/#swingagent-parameters","title":"SwingAgent Parameters","text":"<pre><code>from swing_agent.agent import SwingAgent\n\nagent = SwingAgent(\n    interval=\"30m\",              # Trading timeframe\n    lookback_days=30,            # Historical data period\n    use_llm=True,                # Enable LLM integration\n    llm_extras=True,             # Enable additional LLM features\n    sector_symbol=\"XLK\"          # Sector ETF for relative strength\n)\n</code></pre> <p>Parameter Details:</p>"},{"location":"configuration/#interval-str","title":"<code>interval</code> (str)","text":"<p>Trading timeframe for analysis. - Options: \"15m\", \"30m\", \"1h\", \"1d\" - Default: \"30m\" - Impact: Affects bar counts, holding time calculations, session buckets</p>"},{"location":"configuration/#lookback_days-int","title":"<code>lookback_days</code> (int)","text":"<p>Historical data period for analysis. - Range: 7-365 days - Default: 30 - Recommendations:   - 15m/30m: 30-60 days   - 1h: 60-90 days   - 1d: 180-365 days</p>"},{"location":"configuration/#use_llm-bool","title":"<code>use_llm</code> (bool)","text":"<p>Enable OpenAI LLM integration. - Default: True - Requirements: OPENAI_API_KEY environment variable - Impact: Provides trend confirmation and explanations</p>"},{"location":"configuration/#llm_extras-bool","title":"<code>llm_extras</code> (bool)","text":"<p>Enable additional LLM features. - Default: True - Impact: Generates action plans and scenario analysis - Cost: Increases API usage</p>"},{"location":"configuration/#sector_symbol-str","title":"<code>sector_symbol</code> (str)","text":"<p>Sector ETF for relative strength analysis. - Default: \"XLK\" (Technology) - Fallback: SPY if sector ETF fails - Popular Options:   - XLK: Technology   - XLF: Financials   - XLE: Energy   - XLV: Healthcare   - QQQ: Nasdaq 100</p>"},{"location":"configuration/#technical-indicator-configuration","title":"Technical Indicator Configuration","text":""},{"location":"configuration/#ema-settings","title":"EMA Settings","text":"<p>EMA calculations use hardcoded parameters that can be customized:</p> <pre><code># In strategy.py - trend labeling\nema_period = 20              # EMA period for trend\nslope_lookback = 6           # Bars for slope calculation\nslope_threshold_up = 0.01    # Minimum slope for up trend\nslope_threshold_strong = 0.02 # Minimum slope for strong trend\n</code></pre>"},{"location":"configuration/#rsi-settings","title":"RSI Settings","text":"<pre><code># In indicators.py\nrsi_period = 14              # RSI calculation period\nrsi_oversold = 35           # Oversold threshold for mean reversion\nrsi_overbought = 65         # Overbought threshold for mean reversion\nrsi_trend_up = 60           # Minimum RSI for up trend\nrsi_trend_down = 40         # Maximum RSI for down trend\n</code></pre>"},{"location":"configuration/#atr-settings","title":"ATR Settings","text":"<pre><code># In indicators.py and strategy.py\natr_period = 14             # ATR calculation period\natr_stop_multiplier = 1.2   # ATR multiplier for stops\natr_buffer = 0.2            # ATR buffer for Fibonacci stops\natr_target_multiplier = 2.0 # ATR multiplier for targets\n</code></pre>"},{"location":"configuration/#fibonacci-settings","title":"Fibonacci Settings","text":"<pre><code># In indicators.py\nfib_lookback = 40           # Bars to search for swing high/low\ngolden_pocket_low = 0.618   # Lower bound of golden pocket\ngolden_pocket_high = 0.65   # Upper bound of golden pocket\n\n# Available levels\nfib_levels = {\n    \"0.236\": 0.236,\n    \"0.382\": 0.382, \n    \"0.5\": 0.5,\n    \"0.618\": 0.618,\n    \"0.65\": 0.65,\n    \"0.786\": 0.786,\n    \"1.0\": 1.0,\n    \"1.272\": 1.272,         # Primary target\n    \"1.414\": 1.414,\n    \"1.618\": 1.618          # Extended target\n}\n</code></pre>"},{"location":"configuration/#vector-store-configuration","title":"Vector Store Configuration","text":""},{"location":"configuration/#feature-vector-components","title":"Feature Vector Components","text":"<pre><code># In features.py - build_setup_vector\nvector_components = [\n    \"trend_up\",              # Binary: 1 if UP/STRONG_UP\n    \"trend_down\",            # Binary: 1 if DOWN/STRONG_DOWN  \n    \"trend_sideways\",        # Binary: 1 if SIDEWAYS\n    \"rsi_normalized\",        # RSI / 100\n    \"price_vs_ema\",          # (price - ema) / price\n    \"fib_position\",          # Position within golden pocket\n    \"in_golden_pocket\",      # Binary: 1 if in golden pocket\n    \"r_multiple\",            # Expected risk-reward ratio\n    \"prev_range_pct\",        # Previous bar range / close\n    \"gap_pct\",               # Gap from previous close\n    \"atr_pct\",               # ATR / close\n    \"session_open\",          # Binary: 1 if open session\n    \"session_mid\",           # Binary: 1 if mid session\n    \"llm_confidence\"         # LLM confidence (0-1)\n]\n</code></pre>"},{"location":"configuration/#knn-search-parameters","title":"KNN Search Parameters","text":"<pre><code># In vectorstore.py\nknn_default_k = 50          # Number of neighbors to find\nsimilarity_threshold = 0.0   # Minimum cosine similarity (not enforced)\n</code></pre>"},{"location":"configuration/#volatility-regime-classification","title":"Volatility Regime Classification","text":"<pre><code># In features.py - vol_regime_from_series\nbollinger_period = 20       # Bollinger band period\nbollinger_std = 2.0         # Standard deviations\nvol_lookback = 60           # Bars for regime classification\nvol_low_percentile = 33     # Low volatility threshold\nvol_high_percentile = 66    # High volatility threshold\n</code></pre>"},{"location":"configuration/#multi-timeframe-configuration","title":"Multi-timeframe Configuration","text":""},{"location":"configuration/#timeframe-mappings","title":"Timeframe Mappings","text":"<pre><code># In data.py\nVALID_INTERVALS = {\n    \"15m\": \"15m\",           # Yahoo Finance format\n    \"30m\": \"30m\", \n    \"1h\": \"60m\",            # Note: 60m for Yahoo Finance\n    \"1d\": \"1d\"\n}\n</code></pre>"},{"location":"configuration/#session-time-buckets","title":"Session Time Buckets","text":"<pre><code># In features.py - time_of_day_bucket\n# Times in market timezone (US/Eastern)\nsession_open_end = \"11:30\"     # First 2 hours\nsession_close_start = \"14:30\"   # Last 2 hours\n# Mid session: 11:30 - 14:30\n</code></pre>"},{"location":"configuration/#bars-per-day-calculation","title":"Bars Per Day Calculation","text":"<pre><code># Used for holding time calculations\nbars_per_day = {\n    \"15m\": 26,              # 6.5 hours * 4 bars/hour\n    \"30m\": 13,              # 6.5 hours * 2 bars/hour\n    \"1h\": 7,                # ~6.5 hours (rounded)\n    \"1d\": 1\n}\n</code></pre>"},{"location":"configuration/#risk-management-configuration","title":"Risk Management Configuration","text":""},{"location":"configuration/#position-sizing-not-implemented","title":"Position Sizing (Not Implemented)","text":"<p>Currently, position sizing is not implemented. All analysis assumes: - Fixed R-multiple targets (typically 1-3R) - Percentage risk per trade (not specified) - No portfolio-level risk management</p>"},{"location":"configuration/#holding-time-limits","title":"Holding Time Limits","text":"<pre><code># In backtesting and evaluation\nmax_hold_days = 2.0         # Maximum trade duration\nmax_hold_bars = max_hold_days * bars_per_day[interval]\n</code></pre>"},{"location":"configuration/#stop-loss-methods","title":"Stop Loss Methods","text":"<ol> <li>Fibonacci-based: Below golden pocket + ATR buffer</li> <li>ATR-based: Entry \u00b1 ATR multiplier</li> <li>Technical: Below/above recent swing points</li> </ol>"},{"location":"configuration/#database-configuration_1","title":"Database Configuration","text":""},{"location":"configuration/#centralized-database-v161","title":"Centralized Database (v1.6.1+)","text":"<p>Starting with v1.6.1, SwingAgent uses a centralized SQLite database instead of separate files:</p> <ul> <li>Default: <code>data/swing_agent.sqlite</code> </li> <li>Contains: Both signals and vector store tables in one file</li> <li>Technology: SQLAlchemy ORM instead of raw sqlite3</li> <li>Benefits: </li> <li>Simplified data management</li> <li>Better query performance with proper indexes</li> <li>Easier backup and deployment</li> <li>Type-safe database operations</li> </ul> <pre><code># Modern usage - centralized database\nagent = SwingAgent(\n    log_db=\"data/swing_agent.sqlite\",    # Same file\n    vec_db=\"data/swing_agent.sqlite\",    # Same file\n)\n\n# Or simply use defaults (recommended)\nagent = SwingAgent()  # Uses data/swing_agent.sqlite automatically\n</code></pre>"},{"location":"configuration/#migration-from-legacy-setup","title":"Migration from Legacy Setup","text":"<p>If you have existing separate database files, use the migration utility:</p> <pre><code># Migrate from separate files to centralized database\npython -m swing_agent.migrate --data-dir data/\n\n# Or migrate specific files\npython -m swing_agent.migrate \\\n    --data-dir data/ \\\n    --signals-file old_signals.sqlite \\\n    --vectors-file old_vectors.sqlite\n</code></pre>"},{"location":"configuration/#signals-database-schema","title":"Signals Database Schema","text":"<p>The signals database automatically creates tables with the following key settings:</p> <pre><code>-- Primary table\nCREATE TABLE signals (\n    id TEXT PRIMARY KEY,           -- UUID for each signal\n    created_at_utc TEXT NOT NULL,  -- ISO timestamp\n    symbol TEXT NOT NULL,\n    timeframe TEXT NOT NULL,\n    -- ... full schema in storage.py\n);\n\n-- Indexes for performance\nCREATE INDEX idx_signals_symbol ON signals(symbol);\nCREATE INDEX idx_signals_asof ON signals(asof);\nCREATE INDEX idx_signals_evaluated ON signals(evaluated);\n</code></pre>"},{"location":"configuration/#vector-store-schema","title":"Vector Store Schema","text":"<pre><code>CREATE TABLE vec_store (\n    id TEXT PRIMARY KEY,           -- Signal ID reference\n    ts_utc TEXT NOT NULL,         -- ISO timestamp\n    symbol TEXT NOT NULL,\n    timeframe TEXT NOT NULL,\n    vec_json TEXT NOT NULL,       -- Feature vector as JSON array\n    realized_r REAL,              -- Actual R-multiple outcome\n    exit_reason TEXT,             -- TP/SL/TIME\n    payload_json TEXT             -- Additional context data\n);\n\nCREATE INDEX vec_store_symbol_idx ON vec_store(symbol);\n</code></pre>"},{"location":"configuration/#script-configuration","title":"Script Configuration","text":""},{"location":"configuration/#run_swing_agentpy","title":"run_swing_agent.py","text":"<pre><code>python scripts/run_swing_agent.py \\\n  --symbol AAPL \\                    # Required: symbol to analyze\n  --interval 30m \\                   # Trading timeframe\n  --lookback-days 30 \\               # Historical data days\n  --db data/signals.sqlite \\         # Signal storage (optional)\n  --vec-db data/vec_store.sqlite \\   # Vector store (optional)  \n  --sector XLK \\                     # Sector ETF\n  --no-llm \\                         # Disable LLM (optional)\n  --no-llm-extras                    # Disable LLM extras (optional)\n</code></pre>"},{"location":"configuration/#backtest_generate_signalspy","title":"backtest_generate_signals.py","text":"<pre><code>python scripts/backtest_generate_signals.py \\\n  --symbol AAPL \\                    # Required: symbol to backtest\n  --interval 30m \\                   # Trading timeframe\n  --lookback-days 180 \\              # Historical period\n  --warmup-bars 80 \\                 # Skip initial bars\n  --db data/signals.sqlite \\         # Signal storage\n  --vec-db data/vec_store.sqlite \\   # Vector store\n  --sector XLK \\                     # Sector ETF\n  --no-llm                           # Recommended for backtesting\n</code></pre>"},{"location":"configuration/#eval_signalspy","title":"eval_signals.py","text":"<pre><code>python scripts/eval_signals.py \\\n  --db data/signals.sqlite \\         # Signal database\n  --max-hold-days 2.0                # Maximum trade duration\n</code></pre>"},{"location":"configuration/#analyze_performancepy","title":"analyze_performance.py","text":"<pre><code>python scripts/analyze_performance.py \\\n  --db data/signals.sqlite           # Signal database\n</code></pre>"},{"location":"configuration/#performance-tuning","title":"Performance Tuning","text":""},{"location":"configuration/#data-fetching-optimization","title":"Data Fetching Optimization","text":"<pre><code># Reduce lookback for faster data fetching\nagent = SwingAgent(lookback_days=15)  # vs default 30\n\n# Cache data externally for multiple symbols\nfrom swing_agent.data import load_ohlcv\ndata_cache = {}\nfor symbol in symbols:\n    data_cache[symbol] = load_ohlcv(symbol, \"30m\", 30)\n</code></pre>"},{"location":"configuration/#vector-store-optimization","title":"Vector Store Optimization","text":"<pre><code># Limit KNN search for faster lookups\nneighbors = knn(vec_db, query_vec, k=25)  # vs default 50\n\n# Symbol-specific searches when possible\nneighbors = knn(vec_db, query_vec, k=50, symbol=\"AAPL\")\n</code></pre>"},{"location":"configuration/#llm-cost-control","title":"LLM Cost Control","text":"<pre><code># Disable LLM for backtesting\nagent = SwingAgent(use_llm=False)\n\n# Disable expensive LLM extras\nagent = SwingAgent(use_llm=True, llm_extras=False)\n\n# Use cheaper models\nexport SWING_LLM_MODEL=\"gpt-3.5-turbo\"\n</code></pre>"},{"location":"configuration/#security-configuration","title":"Security Configuration","text":""},{"location":"configuration/#api-key-management","title":"API Key Management","text":"<pre><code># Store in environment file\necho 'export OPENAI_API_KEY=\"sk-...\"' &gt;&gt; ~/.bashrc\n\n# Or use secret management\nexport OPENAI_API_KEY=$(cat /secrets/openai_key)\n\n# Rotate keys regularly\n# OpenAI Dashboard -&gt; API Keys -&gt; Rotate\n</code></pre>"},{"location":"configuration/#database-security","title":"Database Security","text":"<pre><code># Use parameterized queries (already implemented)\n# Store databases in secure location\nos.chmod(\"data/signals.sqlite\", 0o600)  # Owner read/write only\n</code></pre>"},{"location":"configuration/#input-validation","title":"Input Validation","text":"<pre><code># Validate symbols before processing\nimport re\nif not re.match(r'^[A-Z0-9.]{1,10}$', symbol):\n    raise ValueError(\"Invalid symbol format\")\n\n# Validate timeframes\nif interval not in [\"15m\", \"30m\", \"1h\", \"1d\"]:\n    raise ValueError(\"Unsupported timeframe\")\n</code></pre>"},{"location":"configuration/#custom-configuration-example","title":"Custom Configuration Example","text":"<pre><code># config.py - Custom configuration module\nimport os\nfrom swing_agent.agent import SwingAgent\n\nclass TradingConfig:\n    # Environment\n    OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n    LLM_MODEL = os.getenv(\"SWING_LLM_MODEL\", \"gpt-4o-mini\")\n\n    # Agent settings\n    DEFAULT_INTERVAL = \"30m\"\n    DEFAULT_LOOKBACK = 30\n    DEFAULT_SECTOR = \"XLK\"\n\n    # Database paths - Now centralized!\n    CENTRALIZED_DB = \"data/swing_agent.sqlite\"  # Single database for both signals and vectors\n\n    # Legacy paths (for migration only)\n    SIGNALS_DB = \"data/signals.sqlite\"  # Old signals database\n    VECTOR_DB = \"data/vec_store.sqlite\"  # Old vector database\n\n    # Risk management\n    MAX_HOLD_DAYS = 2.0\n\n    # Performance tuning\n    KNN_NEIGHBORS = 50\n    ENABLE_LLM_EXTRAS = True\n\ndef create_agent(symbol_type=\"tech\"):\n    \"\"\"Create pre-configured agent based on symbol type.\"\"\"\n    sector_map = {\n        \"tech\": \"XLK\",\n        \"finance\": \"XLF\", \n        \"energy\": \"XLE\",\n        \"health\": \"XLV\"\n    }\n\n    return SwingAgent(\n        interval=TradingConfig.DEFAULT_INTERVAL,\n        lookback_days=TradingConfig.DEFAULT_LOOKBACK,\n        log_db=TradingConfig.CENTRALIZED_DB,\n        vec_db=TradingConfig.CENTRALIZED_DB,\n        use_llm=bool(TradingConfig.OPENAI_API_KEY),\n        llm_extras=TradingConfig.ENABLE_LLM_EXTRAS,\n        sector_symbol=sector_map.get(symbol_type, TradingConfig.DEFAULT_SECTOR)\n    )\n\n# Usage\nagent = create_agent(\"tech\")\nsignal = agent.analyze(\"AAPL\")\n</code></pre>"},{"location":"configuration/#troubleshooting-configuration-issues","title":"Troubleshooting Configuration Issues","text":""},{"location":"configuration/#common-environment-issues","title":"Common Environment Issues","text":"<pre><code># Check environment variables\necho $OPENAI_API_KEY\necho $SWING_LLM_MODEL\n\n# Verify Python path\npython -c \"import swing_agent; print(swing_agent.__file__)\"\n\n# Test database creation\npython -c \"from swing_agent.storage import record_signal\"\n</code></pre>"},{"location":"configuration/#database-permission-issues","title":"Database Permission Issues","text":"<pre><code># Check file permissions\nls -la data/\nchmod 755 data/\nchmod 644 data/*.sqlite\n</code></pre>"},{"location":"configuration/#llm-configuration-issues","title":"LLM Configuration Issues","text":"<pre><code># Test LLM connectivity\nfrom swing_agent.llm_predictor import llm_extra_prediction\ntry:\n    result = llm_extra_prediction(symbol=\"AAPL\", price=150.0, trend_label=\"up\")\n    print(\"LLM working\")\nexcept Exception as e:\n    print(f\"LLM error: {e}\")\n</code></pre>"},{"location":"configuration/#data-fetching-issues","title":"Data Fetching Issues","text":"<pre><code># Test data fetching\nfrom swing_agent.data import load_ohlcv\ntry:\n    df = load_ohlcv(\"AAPL\", \"30m\", 5)\n    print(f\"Data shape: {df.shape}\")\nexcept Exception as e:\n    print(f\"Data error: {e}\")\n</code></pre>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>This guide covers production deployment strategies for the SwingAgent v1.6.1 system.</p>"},{"location":"deployment/#database-architecture-options","title":"Database Architecture Options","text":""},{"location":"deployment/#1-sqlite-deployment-developmentsmall-scale","title":"1. SQLite Deployment (Development/Small Scale)","text":"<p>Simple deployment for individual traders or small teams.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Server                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502  \u2502     SwingAgent v1.6.1       \u2502\u2502\n\u2502  \u2502                             \u2502\u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\n\u2502  \u2502  \u2502Scripts  \u2502 \u2502Centralized  \u2502\u2502\u2502\n\u2502  \u2502  \u2502         \u2502 \u2502Database     \u2502\u2502\u2502\n\u2502  \u2502  \u2502run_*    \u2502 \u2502             \u2502\u2502\u2502\n\u2502  \u2502  \u2502eval_*   \u2502 \u2502swing_agent  \u2502\u2502\u2502\n\u2502  \u2502  \u2502analyze_*\u2502 \u2502.sqlite      \u2502\u2502\u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2502                                 \u2502\n\u2502  External APIs:                 \u2502\n\u2502  - Yahoo Finance                \u2502\n\u2502  - OpenAI                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Configuration: <pre><code># Uses default SQLite database\nexport SWING_DATABASE_URL=\"sqlite:///data/swing_agent.sqlite\"\npython scripts/run_swing_agent.py --symbol AAPL\n</code></pre></p>"},{"location":"deployment/#2-postgresql-deployment-production","title":"2. PostgreSQL Deployment (Production)","text":"<p>Scalable deployment with external PostgreSQL database.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Load Balancer                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502             \u2502             \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Signal Service\u2502 \u2502Eval      \u2502 \u2502Analytics   \u2502\n\u2502              \u2502 \u2502Service   \u2502 \u2502Service     \u2502\n\u2502- Live signals\u2502 \u2502          \u2502 \u2502            \u2502\n\u2502- Backtesting \u2502 \u2502- Trade   \u2502 \u2502- Performance\u2502\n\u2502              \u2502 \u2502  eval    \u2502 \u2502- Reporting \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502              \u2502             \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502   PostgreSQL      \u2502\n            \u2502   Database        \u2502\n            \u2502                   \u2502\n            \u2502 - signals table   \u2502\n            \u2502 - vector_store    \u2502\n            \u2502   table           \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Configuration: <pre><code>export SWING_DATABASE_URL=\"postgresql://user:pass@db-host:5432/swing_agent\"\n# or\nexport SWING_DB_TYPE=\"postgresql\"\nexport SWING_DB_HOST=\"db-host\"\nexport SWING_DB_NAME=\"swing_agent\"\nexport SWING_DB_USER=\"swing_user\"\nexport SWING_DB_PASSWORD=\"secure_password\"\n\n# Install PostgreSQL dependencies\npip install -e \".[postgresql]\"\n</code></pre></p>"},{"location":"deployment/#3-kubernetes-with-cloudnativepg","title":"3. Kubernetes with CloudNativePG","text":"<p>Cloud-native deployment with CNPG operator for PostgreSQL.</p> <pre><code># cnpg-cluster.yaml\napiVersion: postgresql.cnpg.io/v1\nkind: Cluster\nmetadata:\n  name: swing-postgres\n  namespace: swing-agent\nspec:\n  instances: 3\n  primaryUpdateStrategy: unsupervised\n\n  postgresql:\n    parameters:\n      max_connections: \"200\"\n      shared_preload_libraries: \"pg_stat_statements\"\n\n  bootstrap:\n    initdb:\n      database: swing_agent\n      owner: swing_user\n      secret:\n        name: swing-postgres-credentials\n\n  storage:\n    size: 100Gi\n    storageClass: fast-ssd\n</code></pre> <p>Configuration: <pre><code>export SWING_DB_TYPE=\"cnpg\"\nexport CNPG_CLUSTER_NAME=\"swing-postgres\"\nexport CNPG_NAMESPACE=\"swing-agent\"\nexport SWING_DB_NAME=\"swing_agent\"\nexport SWING_DB_USER=\"swing_user\"\nexport SWING_DB_PASSWORD=\"secure_password\"\n</code></pre> \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502            Shared Data Layer             \u2502 \u2502                                          \u2502 \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502 \u2502  \u2502PostgreSQL   \u2502    \u2502Redis Cache      \u2502  \u2502 \u2502  \u2502- Signals    \u2502    \u2502- Market data    \u2502  \u2502 \u2502  \u2502- Vectors    \u2502    \u2502- Session data   \u2502  \u2502 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 <pre><code>### 3. Cloud-Native Deployment\n\nEnterprise deployment with auto-scaling and monitoring.\n</code></pre> \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 AWS/GCP/Azure \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                                                                \u2502 \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502  \u2502API Gateway      \u2502    \u2502Container        \u2502    \u2502Monitoring   \u2502 \u2502 \u2502  \u2502                 \u2502    \u2502Orchestration    \u2502    \u2502             \u2502 \u2502 \u2502  \u2502- Rate limiting  \u2502    \u2502                 \u2502    \u2502- Logs       \u2502 \u2502 \u2502  \u2502- Authentication \u2502    \u2502- Auto-scaling   \u2502    \u2502- Metrics    \u2502 \u2502 \u2502  \u2502- Load balancing \u2502    \u2502- Health checks  \u2502    \u2502- Alerts     \u2502 \u2502 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502                                                                \u2502 \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502 \u2502  \u2502                Container Cluster                        \u2502   \u2502 \u2502  \u2502                                                         \u2502   \u2502 \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502   \u2502 \u2502  \u2502  \u2502Signal Pods  \u2502  \u2502Eval Pods    \u2502  \u2502Analytics Pods   \u2502  \u2502   \u2502 \u2502  \u2502  \u2502             \u2502  \u2502             \u2502  \u2502                 \u2502  \u2502   \u2502 \u2502  \u2502  \u2502- SwingAgent \u2502  \u2502- Trade eval \u2502  \u2502- Performance    \u2502  \u2502   \u2502 \u2502  \u2502  \u2502- Market data\u2502  \u2502- Vector     \u2502  \u2502- Reporting      \u2502  \u2502   \u2502 \u2502  \u2502  \u2502- LLM calls  \u2502  \u2502  updates    \u2502  \u2502- API endpoints  \u2502  \u2502   \u2502 \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502   \u2502 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502 \u2502                                                                \u2502 \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502 \u2502  \u2502                Managed Services                         \u2502   \u2502 \u2502  \u2502                                                         \u2502   \u2502 \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502   \u2502 \u2502  \u2502  \u2502RDS/CloudSQL \u2502  \u2502ElastiCache/ \u2502  \u2502Secret Manager   \u2502  \u2502   \u2502 \u2502  \u2502  \u2502             \u2502  \u2502Memorystore  \u2502  \u2502                 \u2502  \u2502   \u2502 \u2502  \u2502  \u2502- PostgreSQL \u2502  \u2502- Redis      \u2502  \u2502- API keys       \u2502  \u2502   \u2502 \u2502  \u2502  \u2502- Backups    \u2502  \u2502- Sessions   \u2502  \u2502- DB credentials \u2502  \u2502   \u2502 \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502   \u2502 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 <pre><code>## Single Server Deployment\n\n### Prerequisites\n\n```bash\n# System requirements\n- Ubuntu 20.04+ / CentOS 8+ / RHEL 8+\n- Python 3.10+\n- 4GB RAM minimum, 8GB recommended\n- 50GB storage for databases\n- Internet connectivity for APIs\n</code></pre></p>"},{"location":"deployment/#installation-steps","title":"Installation Steps","text":""},{"location":"deployment/#1-system-setup","title":"1. System Setup","text":"<pre><code># Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Python and dependencies\nsudo apt install python3.10 python3.10-venv python3.10-dev \\\n                 git curl sqlite3 supervisor nginx -y\n\n# Create application user\nsudo useradd -m -s /bin/bash swingagent\nsudo usermod -aG sudo swingagent\n</code></pre>"},{"location":"deployment/#2-application-setup","title":"2. Application Setup","text":"<pre><code># Switch to application user\nsudo su - swingagent\n\n# Clone repository\ngit clone https://github.com/ITlusions/ITL.SwingAgent.git\ncd ITL.SwingAgent\n\n# Create virtual environment\npython3.10 -m venv venv\nsource venv/bin/activate\n\n# Install application\npip install --upgrade pip\npip install -e .\n</code></pre>"},{"location":"deployment/#3-configuration","title":"3. Configuration","text":"<pre><code># Create configuration directory\nmkdir -p /home/swingagent/config\nmkdir -p /home/swingagent/data\nmkdir -p /home/swingagent/logs\n\n# Environment configuration\ncat &gt; /home/swingagent/config/env &lt;&lt; 'EOF'\nexport OPENAI_API_KEY=\"sk-your-key-here\"\nexport SWING_LLM_MODEL=\"gpt-4o-mini\"\nexport SWING_SIGNALS_DB=\"/home/swingagent/data/signals.sqlite\"\nexport SWING_VECTOR_DB=\"/home/swingagent/data/vec_store.sqlite\"\nexport PYTHONPATH=\"/home/swingagent/ITL.SwingAgent/src\"\nEOF\n\n# Load environment\nsource /home/swingagent/config/env\necho 'source /home/swingagent/config/env' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"deployment/#4-database-initialization","title":"4. Database Initialization","text":"<pre><code># Test database creation\ncd /home/swingagent/ITL.SwingAgent\nsource venv/bin/activate\npython -c \"\nfrom swing_agent.storage import record_signal\nfrom swing_agent.vectorstore import add_vector\nimport numpy as np\n\n# Test signal database\ntry:\n    print('Signal database: OK')\nexcept Exception as e:\n    print(f'Signal database error: {e}')\n\n# Test vector database  \ntry:\n    add_vector(\n        '/home/swingagent/data/vec_store.sqlite',\n        vid='test', ts_utc='2024-01-01T00:00:00Z',\n        symbol='TEST', timeframe='30m',\n        vec=np.array([0.1, 0.2, 0.3]),\n        realized_r=None, exit_reason=None, payload=None\n    )\n    print('Vector database: OK')\nexcept Exception as e:\n    print(f'Vector database error: {e}')\n\"\n</code></pre>"},{"location":"deployment/#5-service-configuration","title":"5. Service Configuration","text":"<pre><code># Create supervisor configuration\nsudo tee /etc/supervisor/conf.d/swingagent.conf &lt;&lt; 'EOF'\n[group:swingagent]\nprograms=signal-generator,signal-evaluator\n\n[program:signal-generator]\ncommand=/home/swingagent/ITL.SwingAgent/venv/bin/python scripts/run_swing_agent.py --symbol %(ENV_SYMBOL)s --interval 30m --db /home/swingagent/data/signals.sqlite --vec-db /home/swingagent/data/vec_store.sqlite\ndirectory=/home/swingagent/ITL.SwingAgent\nuser=swingagent\nenvironment=OPENAI_API_KEY=\"%(ENV_OPENAI_API_KEY)s\",SWING_LLM_MODEL=\"gpt-4o-mini\",SYMBOL=\"AAPL\"\nautostart=false\nautorestart=true\nstderr_logfile=/home/swingagent/logs/signal-generator.err.log\nstdout_logfile=/home/swingagent/logs/signal-generator.out.log\nstartretries=3\n\n[program:signal-evaluator]\ncommand=/home/swingagent/ITL.SwingAgent/venv/bin/python scripts/eval_signals.py --db /home/swingagent/data/signals.sqlite --max-hold-days 2.0\ndirectory=/home/swingagent/ITL.SwingAgent\nuser=swingagent\nautostart=true\nautorestart=true\nstderr_logfile=/home/swingagent/logs/signal-evaluator.err.log\nstdout_logfile=/home/swingagent/logs/signal-evaluator.out.log\nstartretries=3\nstartsecs=30\nEOF\n\n# Reload supervisor\nsudo supervisorctl reread\nsudo supervisorctl update\n</code></pre>"},{"location":"deployment/#6-nginx-setup-optional","title":"6. Nginx Setup (Optional)","text":"<pre><code># Create nginx configuration for web interface\nsudo tee /etc/nginx/sites-available/swingagent &lt;&lt; 'EOF'\nserver {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        return 301 https://$server_name$request_uri;\n    }\n}\n\nserver {\n    listen 443 ssl;\n    server_name your-domain.com;\n\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    location /api/ {\n        proxy_pass http://127.0.0.1:8000/;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n\n    location / {\n        root /home/swingagent/web;\n        index index.html;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/swingagent /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n</code></pre>"},{"location":"deployment/#backup-strategy","title":"Backup Strategy","text":"<pre><code># Create backup script\ncat &gt; /home/swingagent/scripts/backup.sh &lt;&lt; 'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/home/swingagent/backups\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup databases\nsqlite3 /home/swingagent/data/signals.sqlite \".backup $BACKUP_DIR/signals_$DATE.sqlite\"\nsqlite3 /home/swingagent/data/vec_store.sqlite \".backup $BACKUP_DIR/vectors_$DATE.sqlite\"\n\n# Backup configuration\ntar -czf $BACKUP_DIR/config_$DATE.tar.gz /home/swingagent/config/\n\n# Cleanup old backups (keep 30 days)\nfind $BACKUP_DIR -type f -mtime +30 -delete\n\n# Upload to cloud storage (optional)\n# aws s3 sync $BACKUP_DIR s3://your-backup-bucket/swingagent/\nEOF\n\nchmod +x /home/swingagent/scripts/backup.sh\n\n# Schedule backups\ncrontab -e\n# Add: 0 2 * * * /home/swingagent/scripts/backup.sh\n</code></pre>"},{"location":"deployment/#containerized-deployment","title":"Containerized Deployment","text":""},{"location":"deployment/#docker-setup","title":"Docker Setup","text":""},{"location":"deployment/#1-dockerfile","title":"1. Dockerfile","text":"<pre><code># Dockerfile\nFROM python:3.10-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements and install Python dependencies\nCOPY pyproject.toml .\nCOPY src/ src/\nRUN pip install --no-cache-dir -e .\n\n# Create non-root user\nRUN useradd -m -u 1000 swingagent\nUSER swingagent\n\n# Create data directory\nRUN mkdir -p /app/data\n\n# Copy scripts\nCOPY scripts/ scripts/\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \\\n    CMD python -c \"import swing_agent; print('OK')\" || exit 1\n\n# Default command\nCMD [\"python\", \"scripts/run_swing_agent.py\", \"--help\"]\n</code></pre>"},{"location":"deployment/#2-docker-compose","title":"2. Docker Compose","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  signal-generator:\n    build: .\n    container_name: swingagent-signals\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - SWING_LLM_MODEL=gpt-4o-mini\n    volumes:\n      - ./data:/app/data\n      - ./logs:/app/logs\n    command: &gt;\n      sh -c \"while true; do\n        python scripts/run_swing_agent.py \n          --symbol AAPL \n          --interval 30m \n          --db /app/data/signals.sqlite \n          --vec-db /app/data/vec_store.sqlite;\n        sleep 1800;\n      done\"\n    restart: unless-stopped\n    depends_on:\n      - postgres\n\n  signal-evaluator:\n    build: .\n    container_name: swingagent-evaluator\n    volumes:\n      - ./data:/app/data\n      - ./logs:/app/logs\n    command: &gt;\n      sh -c \"while true; do\n        python scripts/eval_signals.py \n          --db /app/data/signals.sqlite \n          --max-hold-days 2.0;\n        sleep 300;\n      done\"\n    restart: unless-stopped\n    depends_on:\n      - postgres\n\n  postgres:\n    image: postgres:15\n    container_name: swingagent-postgres\n    environment:\n      - POSTGRES_DB=swingagent\n      - POSTGRES_USER=swingagent\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n    ports:\n      - \"5432:5432\"\n    restart: unless-stopped\n\n  redis:\n    image: redis:7-alpine\n    container_name: swingagent-redis\n    volumes:\n      - redis_data:/data\n    ports:\n      - \"6379:6379\"\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:alpine\n    container_name: swingagent-nginx\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - signal-generator\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  redis_data:\n</code></pre>"},{"location":"deployment/#3-environment-file","title":"3. Environment File","text":"<pre><code># .env\nOPENAI_API_KEY=sk-your-key-here\nDB_PASSWORD=your-secure-password\nCOMPOSE_PROJECT_NAME=swingagent\n</code></pre>"},{"location":"deployment/#4-deployment-commands","title":"4. Deployment Commands","text":"<pre><code># Build and start services\ndocker-compose up -d --build\n\n# View logs\ndocker-compose logs -f signal-generator\n\n# Scale services\ndocker-compose up -d --scale signal-generator=3\n\n# Update services\ndocker-compose pull\ndocker-compose up -d\n\n# Backup data\ndocker exec swingagent-postgres pg_dump -U swingagent swingagent &gt; backup.sql\ndocker cp swingagent-signals:/app/data ./data-backup/\n</code></pre>"},{"location":"deployment/#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"deployment/#1-namespace-and-configmap","title":"1. Namespace and ConfigMap","text":"<pre><code># k8s/namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: swingagent\n---\n# k8s/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: swingagent-config\n  namespace: swingagent\ndata:\n  SWING_LLM_MODEL: \"gpt-4o-mini\"\n  DB_HOST: \"postgres-service\"\n  REDIS_HOST: \"redis-service\"\n</code></pre>"},{"location":"deployment/#2-secrets","title":"2. Secrets","text":"<pre><code># k8s/secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: swingagent-secrets\n  namespace: swingagent\ntype: Opaque\ndata:\n  openai-api-key: &lt;base64-encoded-key&gt;\n  db-password: &lt;base64-encoded-password&gt;\n</code></pre>"},{"location":"deployment/#3-signal-generator-deployment","title":"3. Signal Generator Deployment","text":"<pre><code># k8s/signal-generator.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: signal-generator\n  namespace: swingagent\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: signal-generator\n  template:\n    metadata:\n      labels:\n        app: signal-generator\n    spec:\n      containers:\n      - name: signal-generator\n        image: swingagent:latest\n        command:\n        - python\n        - scripts/run_swing_agent.py\n        - --symbol\n        - AAPL\n        - --interval\n        - 30m\n        env:\n        - name: OPENAI_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: swingagent-secrets\n              key: openai-api-key\n        envFrom:\n        - configMapRef:\n            name: swingagent-config\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n        volumeMounts:\n        - name: data-volume\n          mountPath: /app/data\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: swingagent-data-pvc\n</code></pre>"},{"location":"deployment/#4-postgresql-deployment","title":"4. PostgreSQL Deployment","text":"<pre><code># k8s/postgres.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: postgres\n  namespace: swingagent\nspec:\n  serviceName: postgres-service\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:15\n        env:\n        - name: POSTGRES_DB\n          value: swingagent\n        - name: POSTGRES_USER\n          value: swingagent\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: swingagent-secrets\n              key: db-password\n        ports:\n        - containerPort: 5432\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n  volumeClaimTemplates:\n  - metadata:\n      name: postgres-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      resources:\n        requests:\n          storage: 50Gi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres-service\n  namespace: swingagent\nspec:\n  selector:\n    app: postgres\n  ports:\n  - port: 5432\n    targetPort: 5432\n</code></pre>"},{"location":"deployment/#5-horizontal-pod-autoscaler","title":"5. Horizontal Pod Autoscaler","text":"<pre><code># k8s/hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: signal-generator-hpa\n  namespace: swingagent\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: signal-generator\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n</code></pre>"},{"location":"deployment/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"deployment/#1-prometheus-monitoring","title":"1. Prometheus Monitoring","text":"<pre><code># k8s/monitoring.yaml\napiVersion: v1\nkind: ServiceMonitor\nmetadata:\n  name: swingagent-monitor\n  namespace: swingagent\nspec:\n  selector:\n    matchLabels:\n      app: signal-generator\n  endpoints:\n  - port: metrics\n    path: /metrics\n    interval: 30s\n</code></pre>"},{"location":"deployment/#2-grafana-dashboard","title":"2. Grafana Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"SwingAgent Monitoring\",\n    \"panels\": [\n      {\n        \"title\": \"Signals Generated\",\n        \"type\": \"stat\",\n        \"targets\": [\n          {\n            \"expr\": \"increase(swingagent_signals_total[1h])\",\n            \"legendFormat\": \"Signals/hour\"\n          }\n        ]\n      },\n      {\n        \"title\": \"LLM API Calls\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(swingagent_llm_calls_total[5m])\",\n            \"legendFormat\": \"Calls/sec\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Database Performance\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"swingagent_db_query_duration_seconds\",\n            \"legendFormat\": \"Query time\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"deployment/#3-application-logging","title":"3. Application Logging","text":"<pre><code># logging_config.py\nimport logging\nimport sys\nfrom pythonjsonlogger import jsonlogger\n\ndef setup_logging():\n    logger = logging.getLogger()\n    logger.setLevel(logging.INFO)\n\n    handler = logging.StreamHandler(sys.stdout)\n    formatter = jsonlogger.JsonFormatter(\n        '%(asctime)s %(name)s %(levelname)s %(message)s'\n    )\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n\n    return logger\n\n# In your application\nlogger = setup_logging()\nlogger.info(\"Signal generated\", extra={\n    \"symbol\": \"AAPL\",\n    \"signal_id\": \"abc123\",\n    \"confidence\": 0.75\n})\n</code></pre>"},{"location":"deployment/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/#1-api-key-management","title":"1. API Key Management","text":"<pre><code># Using AWS Secrets Manager\naws secretsmanager create-secret \\\n    --name swingagent/openai-key \\\n    --description \"OpenAI API key for SwingAgent\" \\\n    --secret-string \"sk-your-key-here\"\n\n# Using Kubernetes secrets\nkubectl create secret generic swingagent-secrets \\\n    --from-literal=openai-api-key=\"sk-your-key-here\" \\\n    --namespace=swingagent\n</code></pre>"},{"location":"deployment/#2-network-security","title":"2. Network Security","text":"<pre><code># k8s/network-policy.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: swingagent-network-policy\n  namespace: swingagent\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: swingagent\n  egress:\n  - to: []\n    ports:\n    - protocol: TCP\n      port: 443  # HTTPS for APIs\n    - protocol: TCP\n      port: 53   # DNS\n</code></pre>"},{"location":"deployment/#3-resource-limits","title":"3. Resource Limits","text":"<pre><code># k8s/resource-quotas.yaml\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: swingagent-quota\n  namespace: swingagent\nspec:\n  hard:\n    requests.cpu: \"4\"\n    requests.memory: 8Gi\n    limits.cpu: \"8\"\n    limits.memory: 16Gi\n    persistentvolumeclaims: \"10\"\n</code></pre>"},{"location":"deployment/#disaster-recovery","title":"Disaster Recovery","text":""},{"location":"deployment/#1-backup-strategy","title":"1. Backup Strategy","text":"<pre><code>#!/bin/bash\n# backup-script.sh\n\n# Database backup\nkubectl exec -n swingagent postgres-0 -- pg_dump -U swingagent swingagent &gt; \"backup-$(date +%Y%m%d).sql\"\n\n# Upload to cloud storage\naws s3 cp \"backup-$(date +%Y%m%d).sql\" s3://your-backup-bucket/\n\n# Cleanup local files older than 7 days\nfind . -name \"backup-*.sql\" -mtime +7 -delete\n</code></pre>"},{"location":"deployment/#2-restore-procedure","title":"2. Restore Procedure","text":"<pre><code>#!/bin/bash\n# restore-script.sh\n\nBACKUP_FILE=$1\n\n# Stop services\nkubectl scale deployment signal-generator --replicas=0 -n swingagent\n\n# Restore database\nkubectl exec -n swingagent postgres-0 -- psql -U swingagent -d swingagent &lt; $BACKUP_FILE\n\n# Restart services\nkubectl scale deployment signal-generator --replicas=2 -n swingagent\n</code></pre>"},{"location":"deployment/#performance-optimization","title":"Performance Optimization","text":""},{"location":"deployment/#1-database-optimization","title":"1. Database Optimization","text":"<pre><code>-- Database indexes for better performance\nCREATE INDEX CONCURRENTLY idx_signals_symbol_asof ON signals(symbol, asof);\nCREATE INDEX CONCURRENTLY idx_vectors_symbol_ts ON vec_store(symbol, ts_utc);\n\n-- Partitioning for large datasets\nCREATE TABLE signals_2024 PARTITION OF signals \nFOR VALUES FROM ('2024-01-01') TO ('2025-01-01');\n</code></pre>"},{"location":"deployment/#2-caching-strategy","title":"2. Caching Strategy","text":"<pre><code># redis_cache.py\nimport redis\nimport pickle\nfrom functools import wraps\n\nredis_client = redis.Redis(host='redis-service', port=6379, db=0)\n\ndef cache_result(expiration=3600):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = f\"{func.__name__}:{hash(str(args) + str(kwargs))}\"\n\n            # Try to get from cache\n            cached = redis_client.get(key)\n            if cached:\n                return pickle.loads(cached)\n\n            # Compute and cache result\n            result = func(*args, **kwargs)\n            redis_client.setex(key, expiration, pickle.dumps(result))\n            return result\n        return wrapper\n    return decorator\n\n# Usage\n@cache_result(expiration=1800)  # 30 minutes\ndef fetch_market_data(symbol, interval):\n    return load_ohlcv(symbol, interval, 30)\n</code></pre> <p>This deployment guide provides comprehensive strategies for deploying SwingAgent in various environments, from simple single-server setups to enterprise-grade cloud-native deployments.</p>"},{"location":"development/","title":"Development Guide","text":"<p>Complete guide for SwingAgent v1.6.1 development, architecture, and code quality standards.</p>"},{"location":"development/#architecture-overview","title":"Architecture Overview","text":"<p>SwingAgent v1.6.1 follows a modular, layered architecture with centralized database management:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            API Layer                \u2502  \n\u2502  (Scripts + Agent Interface)        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502          Business Logic             \u2502\n\u2502  (Strategy + Indicators + Features) \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502         Data &amp; ML Layer             \u2502\n\u2502  (Vector Store + LLM + Storage)     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      Database Layer (NEW)           \u2502\n\u2502  (SQLAlchemy ORM + Migration)       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        Infrastructure              \u2502\n\u2502  (Data Fetching + Configuration)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/#key-architecture-changes-in-v161","title":"Key Architecture Changes in v1.6.1","text":"<ol> <li>Centralized Database Layer: Single database for all storage needs</li> <li>SQLAlchemy ORM: Type-safe database operations with relationship support</li> <li>Multiple Database Backends: SQLite, PostgreSQL, MySQL, CloudNativePG</li> <li>Configuration Management: Centralized <code>TradingConfig</code> class</li> <li>Migration Framework: Automated migration from legacy databases</li> </ol>"},{"location":"development/#core-design-principles","title":"Core Design Principles","text":"<ol> <li>Separation of Concerns: Each module has a single, well-defined responsibility</li> <li>Configurable Parameters: All magic numbers centralized in <code>TradingConfig</code></li> <li>Comprehensive Error Handling: Custom exceptions with detailed error context</li> <li>Type Safety: Complete type annotations throughout the codebase</li> <li>Database Agnostic: Support for multiple backends via environment configuration</li> <li>Backward Compatibility: Migration tools for legacy database formats</li> <li>Documentation: Comprehensive docstrings with examples for all public APIs</li> </ol>"},{"location":"development/#key-components","title":"Key Components","text":""},{"location":"development/#1-swingagent-orchestrator","title":"1. <code>SwingAgent</code> (Orchestrator)","text":"<p>File: <code>src/swing_agent/agent.py</code></p> <p>Main orchestrator that coordinates the entire analysis pipeline through focused methods:</p> <ul> <li><code>_build_market_context()</code> - Market data collection and enrichment</li> <li><code>_perform_technical_analysis()</code> - Core technical analysis</li> <li><code>_get_multitimeframe_analysis()</code> - MTF trend alignment</li> <li><code>_calculate_confidence()</code> - Base confidence scoring</li> <li><code>_get_ml_expectations()</code> - Vector similarity analysis</li> <li><code>_get_llm_insights()</code> - LLM analysis and action plans</li> <li><code>_assemble_signal()</code> - Final signal creation</li> </ul> <p>Benefits of Refactored Design: - Each method has single responsibility (~20-40 lines vs 160+ original) - Easy to test individual components - Clear error handling and debugging - Better code reusability</p>"},{"location":"development/#2-tradingconfig-configuration-management","title":"2. <code>TradingConfig</code> (Configuration Management)","text":"<p>File: <code>src/swing_agent/config.py</code></p> <p>Centralized configuration eliminates magic numbers and provides easy parameter tuning:</p> <pre><code>from swing_agent.config import get_config, update_config\n\n# Access configuration\nconfig = get_config()\nprint(f\"EMA threshold: {config.EMA_SLOPE_THRESHOLD_UP}\")\n\n# Update parameters\nupdate_config(RSI_PERIOD=21, ATR_STOP_MULTIPLIER=1.5)\n</code></pre> <p>Configuration Groups: - Trend Detection: EMA/RSI thresholds - Risk Management: ATR multipliers - Fibonacci Analysis: Lookback periods - Volatility Analysis: Percentile thresholds - Confidence Scoring: Base levels and bonuses</p>"},{"location":"development/#3-strategy-functions-enhanced","title":"3. Strategy Functions (Enhanced)","text":"<p>File: <code>src/swing_agent/strategy.py</code></p> <ul> <li><code>label_trend()</code> - Uses configurable thresholds for trend classification</li> <li><code>build_entry()</code> - Three main strategies with comprehensive documentation:</li> <li>Fibonacci golden pocket pullbacks</li> <li>Momentum continuation breakouts</li> <li>Mean reversion from extremes</li> </ul>"},{"location":"development/#4-database-layer-new-in-v161","title":"4. Database Layer (NEW in v1.6.1)","text":"<p>Files: <code>src/swing_agent/database.py</code>, <code>src/swing_agent/models_db.py</code>, <code>src/swing_agent/migrate.py</code></p> <p>Centralized database management using SQLAlchemy ORM:</p> <pre><code>from swing_agent.database import get_session, init_database\nfrom swing_agent.models_db import Signal, VectorStore\n\n# Initialize database (creates tables if missing)\ninit_database()\n\n# Use database session\nwith get_session() as session:\n    signals = session.query(Signal).filter(\n        Signal.symbol == \"AAPL\"\n    ).order_by(Signal.created_at_utc.desc()).limit(10).all()\n</code></pre> <p>Database Features: - Multiple Backends: SQLite (dev), PostgreSQL/MySQL (prod), CNPG (K8s) - Connection Management: SQLAlchemy engine with connection pooling - Type Safety: Pydantic models with SQLAlchemy ORM - Migration Support: Automated migration from legacy databases</p> <p>Configuration Examples: <pre><code># SQLite (default)\nexport SWING_DATABASE_URL=\"sqlite:///data/swing_agent.sqlite\"\n\n# PostgreSQL  \nexport SWING_DATABASE_URL=\"postgresql://user:pass@host:5432/swing_agent\"\n\n# CloudNativePG\nexport SWING_DB_TYPE=\"cnpg\"\nexport CNPG_CLUSTER_NAME=\"swing-postgres\"\n</code></pre></p>"},{"location":"development/#5-enhanced-error-handling","title":"5. Enhanced Error Handling","text":"<p>File: <code>src/swing_agent/data.py</code></p> <p>Custom <code>SwingAgentDataError</code> provides context-specific error handling:</p> <pre><code>try:\n    df = load_ohlcv(\"INVALID_SYMBOL\")\nexcept SwingAgentDataError as e:\n    if \"not found\" in str(e):\n        # Handle invalid symbol\n    elif \"rate limit\" in str(e):\n        # Handle API rate limiting\n</code></pre>"},{"location":"development/#development-setup","title":"Development Setup","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>Git</li> <li>Virtual environment tool (venv, conda, etc.)</li> </ul>"},{"location":"development/#local-development-environment","title":"Local Development Environment","text":"<pre><code># Clone and setup\ngit clone https://github.com/ITlusions/ITL.SwingAgent.git\ncd ITL.SwingAgent\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install in development mode\npip install -e .\n\n# Install development dependencies\npip install pytest black ruff mypy pre-commit\n\n# Set up pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"development/#environment-configuration","title":"Environment Configuration","text":"<p>Create <code>.env</code> file for local development:</p> <pre><code># .env\nOPENAI_API_KEY=sk-your-key-here\nSWING_LLM_MODEL=gpt-4o-mini\nSWING_DATABASE_URL=sqlite:///data/swing_agent_dev.sqlite\nSWING_LOG_LEVEL=DEBUG\n</code></pre>"},{"location":"development/#code-quality-standards","title":"Code Quality Standards","text":""},{"location":"development/#code-style","title":"Code Style","text":"<p>We use Ruff for fast linting and Black for code formatting:</p> <pre><code># Check code quality\nruff check src/ scripts/\nruff check --fix src/ scripts/  # Auto-fix issues\n\n# Format code\nblack src/ scripts/\n\n# Type checking\nmypy src/\n</code></pre>"},{"location":"development/#ruff-configuration","title":"Ruff Configuration","text":"<p>Located in <code>pyproject.toml</code>:</p> <pre><code>[tool.ruff]\nline-length = 100\ntarget-version = \"py310\"\nselect = [\n    \"E\",  # pycodestyle errors\n    \"W\",  # pycodestyle warnings  \n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"B\",  # flake8-bugbear\n    \"N\",  # flake8-naming\n    \"UP\", # pyupgrade\n    \"C4\", # flake8-comprehensions\n    \"PIE\", # flake8-pie\n]\n\nignore = [\n    \"E501\",  # Line too long (handled by black)\n    \"B008\",  # Do not perform function calls in argument defaults\n]\n\n[tool.ruff.per-file-ignores]\n\"__init__.py\" = [\"F401\"]\n\"scripts/*.py\" = [\"T201\"]  # Allow print statements in scripts\n</code></pre>"},{"location":"development/#type-checking","title":"Type Checking","text":"<p>All new code should include type hints:</p> <pre><code># Good\ndef fibonacci_range(df: pd.DataFrame, lookback: int = 40) -&gt; FibRange:\n    \"\"\"Calculate Fibonacci retracement levels.\"\"\"\n    # Implementation\n\n# Avoid\ndef fibonacci_range(df, lookback=40):\n    # Missing type information\n</code></pre>"},{"location":"development/#testing-strategy","title":"Testing Strategy","text":""},{"location":"development/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 test_indicators.py\n\u2502   \u251c\u2500\u2500 test_strategy.py\n\u2502   \u251c\u2500\u2500 test_features.py\n\u2502   \u2514\u2500\u2500 test_models.py\n\u251c\u2500\u2500 integration/\n\u2502   \u251c\u2500\u2500 test_agent.py\n\u2502   \u251c\u2500\u2500 test_vectorstore.py\n\u2502   \u2514\u2500\u2500 test_storage.py\n\u251c\u2500\u2500 fixtures/\n\u2502   \u251c\u2500\u2500 sample_data.py\n\u2502   \u2514\u2500\u2500 mock_responses.py\n\u2514\u2500\u2500 conftest.py\n</code></pre>"},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=swing_agent --cov-report=html\n\n# Run specific test categories\npytest tests/unit/\npytest tests/integration/\n\n# Run tests matching pattern\npytest -k \"test_fibonacci\"\n\n# Verbose output\npytest -v\n</code></pre>"},{"location":"development/#test-examples","title":"Test Examples","text":""},{"location":"development/#unit-test-example","title":"Unit Test Example","text":"<pre><code># tests/unit/test_indicators.py\nimport pytest\nimport pandas as pd\nimport numpy as np\nfrom swing_agent.indicators import ema, rsi, atr, fibonacci_range\n\nclass TestIndicators:\n    @pytest.fixture\n    def sample_ohlcv(self):\n        \"\"\"Generate realistic OHLCV test data.\"\"\"\n        dates = pd.date_range('2024-01-01', periods=100, freq='1h')\n        np.random.seed(42)  # Reproducible tests\n\n        # Generate trending price series\n        trend = np.linspace(100, 110, 100)\n        noise = np.random.randn(100) * 0.5\n        prices = trend + noise\n\n        return pd.DataFrame({\n            'open': prices * (1 + np.random.randn(100) * 0.001),\n            'high': prices * (1 + np.abs(np.random.randn(100)) * 0.002),\n            'low': prices * (1 - np.abs(np.random.randn(100)) * 0.002), \n            'close': prices,\n            'volume': np.random.randint(1000000, 10000000, 100)\n        }, index=dates)\n\n    def test_ema_calculation(self, sample_ohlcv):\n        \"\"\"Test EMA calculation correctness and properties.\"\"\"\n        ema_20 = ema(sample_ohlcv['close'], 20)\n\n        # Basic validation\n        assert len(ema_20) == len(sample_ohlcv)\n        assert not ema_20.isna().all()\n        assert ema_20.iloc[-1] &gt; 0\n\n        # EMA should be smooth (less volatile than price)\n        price_volatility = sample_ohlcv['close'].pct_change().std()\n        ema_volatility = ema_20.pct_change().std()\n        assert ema_volatility &lt; price_volatility\n\n        # EMA should lag price but follow trend\n        final_price = sample_ohlcv['close'].iloc[-1]\n        final_ema = ema_20.iloc[-1]\n        assert abs(final_price - final_ema) &lt; final_price * 0.1  # Within 10%\n\n    def test_rsi_bounds(self, sample_ohlcv):\n        \"\"\"Test RSI stays within valid bounds.\"\"\"\n        rsi_14 = rsi(sample_ohlcv['close'], 14)\n        rsi_values = rsi_14.dropna()\n\n        assert all(0 &lt;= val &lt;= 100 for val in rsi_values)\n        assert len(rsi_values) &gt; 0\n\n    def test_fibonacci_levels_ordering(self, sample_ohlcv):\n        \"\"\"Test Fibonacci levels are properly ordered.\"\"\"\n        fib = fibonacci_range(sample_ohlcv, lookback=40)\n\n        # Levels should be ordered\n        assert fib.levels[\"0.236\"] &lt; fib.levels[\"0.618\"]\n        assert fib.levels[\"0.618\"] &lt; fib.levels[\"1.0\"]\n        assert fib.levels[\"1.0\"] &lt; fib.levels[\"1.272\"]\n\n        # Golden pocket should be within range\n        assert fib.golden_low &lt;= fib.golden_high\n        assert fib.start &lt;= fib.golden_low &lt;= fib.end\n        assert fib.start &lt;= fib.golden_high &lt;= fib.end\n</code></pre>"},{"location":"development/#integration-test-example","title":"Integration Test Example","text":"<pre><code># tests/integration/test_agent.py\nimport pytest\nfrom unittest.mock import patch, MagicMock\nfrom swing_agent.agent import SwingAgent\nfrom swing_agent.models import TrendLabel\n\nclass TestSwingAgentIntegration:\n    @pytest.fixture\n    def mock_agent(self):\n        \"\"\"Create agent with mocked external dependencies.\"\"\"\n        return SwingAgent(\n            interval=\"30m\",\n            lookback_days=30,\n            use_llm=False,  # Avoid API calls in tests\n            log_db=\":memory:\",  # In-memory SQLite\n            vec_db=\":memory:\"\n        )\n\n    @patch('swing_agent.data.load_ohlcv')\n    def test_signal_generation_pipeline(self, mock_load_ohlcv, mock_agent, sample_ohlcv):\n        \"\"\"Test complete signal generation without external dependencies.\"\"\"\n        mock_load_ohlcv.return_value = sample_ohlcv\n\n        signal = mock_agent.analyze(\"AAPL\")\n\n        # Validate signal structure\n        assert signal.symbol == \"AAPL\"\n        assert signal.timeframe == \"30m\"\n        assert signal.trend.label in list(TrendLabel)\n        assert 0 &lt;= signal.confidence &lt;= 1\n        assert signal.asof is not None\n\n        # If entry plan exists, validate risk/reward\n        if signal.entry:\n            assert signal.entry.r_multiple &gt; 0\n            assert signal.entry.stop_price != signal.entry.entry_price\n            assert signal.entry.take_profit != signal.entry.entry_price\n\n            # Validate long/short trade logic\n            if signal.entry.side.value == \"long\":\n                assert signal.entry.stop_price &lt; signal.entry.entry_price\n                assert signal.entry.take_profit &gt; signal.entry.entry_price\n            elif signal.entry.side.value == \"short\":\n                assert signal.entry.stop_price &gt; signal.entry.entry_price\n                assert signal.entry.take_profit &lt; signal.entry.entry_price\n</code></pre>"},{"location":"development/#property-based-testing","title":"Property-Based Testing","text":"<p>For mathematical functions, use hypothesis for property-based testing:</p> <pre><code># tests/unit/test_properties.py\nfrom hypothesis import given, strategies as st\nimport hypothesis.extra.pandas as pdst\nfrom swing_agent.indicators import ema, rsi\n\nclass TestIndicatorProperties:\n    @given(\n        prices=pdst.series(\n            elements=st.floats(min_value=1.0, max_value=1000.0),\n            min_size=50,\n            max_size=200\n        ),\n        span=st.integers(min_value=2, max_value=50)\n    )\n    def test_ema_properties(self, prices, span):\n        \"\"\"Test EMA properties hold for any valid input.\"\"\"\n        ema_result = ema(prices, span)\n\n        # EMA should have same length as input\n        assert len(ema_result) == len(prices)\n\n        # EMA should not be more volatile than input\n        input_std = prices.pct_change().std()\n        ema_std = ema_result.pct_change().std()\n\n        # Allow for numerical precision issues\n        assert ema_std &lt;= input_std * 1.1\n</code></pre>"},{"location":"development/#extending-the-system","title":"Extending the System","text":""},{"location":"development/#adding-new-indicators","title":"Adding New Indicators","text":"<ol> <li>Add calculation function to <code>indicators.py</code>:</li> </ol> <pre><code>def your_indicator(series: pd.Series, period: int = 20) -&gt; pd.Series:\n    \"\"\"Calculate your custom indicator.\n\n    Args:\n        series: Price series.\n        period: Calculation period.\n\n    Returns:\n        pd.Series: Indicator values.\n\n    Examples:\n        &gt;&gt;&gt; indicator_values = your_indicator(df['close'], 20)\n        &gt;&gt;&gt; current_value = indicator_values.iloc[-1]\n    \"\"\"\n    # Implementation here\n    return result\n</code></pre> <ol> <li>Add to strategy logic in <code>strategy.py</code>:</li> </ol> <pre><code>def label_trend(df: pd.DataFrame) -&gt; TrendState:\n    # Existing code...\n    your_value = your_indicator(df['close'], 20).iloc[-1]\n\n    # Use in trend logic...\n    # Update trend classification if needed\n</code></pre> <ol> <li>Update feature vector in <code>features.py</code> (if needed for ML):</li> </ol> <pre><code>def build_setup_vector(...):\n    # Add new feature\n    your_feature = your_value / 100.0  # Normalize appropriately\n\n    vec = np.array([\n        # ... existing features ...\n        your_feature,  # Add your feature\n        1.0  # Keep constant term last\n    ], dtype=float)\n</code></pre> <ol> <li>Update configuration (if parameters needed):</li> </ol> <pre><code># In config.py TradingConfig class\nYOUR_INDICATOR_PERIOD: int = 20\nYOUR_INDICATOR_THRESHOLD: float = 0.5\n</code></pre>"},{"location":"development/#adding-new-entry-strategies","title":"Adding New Entry Strategies","text":"<ol> <li>Add strategy to <code>build_entry()</code> in <code>strategy.py</code>:</li> </ol> <pre><code>def build_entry(df: pd.DataFrame, trend: TrendState) -&gt; Optional[EntryPlan]:\n    # ... existing strategies ...\n\n    # Your new strategy\n    if your_strategy_condition(df, trend):\n        entry = calculate_entry_price(df)\n        sl = calculate_stop_loss(df, entry)\n        tp = calculate_take_profit(df, entry)\n        return _plan(SignalSide.LONG, entry, sl, tp, \"Your strategy description\")\n\n    return None\n</code></pre> <ol> <li>Add supporting functions:</li> </ol> <pre><code>def your_strategy_condition(df: pd.DataFrame, trend: TrendState) -&gt; bool:\n    \"\"\"Check if your strategy conditions are met.\"\"\"\n    cfg = get_config()\n    # Use configuration parameters\n    # Return True if setup is valid\n\ndef calculate_entry_price(df: pd.DataFrame) -&gt; float:\n    \"\"\"Calculate optimal entry price for your strategy.\"\"\"\n    # Implementation\n</code></pre>"},{"location":"development/#customizing-configuration","title":"Customizing Configuration","text":"<ol> <li>Update <code>config.py</code> with new parameters:</li> </ol> <pre><code>@dataclass\nclass TradingConfig:\n    # ... existing parameters ...\n\n    # Your new parameters\n    YOUR_STRATEGY_THRESHOLD: float = 0.75\n    YOUR_STRATEGY_LOOKBACK: int = 14\n    YOUR_STRATEGY_MULTIPLIER: float = 1.5\n</code></pre> <ol> <li>Use in your code:</li> </ol> <pre><code>from swing_agent.config import get_config\n\ndef your_function():\n    cfg = get_config()\n    if some_value &gt; cfg.YOUR_STRATEGY_THRESHOLD:\n        # Use configured threshold\n</code></pre> <ol> <li>Update at runtime:</li> </ol> <pre><code>from swing_agent.config import update_config\n\n# Tune parameters for different market conditions\nupdate_config(\n    YOUR_STRATEGY_THRESHOLD=0.8,  # More conservative\n    ATR_STOP_MULTIPLIER=1.0       # Tighter stops\n)\n</code></pre>"},{"location":"development/#error-handling-best-practices","title":"Error Handling Best Practices","text":"<ol> <li>Use appropriate exception types:</li> </ol> <pre><code>from swing_agent.data import SwingAgentDataError\n\ndef your_data_function(symbol: str):\n    try:\n        # Data processing\n        result = process_data(symbol)\n    except Exception as e:\n        raise SwingAgentDataError(\n            f\"Failed to process {symbol}: {e}\",\n            symbol=symbol\n        ) from e\n</code></pre> <ol> <li>Graceful degradation:</li> </ol> <pre><code>def your_optional_feature():\n    try:\n        # Try enhanced feature\n        return enhanced_calculation()\n    except Exception:\n        # Fallback to basic version\n        return basic_calculation()\n</code></pre> <ol> <li>Detailed error context:</li> </ol> <pre><code>def validate_data(df: pd.DataFrame, symbol: str):\n    if df.empty:\n        raise SwingAgentDataError(\n            f\"No data available for {symbol}. Check if symbol is valid \"\n            f\"and markets are open.\",\n            symbol=symbol\n        )\n\n    if len(df) &lt; 20:\n        raise SwingAgentDataError(\n            f\"Insufficient data for {symbol}: only {len(df)} bars. \"\n            f\"Need at least 20 bars for analysis.\",\n            symbol=symbol\n        )\n</code></pre>"},{"location":"development/#database-development","title":"Database Development","text":""},{"location":"development/#database-migrations","title":"Database Migrations","text":"<p>When modifying database schema:</p> <pre><code># Add to migration script\ndef upgrade_schema_to_v1_6_2():\n    \"\"\"Upgrade database schema to version 1.6.2.\"\"\"\n    with get_session() as session:\n        # Add new columns with appropriate defaults\n        session.execute(\"\"\"\n            ALTER TABLE signals \n            ADD COLUMN new_field TEXT DEFAULT '';\n        \"\"\")\n\n        # Update schema version\n        session.execute(\"\"\"\n            INSERT OR REPLACE INTO migrations (version, applied_at, description)\n            VALUES ('1.6.2', datetime('now'), 'Added new_field to signals table');\n        \"\"\")\n        session.commit()\n</code></pre>"},{"location":"development/#database-testing","title":"Database Testing","text":"<p>Use in-memory SQLite for fast database tests:</p> <pre><code>@pytest.fixture\ndef temp_database():\n    \"\"\"Create temporary database for testing.\"\"\"\n    from swing_agent.database import init_database\n    db_url = \"sqlite:///:memory:\"\n    init_database(db_url)\n    return db_url\n</code></pre>"},{"location":"development/#performance-testing","title":"Performance Testing","text":""},{"location":"development/#benchmarking","title":"Benchmarking","text":"<pre><code># tests/performance/test_benchmarks.py\nimport time\nimport pytest\nfrom swing_agent.vectorstore import knn\n\nclass TestPerformance:\n    def test_vector_search_performance(self, sample_vectors):\n        \"\"\"Ensure vector search completes within acceptable time.\"\"\"\n        start_time = time.time()\n\n        results = knn(\":memory:\", sample_vectors[0], k=10)\n\n        elapsed = time.time() - start_time\n        assert elapsed &lt; 1.0  # Should complete within 1 second\n        assert len(results) &lt;= 10\n\n    @pytest.mark.slow\n    def test_large_dataset_performance(self):\n        \"\"\"Test performance with larger datasets.\"\"\"\n        # Generate large test dataset\n        # Run performance benchmarks\n        pass\n</code></pre>"},{"location":"development/#documentation-standards","title":"Documentation Standards","text":""},{"location":"development/#docstring-format","title":"Docstring Format","text":"<p>Use Google-style docstrings:</p> <pre><code>def build_entry(df: pd.DataFrame, trend: TrendState) -&gt; Optional[EntryPlan]:\n    \"\"\"Generate entry plan based on trend analysis and Fibonacci levels.\n\n    This function implements three primary entry strategies:\n    1. Fibonacci golden pocket pullbacks (highest probability)\n    2. Momentum continuation breakouts\n    3. Mean reversion from extreme RSI levels\n\n    Args:\n        df: OHLCV price data with at least 40 bars for Fibonacci calculation\n        trend: Current trend state from label_trend()\n\n    Returns:\n        EntryPlan with entry, stop, target prices and risk metrics, or None if no setup\n\n    Raises:\n        ValueError: If df has insufficient data for analysis\n\n    Examples:\n        &gt;&gt;&gt; df = load_ohlcv(\"AAPL\", \"30m\", 30)\n        &gt;&gt;&gt; trend = label_trend(df)\n        &gt;&gt;&gt; entry = build_entry(df, trend)\n        &gt;&gt;&gt; if entry:\n        ...     print(f\"Entry: {entry.side} at {entry.entry_price}\")\n\n    Note:\n        - All price levels are absolute values, not relative to current price\n        - R-multiple calculation assumes proper position sizing\n\n    See Also:\n        label_trend(): Trend classification function\n        fibonacci_range(): Fibonacci level calculation\n    \"\"\"\n</code></pre>"},{"location":"development/#api-documentation","title":"API Documentation","text":"<p>Generate API docs with Sphinx:</p> <pre><code># Install sphinx and extensions\npip install sphinx sphinx-autodoc-typehints\n\n# Generate documentation\nsphinx-quickstart docs/\nsphinx-apidoc -o docs/source/ src/swing_agent/\ncd docs &amp;&amp; make html\n</code></pre>"},{"location":"development/#debugging","title":"Debugging","text":""},{"location":"development/#logging-configuration","title":"Logging Configuration","text":"<pre><code># For development debugging\nimport logging\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\n# Component-specific debugging\nlogger = logging.getLogger(\"swing_agent.strategy\")\nlogger.setLevel(logging.DEBUG)\n</code></pre>"},{"location":"development/#debug-utilities","title":"Debug Utilities","text":"<pre><code># Debug signal generation\ndef debug_signal(symbol: str):\n    \"\"\"Generate signal with debug information.\"\"\"\n    agent = SwingAgent(use_llm=False)  # Avoid API costs\n\n    # Load data\n    df = load_ohlcv(symbol, \"30m\", 30)\n    print(f\"Data shape: {df.shape}\")\n    print(f\"Price range: {df['close'].min():.2f} - {df['close'].max():.2f}\")\n\n    # Analyze trend\n    trend = label_trend(df)\n    print(f\"Trend: {trend.label.value}, RSI: {trend.rsi_14:.1f}\")\n\n    # Generate signal\n    signal = agent.analyze_df(symbol, df)\n    print(f\"Signal: {signal.model_dump_json(indent=2)}\")\n\n    return signal\n</code></pre>"},{"location":"development/#release-process","title":"Release Process","text":""},{"location":"development/#version-management","title":"Version Management","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update <code>__version__</code> in <code>src/swing_agent/__init__.py</code></li> <li>Create release notes in <code>CHANGELOG.md</code></li> <li>Tag release: <code>git tag v1.6.2</code></li> </ol>"},{"location":"development/#pre-release-checklist","title":"Pre-release Checklist","text":"<ul> <li>[ ] All tests pass: <code>pytest</code></li> <li>[ ] Code quality checks: <code>ruff check &amp;&amp; black --check .</code></li> <li>[ ] Type checking: <code>mypy src/</code></li> <li>[ ] Documentation builds: <code>sphinx-build docs/ docs/_build/</code></li> <li>[ ] Manual testing of core scenarios</li> <li>[ ] Security review of changes</li> <li>[ ] Performance impact assessment</li> </ul>"},{"location":"development/#continuous-integration","title":"Continuous Integration","text":"<p>Recommended GitHub Actions workflow:</p> <pre><code># .github/workflows/ci.yml\nname: CI\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.10'\n\n    - name: Install dependencies\n      run: |\n        pip install -e .\n        pip install pytest ruff black mypy\n\n    - name: Lint with ruff\n      run: ruff check src/ scripts/\n\n    - name: Check formatting\n      run: black --check src/ scripts/\n\n    - name: Type check\n      run: mypy src/\n\n    - name: Run tests\n      run: pytest --cov=swing_agent\n</code></pre> <p>This development guide ensures consistent code quality, comprehensive testing, and maintainable documentation across the SwingAgent project.</p>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"faq/#getting-started","title":"Getting Started","text":""},{"location":"faq/#q-what-exactly-is-swingagent","title":"Q: What exactly is SwingAgent?","text":"<p>A: SwingAgent is an automated trading system designed for 1-2 day swing trades. It combines technical analysis (Fibonacci levels, moving averages, momentum indicators), machine learning pattern recognition, and AI-powered explanations to generate trading signals with specific entry, stop-loss, and take-profit levels.</p>"},{"location":"faq/#q-do-i-need-programming-experience-to-use-swingagent","title":"Q: Do I need programming experience to use SwingAgent?","text":"<p>A: No. While SwingAgent is built in Python, you only need to run simple command-line scripts. The Getting Started guide walks you through everything step-by-step.</p>"},{"location":"faq/#q-whats-the-minimum-amount-of-money-i-need-to-start","title":"Q: What's the minimum amount of money I need to start?","text":"<p>A: SwingAgent doesn't trade for you - it generates signals that you can trade with any broker and any account size. However, since it's designed for individual stock positions, having at least $1,000-2,000 per position is practical for proper risk management.</p>"},{"location":"faq/#q-do-i-need-to-pay-for-data-feeds","title":"Q: Do I need to pay for data feeds?","text":"<p>A: No. SwingAgent uses free Yahoo Finance data, which is sufficient for swing trading timeframes (15-minute, 30-minute, 1-hour bars).</p>"},{"location":"faq/#technical-setup","title":"Technical Setup","text":""},{"location":"faq/#q-what-if-i-dont-have-an-openai-api-key","title":"Q: What if I don't have an OpenAI API key?","text":"<p>A: The system works without OpenAI - you just won't get the AI-generated action plans and explanations. All the technical analysis, pattern matching, and signal generation still function normally. You can add the API key later.</p>"},{"location":"faq/#q-can-i-run-this-on-windows","title":"Q: Can I run this on Windows?","text":"<p>A: Yes, SwingAgent works on Windows, macOS, and Linux. The commands in the documentation show both Windows and Unix-style examples.</p>"},{"location":"faq/#q-how-much-disk-space-does-swingagent-need","title":"Q: How much disk space does SwingAgent need?","text":"<p>A: Very little. The application itself is small, and the database files typically use only a few MB even after generating hundreds of signals.</p>"},{"location":"faq/#q-do-i-need-to-keep-my-computer-running-all-the-time","title":"Q: Do I need to keep my computer running all the time?","text":"<p>A: No. SwingAgent generates signals when you run it - it's not a continuously running system. Most traders run it once or twice per day to scan for new opportunities.</p>"},{"location":"faq/#understanding-signals","title":"Understanding Signals","text":""},{"location":"faq/#q-what-does-the-confidence-score-mean","title":"Q: What does the \"confidence\" score mean?","text":"<p>A: Confidence (0-100%) represents how similar the current setup is to historical profitable patterns. Higher confidence means the system found many similar historical setups that worked well. 70%+ is generally considered high confidence.</p>"},{"location":"faq/#q-whats-an-r-multiple-and-why-does-it-matter","title":"Q: What's an R-multiple and why does it matter?","text":"<p>A: R-multiple is your reward-to-risk ratio. If you risk $100 (difference between entry and stop), an R-multiple of 1.5 means you could potentially make $150. Higher R-multiples mean better risk/reward ratios. Look for signals with R &gt; 1.3.</p>"},{"location":"faq/#q-how-accurate-are-the-expected-win-rates","title":"Q: How accurate are the \"expected\" win rates?","text":"<p>A: Expected win rates are based on historical patterns similar to the current setup. They're generally reliable for understanding the probability profile of trades, but remember past performance doesn't guarantee future results.</p>"},{"location":"faq/#q-what-does-mtf-alignment-mean","title":"Q: What does \"MTF alignment\" mean?","text":"<p>A: Multi-Timeframe (MTF) alignment shows how many timeframes (15-minute and 1-hour) agree on the trend direction. A score of 2 means both timeframes are aligned, which generally produces stronger signals.</p>"},{"location":"faq/#q-whats-the-difference-between-volatility-regimes-l-m-h","title":"Q: What's the difference between volatility regimes (L, M, H)?","text":"<p>A:  - L (Low): Calm markets, trends are steady, can use larger position sizes - M (Medium): Normal market conditions, standard approach works well - H (High): Volatile markets (often around earnings), reduce position sizes and take profits faster</p>"},{"location":"faq/#trading-with-signals","title":"Trading with Signals","text":""},{"location":"faq/#q-do-i-have-to-take-every-signal","title":"Q: Do I have to take every signal?","text":"<p>A: Absolutely not. Signals are suggestions. You should only take signals that: - Meet your quality criteria (confidence, R-multiple, win rate) - Fit your risk tolerance - Make sense to you personally - Align with your market view</p>"},{"location":"faq/#q-what-if-the-stock-price-has-moved-away-from-the-entry-by-the-time-i-see-the-signal","title":"Q: What if the stock price has moved away from the entry by the time I see the signal?","text":"<p>A: Don't chase. If the price is outside the recommended entry zone, skip the trade. SwingAgent calculates risk/reward based on specific entry levels. Entering elsewhere changes the math.</p>"},{"location":"faq/#q-should-i-always-hold-for-the-full-target","title":"Q: Should I always hold for the full target?","text":"<p>A: Not necessarily. Many traders take partial profits (e.g., 50% at 1R) and let the rest run to the target. You can also exit early if you see the setup deteriorating or if you're uncomfortable with the position.</p>"},{"location":"faq/#q-what-if-a-trade-hits-the-stop-loss","title":"Q: What if a trade hits the stop loss?","text":"<p>A: That's normal and expected. With a 60% win rate, 40% of trades will be losers. The key is that your average winner (when you hit targets) should be larger than your average loser (when you hit stops). This is why R-multiples matter.</p>"},{"location":"faq/#q-can-i-modify-the-stop-loss-or-target","title":"Q: Can I modify the stop loss or target?","text":"<p>A: You can, but be careful. SwingAgent calculates these levels based on technical analysis and historical patterns. If you modify them, you're changing the risk/reward profile that the system used to generate its expectations.</p>"},{"location":"faq/#system-behavior","title":"System Behavior","text":""},{"location":"faq/#q-why-do-some-stocks-never-generate-signals","title":"Q: Why do some stocks never generate signals?","text":"<p>A: SwingAgent only generates signals when it finds high-quality setups that meet its criteria: - Clear trend or mean-reversion setup - Good risk/reward ratio (&gt;1.2 typically) - Similar historical patterns in its database - Proper technical indicators alignment</p> <p>Not all stocks will have these conditions at any given time.</p>"},{"location":"faq/#q-why-do-i-get-different-signals-when-i-run-the-same-command-twice","title":"Q: Why do I get different signals when I run the same command twice?","text":"<p>A: If you run commands very close together (within the same minute), you might get identical signals. However, as new price data comes in or if you run during different market hours, signals can change. Always use the most recent signal.</p>"},{"location":"faq/#q-how-does-the-system-learn-and-improve","title":"Q: How does the system learn and improve?","text":"<p>A: As you use SwingAgent and evaluate signals (using <code>eval_signals.py</code>), it builds a database of outcomes. This helps improve pattern matching for future signals. The more signals you evaluate, the better the historical expectations become.</p>"},{"location":"faq/#q-what-happens-if-my-internet-connection-is-slow","title":"Q: What happens if my internet connection is slow?","text":"<p>A: SwingAgent downloads data from Yahoo Finance, so it needs internet access. Slow connections will just make the commands take longer to run. If downloads fail, you'll get error messages and can retry.</p>"},{"location":"faq/#performance-and-results","title":"Performance and Results","text":""},{"location":"faq/#q-what-kind-of-returns-can-i-expect","title":"Q: What kind of returns can I expect?","text":"<p>A: This depends on many factors: how selective you are with signals, your position sizing, execution quality, and market conditions. SwingAgent provides tools for analysis, but results depend on your trading decisions. Focus on learning the system before expecting consistent profits.</p>"},{"location":"faq/#q-how-do-i-know-if-im-using-the-system-correctly","title":"Q: How do I know if I'm using the system correctly?","text":"<p>A: Good signs include: - Your actual win rate is close to the system's expected win rate - You're following the entry, stop, and target levels consistently - You're selective about signal quality - You're tracking and learning from your results</p>"},{"location":"faq/#q-why-are-my-results-different-from-the-backtest","title":"Q: Why are my results different from the backtest?","text":"<p>A: Backtests assume perfect execution at exact prices. Real trading involves: - Slippage (getting slightly different prices) - Emotional decisions - Missing signals due to timing - Different position sizing</p> <p>This is normal - focus on being consistent rather than matching backtest results exactly.</p>"},{"location":"faq/#q-should-i-trade-every-day","title":"Q: Should I trade every day?","text":"<p>A: No. Some days there are no good signals. It's better to wait for high-quality setups than force trades. Good swing traders might only make 1-3 trades per week.</p>"},{"location":"faq/#advanced-questions","title":"Advanced Questions","text":""},{"location":"faq/#q-can-i-customize-the-technical-parameters","title":"Q: Can I customize the technical parameters?","text":"<p>A: The core system uses proven parameters, but you can see Configuration for some customization options. For most users, the default settings work well.</p>"},{"location":"faq/#q-can-i-use-this-for-options-trading","title":"Q: Can I use this for options trading?","text":"<p>A: SwingAgent generates signals for stock prices. You could potentially use these signals to inform options trades, but you'd need to adapt the risk management and timing for options characteristics.</p>"},{"location":"faq/#q-can-i-run-this-for-crypto-or-forex","title":"Q: Can I run this for crypto or forex?","text":"<p>A: Currently, SwingAgent is designed for US stocks and ETFs using Yahoo Finance data. The technical analysis principles could apply to other markets, but the data sources and some features are stock-specific.</p>"},{"location":"faq/#q-how-do-i-add-new-stocks-to-scan","title":"Q: How do I add new stocks to scan?","text":"<p>A: Just use any valid stock symbol in the commands. SwingAgent will download the data and analyze it. Popular symbols include: - Individual stocks: AAPL, MSFT, GOOGL, NVDA, TSLA, etc. - Sector ETFs: QQQ, XLF, XLE, XLV, XLI, etc. - Market ETFs: SPY, IWM, DIA, etc.</p>"},{"location":"faq/#q-can-i-automate-the-trading-based-on-signals","title":"Q: Can I automate the trading based on signals?","text":"<p>A: SwingAgent generates signals but doesn't execute trades. Some traders connect it to brokers via APIs, but this requires programming knowledge and careful risk management. Most users trade the signals manually.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#q-i-get-permission-denied-errors","title":"Q: I get \"Permission denied\" errors?","text":"<p>A: See the Troubleshooting guide for detailed solutions. Usually this is fixed by: <pre><code>chmod 755 data/\nchmod 644 data/*.sqlite\n</code></pre></p>"},{"location":"faq/#q-the-commands-run-but-produce-no-output","title":"Q: The commands run but produce no output?","text":"<p>A: This usually means: 1. No signal was generated (no good setup found) 2. The stock symbol doesn't exist or has no data 3. There's an error - check for error messages</p>"},{"location":"faq/#q-yahoo-finance-data-seems-delayed","title":"Q: Yahoo Finance data seems delayed?","text":"<p>A: Yahoo Finance data can have 15-20 minute delays during market hours. For swing trading (1-2 day holds), this delay doesn't materially affect signal quality.</p>"},{"location":"faq/#q-how-do-i-get-help-if-something-isnt-working","title":"Q: How do I get help if something isn't working?","text":"<p>A:  1. Check the Troubleshooting guide 2. Review the Getting Started guide to ensure proper setup 3. Check that your command syntax matches the examples exactly 4. Verify your Python installation and dependencies</p>"},{"location":"faq/#trading-psychology","title":"Trading Psychology","text":""},{"location":"faq/#q-what-if-im-scared-to-take-the-first-trade","title":"Q: What if I'm scared to take the first trade?","text":"<p>A: This is normal. Start with very small position sizes or even paper trading. Focus on learning how the signals work rather than making money initially. Confidence comes with experience.</p>"},{"location":"faq/#q-what-if-i-keep-second-guessing-the-signals","title":"Q: What if I keep second-guessing the signals?","text":"<p>A: Develop clear criteria for which signals you'll take (e.g., confidence &gt;70%, R-multiple &gt;1.5) and stick to them. The system is designed to remove emotion from analysis - trust the process.</p>"},{"location":"faq/#q-should-i-always-wait-for-perfect-signals","title":"Q: Should I always wait for perfect signals?","text":"<p>A: There's no such thing as a perfect signal. Set reasonable quality standards and be consistent. Better to take consistently good signals than wait forever for perfect ones.</p> <p>Remember: SwingAgent is a tool to help with trading decisions, not a guarantee of profits. Always trade responsibly and never risk more than you can afford to lose.</p>"},{"location":"getting-started/","title":"Getting Started with SwingAgent","text":"<p>Welcome to SwingAgent v1.6.1! This guide will help you get up and running with the swing trading system in just a few steps.</p>"},{"location":"getting-started/#what-is-swingagent","title":"What is SwingAgent?","text":"<p>SwingAgent is an automated swing trading system designed for 1-2 day trades. It combines:</p> <ul> <li>Technical Analysis: Fibonacci retracements, trend analysis, momentum indicators</li> <li>Machine Learning: Pattern recognition based on historical similar setups</li> <li>AI Integration: OpenAI-powered explanations and action plans</li> <li>Risk Management: Automatic stop-loss and take-profit calculations</li> </ul>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ul> <li>Python 3.10 or higher installed on your computer</li> <li>Basic familiarity with trading concepts (entry, stop-loss, take-profit)</li> <li>Optional: OpenAI API key for enhanced AI features</li> </ul>"},{"location":"getting-started/#quick-installation","title":"Quick Installation","text":""},{"location":"getting-started/#step-1-download-swingagent","title":"Step 1: Download SwingAgent","text":"<pre><code># Option A: Clone from GitHub (recommended)\ngit clone https://github.com/ITlusions/ITL.SwingAgent.git\ncd ITL.SwingAgent\n\n# Option B: Download as ZIP and extract\n# Download from: https://github.com/ITlusions/ITL.SwingAgent/archive/main.zip\n</code></pre>"},{"location":"getting-started/#step-2-set-up-python-environment","title":"Step 2: Set Up Python Environment","text":"<pre><code># Create a virtual environment (recommended)\npython -m venv swingagent-env\n\n# Activate the environment\n# On Windows:\nswingagent-env\\Scripts\\activate\n# On macOS/Linux:\nsource swingagent-env/bin/activate\n\n# Install SwingAgent\npip install -e .\n</code></pre>"},{"location":"getting-started/#step-3-basic-configuration","title":"Step 3: Basic Configuration","text":"<p>Create a data directory for storing signals and results:</p> <pre><code>mkdir data\n</code></pre>"},{"location":"getting-started/#step-4-optional-set-up-ai-features","title":"Step 4: Optional - Set Up AI Features","text":"<p>If you want enhanced AI explanations and action plans:</p> <pre><code># Get your API key from: https://platform.openai.com/api-keys\nexport OPENAI_API_KEY=\"sk-your-key-here\"\nexport SWING_LLM_MODEL=\"gpt-4o-mini\"\n</code></pre>"},{"location":"getting-started/#your-first-signal","title":"Your First Signal","text":"<p>Let's generate your first swing trading signal:</p> <pre><code>python scripts/run_swing_agent.py --symbol AAPL --interval 30m --lookback-days 30\n</code></pre> <p>This command will:</p> <ol> <li>Download 30 days of Apple (AAPL) stock data in 30-minute intervals</li> <li>Analyze the current technical setup</li> <li>Search for similar historical patterns</li> <li>Generate a trading signal with entry, stop-loss, and take-profit levels</li> <li>Store the signal in your local database</li> </ol>"},{"location":"getting-started/#understanding-your-first-signal","title":"Understanding Your First Signal","text":"<p>Your signal output will look something like this:</p> <pre><code>{\n  \"symbol\": \"AAPL\",\n  \"asof\": \"2024-01-15T15:30:00+00:00\",\n  \"trend\": {\n    \"label\": \"up\",\n    \"price_above_ema\": true,\n    \"rsi_14\": 62.3\n  },\n  \"entry\": {\n    \"side\": \"long\",\n    \"entry_price\": 185.50,\n    \"stop_price\": 182.20,\n    \"take_profit\": 190.80,\n    \"r_multiple\": 1.61\n  },\n  \"confidence\": 0.72,\n  \"expected_r\": 0.95,\n  \"expected_winrate\": 0.58,\n  \"action_plan\": \"Monitor for entry between $184.20-$186.10...\"\n}\n</code></pre>"},{"location":"getting-started/#key-information","title":"Key Information:","text":"<ul> <li>Entry Side: \"long\" = buy, \"short\" = sell</li> <li>Entry Price: Recommended price to enter the trade</li> <li>Stop Price: Exit price if trade goes against you (limits loss)</li> <li>Take Profit: Target price to exit for profit</li> <li>R Multiple: Risk-to-reward ratio (1.61 means you risk $1 to potentially make $1.61)</li> <li>Confidence: System's confidence in the signal (0-1 scale)</li> <li>Expected R: Expected return based on historical similar setups</li> <li>Expected Win Rate: Percentage of similar historical setups that were profitable</li> <li>Action Plan: AI-generated explanation and trading plan</li> </ul>"},{"location":"getting-started/#common-commands","title":"Common Commands","text":""},{"location":"getting-started/#generate-signals-for-different-stocks","title":"Generate Signals for Different Stocks","text":"<pre><code># Technology stock with tech sector comparison\npython scripts/run_swing_agent.py --symbol NVDA --sector QQQ\n\n# Financial stock with financial sector comparison\npython scripts/run_swing_agent.py --symbol JPM --sector XLF\n\n# Different timeframes\npython scripts/run_swing_agent.py --symbol TSLA --interval 15m  # 15-minute bars\npython scripts/run_swing_agent.py --symbol MSFT --interval 1h   # 1-hour bars\n</code></pre>"},{"location":"getting-started/#view-historical-performance","title":"View Historical Performance","text":"<pre><code># Analyze all stored signals\npython scripts/analyze_performance.py\n</code></pre>"},{"location":"getting-started/#evaluate-signal-outcomes","title":"Evaluate Signal Outcomes","text":"<p>After some time has passed, evaluate how your signals performed:</p> <pre><code># Check outcomes of signals with 2-day maximum hold time\npython scripts/eval_signals.py --max-hold-days 2.0\n</code></pre>"},{"location":"getting-started/#whats-next","title":"What's Next?","text":"<p>Now that you have SwingAgent running, you might want to:</p> <ol> <li>Read the Tutorial - Learn to interpret and use signals effectively</li> <li>Explore Use Cases - See real-world trading scenarios</li> <li>Review Best Practices - Get tips for successful swing trading</li> <li>Check the FAQ - Find answers to common questions</li> </ol>"},{"location":"getting-started/#need-help","title":"Need Help?","text":"<ul> <li>Technical Issues: See the Troubleshooting Guide</li> <li>Trading Questions: Check the FAQ and Glossary</li> <li>Advanced Setup: Review Configuration options</li> </ul>"},{"location":"getting-started/#safety-reminder","title":"Safety Reminder","text":"<p>\u26a0\ufe0f Important: SwingAgent is a tool to assist with trading decisions. Always:</p> <ul> <li>Start with small position sizes while learning</li> <li>Understand that past performance doesn't guarantee future results</li> <li>Consider your risk tolerance and financial situation</li> <li>Never risk more than you can afford to lose</li> <li>Consider the signals as suggestions, not guaranteed outcomes</li> </ul> <p>Happy trading! \ud83d\ude80</p>"},{"location":"glossary/","title":"Trading and Technical Glossary","text":"<p>This glossary explains trading terms, technical analysis concepts, and SwingAgent-specific terminology.</p>"},{"location":"glossary/#swingagent-specific-terms","title":"SwingAgent-Specific Terms","text":""},{"location":"glossary/#action-plan","title":"Action Plan","text":"<p>AI-generated explanation and trading strategy for a signal. Includes reasoning behind the setup, timing considerations, and risk management guidance.</p>"},{"location":"glossary/#confidence-score","title":"Confidence Score","text":"<p>A percentage (0-100%) indicating how closely the current setup matches historically profitable patterns. Higher confidence means more similar successful historical patterns were found.</p>"},{"location":"glossary/#entry-zone-golden-pocket","title":"Entry Zone / Golden Pocket","text":"<p>The price range where SwingAgent recommends entering a trade, typically based on Fibonacci retracement levels (61.8% to 65%). Provides flexibility rather than a single entry price.</p>"},{"location":"glossary/#expected-r","title":"Expected R","text":"<p>The average return (as a multiple of risk) that similar historical setups have produced. An expected R of 0.8 means similar setups averaged 80% of the risk amount as profit.</p>"},{"location":"glossary/#expected-win-rate","title":"Expected Win Rate","text":"<p>The percentage of similar historical setups that were profitable. Based on pattern matching in SwingAgent's historical database.</p>"},{"location":"glossary/#mtf-alignment","title":"MTF Alignment","text":"<p>Multi-Timeframe Alignment score showing how many timeframes (15-minute and 1-hour) agree on trend direction. Score of 2 = both aligned, 1 = partial alignment, 0 = conflicting.</p>"},{"location":"glossary/#r-multiple","title":"R-Multiple","text":"<p>Risk-to-reward ratio. If you risk $100 and target $150 profit, the R-multiple is 1.5. Higher R-multiples indicate better potential reward relative to risk.</p>"},{"location":"glossary/#volatility-regime","title":"Volatility Regime","text":"<p>Market volatility classification: - L (Low): Calm, steady markets - M (Medium): Normal volatility conditions - H (High): Elevated volatility, often around events/earnings</p>"},{"location":"glossary/#trading-terms","title":"Trading Terms","text":""},{"location":"glossary/#askoffer","title":"Ask/Offer","text":"<p>The price at which someone is willing to sell a security. Always higher than the bid price.</p>"},{"location":"glossary/#average-true-range-atr","title":"Average True Range (ATR)","text":"<p>Measure of price volatility over a specific period. Higher ATR means larger price swings. Used for position sizing and stop-loss placement.</p>"},{"location":"glossary/#bid","title":"Bid","text":"<p>The price at which someone is willing to buy a security. Always lower than the ask price.</p>"},{"location":"glossary/#bid-ask-spread","title":"Bid-Ask Spread","text":"<p>The difference between the bid and ask prices. Wider spreads indicate less liquid securities.</p>"},{"location":"glossary/#breakout","title":"Breakout","text":"<p>When price moves above resistance or below support levels, often signaling the start of a new trend.</p>"},{"location":"glossary/#day-trading","title":"Day Trading","text":"<p>Opening and closing positions within the same trading day. Different from swing trading which holds positions 1-2 days.</p>"},{"location":"glossary/#entry-price","title":"Entry Price","text":"<p>The price at which you buy or sell to initiate a position.</p>"},{"location":"glossary/#fill","title":"Fill","text":"<p>When your order is executed at a specific price. \"Getting filled\" means your order was completed.</p>"},{"location":"glossary/#gap","title":"Gap","text":"<p>A price difference between consecutive trading periods where no trading occurred at intermediate prices.</p>"},{"location":"glossary/#limit-order","title":"Limit Order","text":"<p>An order to buy/sell at a specific price or better. Provides price control but no guarantee of execution.</p>"},{"location":"glossary/#long-position","title":"Long Position","text":"<p>Owning a security with the expectation that its price will rise. \"Going long\" means buying.</p>"},{"location":"glossary/#market-order","title":"Market Order","text":"<p>An order to buy/sell immediately at the current market price. Guarantees execution but not price.</p>"},{"location":"glossary/#position-size","title":"Position Size","text":"<p>The number of shares or dollar amount invested in a particular trade.</p>"},{"location":"glossary/#short-position","title":"Short Position","text":"<p>Selling a borrowed security with the expectation of buying it back at a lower price. \"Going short\" means selling.</p>"},{"location":"glossary/#slippage","title":"Slippage","text":"<p>The difference between expected trade price and actual execution price, usually due to market movement or low liquidity.</p>"},{"location":"glossary/#stop-loss-order","title":"Stop-Loss Order","text":"<p>An order to sell/buy when the price reaches a certain level, designed to limit losses.</p>"},{"location":"glossary/#take-profit-order","title":"Take-Profit Order","text":"<p>An order to close a position when it reaches a target profit level.</p>"},{"location":"glossary/#technical-analysis-terms","title":"Technical Analysis Terms","text":""},{"location":"glossary/#bollinger-bands","title":"Bollinger Bands","text":"<p>Technical indicator showing price channels based on standard deviations from a moving average. Used to identify overbought/oversold conditions.</p>"},{"location":"glossary/#candlestick","title":"Candlestick","text":"<p>Chart representation showing open, high, low, and close prices for a time period in a single bar.</p>"},{"location":"glossary/#exponential-moving-average-ema","title":"Exponential Moving Average (EMA)","text":"<p>A moving average that gives more weight to recent prices, making it more responsive to new information than simple moving averages.</p>"},{"location":"glossary/#fibonacci-retracement","title":"Fibonacci Retracement","text":"<p>Technical analysis tool based on the mathematical Fibonacci sequence. Key levels are 23.6%, 38.2%, 50%, 61.8%, and 78.6%.</p>"},{"location":"glossary/#golden-pocket","title":"Golden Pocket","text":"<p>The area between 61.8% and 65% Fibonacci retracement levels, often considered high-probability reversal zones.</p>"},{"location":"glossary/#moving-average","title":"Moving Average","text":"<p>The average price over a specific number of periods, used to smooth price action and identify trends.</p>"},{"location":"glossary/#relative-strength-index-rsi","title":"Relative Strength Index (RSI)","text":"<p>Momentum oscillator (0-100) measuring speed and change of price movements. Values above 70 suggest overbought conditions, below 30 suggest oversold.</p>"},{"location":"glossary/#resistance","title":"Resistance","text":"<p>A price level where selling pressure historically emerges, preventing further upward movement.</p>"},{"location":"glossary/#support","title":"Support","text":"<p>A price level where buying interest historically emerges, preventing further downward movement.</p>"},{"location":"glossary/#trend","title":"Trend","text":"<p>The general direction of price movement over time. Can be upward (bullish), downward (bearish), or sideways (neutral).</p>"},{"location":"glossary/#volume","title":"Volume","text":"<p>The number of shares traded during a specific period. Higher volume often confirms price movements.</p>"},{"location":"glossary/#risk-management-terms","title":"Risk Management Terms","text":""},{"location":"glossary/#drawdown","title":"Drawdown","text":"<p>The decline from a peak to a trough in account value, typically expressed as a percentage.</p>"},{"location":"glossary/#kelly-criterion","title":"Kelly Criterion","text":"<p>Mathematical formula for determining optimal position size based on win rate and average win/loss ratio.</p>"},{"location":"glossary/#maximum-adverse-excursion-mae","title":"Maximum Adverse Excursion (MAE)","text":"<p>The largest loss a position experienced before it was closed, regardless of final outcome.</p>"},{"location":"glossary/#position-correlation","title":"Position Correlation","text":"<p>The degree to which different positions move in the same direction. High correlation increases overall portfolio risk.</p>"},{"location":"glossary/#risk-adjusted-return","title":"Risk-Adjusted Return","text":"<p>Returns measured relative to the risk taken to achieve them. Higher risk-adjusted returns are better.</p>"},{"location":"glossary/#risk-of-ruin","title":"Risk of Ruin","text":"<p>The probability of losing your entire trading capital given your win rate, average win/loss, and position sizing.</p>"},{"location":"glossary/#sharpe-ratio","title":"Sharpe Ratio","text":"<p>Measure of risk-adjusted performance calculated as (return - risk-free rate) / standard deviation of returns.</p>"},{"location":"glossary/#value-at-risk-var","title":"Value at Risk (VaR)","text":"<p>Statistical measure estimating the maximum potential loss over a specific time period at a given confidence level.</p>"},{"location":"glossary/#market-structure-terms","title":"Market Structure Terms","text":""},{"location":"glossary/#after-hours-trading","title":"After-Hours Trading","text":"<p>Trading that occurs outside regular market hours (9:30 AM - 4:00 PM ET for US stocks).</p>"},{"location":"glossary/#circuit-breaker","title":"Circuit Breaker","text":"<p>Automatic trading halt triggered when markets decline by specified percentages.</p>"},{"location":"glossary/#extended-hours","title":"Extended Hours","text":"<p>Trading sessions before market open (pre-market) and after market close (after-hours).</p>"},{"location":"glossary/#market-cap","title":"Market Cap","text":"<p>Total value of a company's outstanding shares. Categories include small-cap, mid-cap, and large-cap.</p>"},{"location":"glossary/#pre-market-trading","title":"Pre-Market Trading","text":"<p>Trading that occurs before regular market hours, typically 4:00 AM - 9:30 AM ET.</p>"},{"location":"glossary/#sector-rotation","title":"Sector Rotation","text":"<p>Investment strategy of moving money between different market sectors based on economic cycles.</p>"},{"location":"glossary/#order-types","title":"Order Types","text":""},{"location":"glossary/#all-or-none-aon","title":"All-or-None (AON)","text":"<p>Order that must be executed in its entirety or not at all.</p>"},{"location":"glossary/#fill-or-kill-fok","title":"Fill-or-Kill (FOK)","text":"<p>Order that must be executed immediately and completely or canceled.</p>"},{"location":"glossary/#good-till-canceled-gtc","title":"Good-Till-Canceled (GTC)","text":"<p>Order that remains active until executed or manually canceled.</p>"},{"location":"glossary/#immediate-or-cancel-ioc","title":"Immediate-or-Cancel (IOC)","text":"<p>Order that must be executed immediately; any unfilled portion is canceled.</p>"},{"location":"glossary/#stop-limit-order","title":"Stop-Limit Order","text":"<p>Combines stop and limit orders; becomes a limit order when the stop price is reached.</p>"},{"location":"glossary/#trailing-stop","title":"Trailing Stop","text":"<p>Stop order that adjusts with favorable price movement while maintaining a fixed distance from the current price.</p>"},{"location":"glossary/#time-frames-and-periods","title":"Time Frames and Periods","text":""},{"location":"glossary/#intraday","title":"Intraday","text":"<p>Referring to price movements within a single trading day.</p>"},{"location":"glossary/#swing-trading","title":"Swing Trading","text":"<p>Trading style holding positions for 1-10 days, capturing short-term price swings.</p>"},{"location":"glossary/#day-trading_1","title":"Day Trading","text":"<p>Opening and closing positions within the same trading day.</p>"},{"location":"glossary/#position-trading","title":"Position Trading","text":"<p>Long-term trading holding positions for weeks to months.</p>"},{"location":"glossary/#scalping","title":"Scalping","text":"<p>Very short-term trading holding positions for seconds to minutes.</p>"},{"location":"glossary/#statistical-and-performance-terms","title":"Statistical and Performance Terms","text":""},{"location":"glossary/#alpha","title":"Alpha","text":"<p>Measure of an investment's performance relative to a market benchmark.</p>"},{"location":"glossary/#beta","title":"Beta","text":"<p>Measure of a security's volatility relative to the overall market.</p>"},{"location":"glossary/#correlation","title":"Correlation","text":"<p>Statistical measure (-1 to +1) showing how two securities move relative to each other.</p>"},{"location":"glossary/#standard-deviation","title":"Standard Deviation","text":"<p>Measure of price volatility; higher values indicate more volatile price movements.</p>"},{"location":"glossary/#win-rate","title":"Win Rate","text":"<p>Percentage of trades that are profitable.</p>"},{"location":"glossary/#profit-factor","title":"Profit Factor","text":"<p>Ratio of gross profit to gross loss. Values above 1.0 indicate profitability.</p>"},{"location":"glossary/#average-winaverage-loss-ratio","title":"Average Win/Average Loss Ratio","text":"<p>Comparison of average profitable trade size to average losing trade size.</p>"},{"location":"glossary/#market-conditions","title":"Market Conditions","text":""},{"location":"glossary/#bull-market","title":"Bull Market","text":"<p>Extended period of generally rising prices and investor optimism.</p>"},{"location":"glossary/#bear-market","title":"Bear Market","text":"<p>Extended period of generally falling prices and investor pessimism.</p>"},{"location":"glossary/#sideways-market","title":"Sideways Market","text":"<p>Market characterized by horizontal price movement with no clear trend direction.</p>"},{"location":"glossary/#consolidation","title":"Consolidation","text":"<p>Period where price moves within a defined range, often before a breakout.</p>"},{"location":"glossary/#correction","title":"Correction","text":"<p>A decline of 10-20% from recent highs, typically temporary.</p>"},{"location":"glossary/#recession","title":"Recession","text":"<p>Economic downturn lasting at least two consecutive quarters.</p>"},{"location":"glossary/#common-acronyms","title":"Common Acronyms","text":"<p>OHLC: Open, High, Low, Close - the four key price points for any time period P&amp;L: Profit and Loss ROI: Return on Investment ROE: Return on Equity YTD: Year-to-Date QoQ: Quarter-over-Quarter MoM: Month-over-Month AUM: Assets Under Management NAV: Net Asset Value IPO: Initial Public Offering ETF: Exchange-Traded Fund REIT: Real Estate Investment Trust GDP: Gross Domestic Product CPI: Consumer Price Index Fed: Federal Reserve FOMC: Federal Open Market Committee</p> <p>This glossary covers the essential terms you'll encounter when using SwingAgent and trading in general. Understanding these concepts will help you better interpret signals and make informed trading decisions.</p>"},{"location":"security/","title":"Security &amp; Best Practices Guide","text":"<p>Security considerations and best practices for SwingAgent v1.6.1 deployment and development.</p>"},{"location":"security/#security-overview","title":"Security Overview","text":"<p>SwingAgent handles sensitive financial data and integrates with external APIs. This guide covers security considerations for:</p> <ul> <li>API key management and rotation</li> <li>Database security and encryption  </li> <li>Multi-backend database security (SQLite, PostgreSQL, MySQL, CNPG)</li> <li>Input validation and sanitization</li> <li>Network security and TLS</li> <li>Logging and audit trails</li> <li>Production deployment security</li> <li>Kubernetes security for CNPG deployments</li> </ul>"},{"location":"security/#database-security","title":"Database Security","text":""},{"location":"security/#connection-security","title":"Connection Security","text":""},{"location":"security/#postgresql-security","title":"PostgreSQL Security","text":"<pre><code># Use SSL connections in production\nexport SWING_DATABASE_URL=\"postgresql://user:pass@host:5432/swing_agent?sslmode=require\"\n\n# Certificate-based authentication\nexport SWING_DB_SSL_CERT=\"/path/to/client-cert.pem\"\nexport SWING_DB_SSL_KEY=\"/path/to/client-key.pem\"\nexport SWING_DB_SSL_CA=\"/path/to/ca-cert.pem\"\n</code></pre>"},{"location":"security/#cloudnativepg-security","title":"CloudNativePG Security","text":"<pre><code># CNPG with SSL configuration\nexport CNPG_SSL_MODE=\"require\"\nexport CNPG_SSL_CERT=\"/var/secrets/client-cert.pem\"\nexport CNPG_SSL_KEY=\"/var/secrets/client-key.pem\"\nexport CNPG_SSL_CA=\"/var/secrets/ca-cert.pem\"\n</code></pre>"},{"location":"security/#database-credentials-management","title":"Database Credentials Management","text":"<pre><code># Use environment variables, never hardcode\nfrom swing_agent.database import get_database_config\n\n# Recommended: Use secrets management\nimport os\nfrom pathlib import Path\n\ndef load_db_password():\n    \"\"\"Load database password from secure source.\"\"\"\n    # Option 1: Kubernetes secret\n    secret_path = Path(\"/var/secrets/db-password\")\n    if secret_path.exists():\n        return secret_path.read_text().strip()\n\n    # Option 2: Environment variable (development)\n    return os.getenv(\"SWING_DB_PASSWORD\")\n\n# Set password securely\nos.environ[\"SWING_DB_PASSWORD\"] = load_db_password()\n</code></pre>"},{"location":"security/#data-encryption","title":"Data Encryption","text":""},{"location":"security/#database-level-encryption","title":"Database-Level Encryption","text":"<pre><code>-- PostgreSQL: Enable transparent data encryption\nALTER DATABASE swing_agent SET default_text_search_config = 'pg_catalog.english';\n\n-- Enable row-level security for sensitive data\nALTER TABLE signals ENABLE ROW LEVEL SECURITY;\nCREATE POLICY signals_policy ON signals FOR ALL TO swing_user;\n</code></pre>"},{"location":"security/#application-level-encryption","title":"Application-Level Encryption","text":"<pre><code># Encrypt sensitive fields before storage\nfrom cryptography.fernet import Fernet\nimport os\n\nclass SecureStorage:\n    def __init__(self):\n        key = os.getenv(\"SWING_ENCRYPTION_KEY\")\n        if not key:\n            raise ValueError(\"SWING_ENCRYPTION_KEY required\")\n        self.cipher = Fernet(key.encode())\n\n    def encrypt_llm_data(self, data: str) -&gt; str:\n        \"\"\"Encrypt LLM responses before database storage.\"\"\"\n        return self.cipher.encrypt(data.encode()).decode()\n\n    def decrypt_llm_data(self, encrypted_data: str) -&gt; str:\n        \"\"\"Decrypt LLM responses after database retrieval.\"\"\"\n        return self.cipher.decrypt(encrypted_data.encode()).decode()\n</code></pre>"},{"location":"security/#api-key-security","title":"API Key Security","text":""},{"location":"security/#current-implementation-review","title":"Current Implementation Review","text":"<p>Strengths: <pre><code># Environment variable usage (good practice)\napi_key = os.getenv(\"OPENAI_API_KEY\")\nmodel_name = os.getenv(\"SWING_LLM_MODEL\", \"gpt-4o-mini\")\n</code></pre></p> <p>Areas for Improvement:</p>"},{"location":"security/#1-api-key-validation","title":"1. API Key Validation","text":"<pre><code># security/api_keys.py\nimport os\nimport re\nfrom typing import Optional\nimport logging\n\nclass APIKeyManager:\n    def __init__(self):\n        self.logger = logging.getLogger(\"swing_agent.security\")\n\n    def validate_openai_key(self, api_key: Optional[str]) -&gt; bool:\n        \"\"\"Validate OpenAI API key format.\"\"\"\n        if not api_key:\n            return False\n\n        # OpenAI keys start with 'sk-' and have specific length\n        pattern = r'^sk-[A-Za-z0-9]{48}$'\n        if not re.match(pattern, api_key):\n            self.logger.warning(\"Invalid OpenAI API key format\")\n            return False\n\n        return True\n\n    def get_validated_key(self, env_var: str) -&gt; Optional[str]:\n        \"\"\"Get and validate API key from environment.\"\"\"\n        key = os.getenv(env_var)\n\n        if env_var == \"OPENAI_API_KEY\":\n            if not self.validate_openai_key(key):\n                raise ValueError(\"Invalid or missing OpenAI API key\")\n\n        return key\n\n    def mask_key_for_logging(self, key: str) -&gt; str:\n        \"\"\"Mask API key for safe logging.\"\"\"\n        if len(key) &lt;= 8:\n            return \"*\" * len(key)\n        return key[:4] + \"*\" * (len(key) - 8) + key[-4:]\n\n# Usage in llm_predictor.py\napi_manager = APIKeyManager()\napi_key = api_manager.get_validated_key(\"OPENAI_API_KEY\")\n</code></pre>"},{"location":"security/#2-key-rotation-support","title":"2. Key Rotation Support","text":"<pre><code># security/key_rotation.py\nfrom datetime import datetime, timedelta\nimport json\nfrom pathlib import Path\n\nclass KeyRotationManager:\n    def __init__(self, config_path: str = \"data/key_config.json\"):\n        self.config_path = Path(config_path)\n        self.config = self._load_config()\n\n    def _load_config(self) -&gt; dict:\n        \"\"\"Load key rotation configuration.\"\"\"\n        if self.config_path.exists():\n            return json.loads(self.config_path.read_text())\n        return {\"last_rotation\": None, \"rotation_interval_days\": 90}\n\n    def _save_config(self):\n        \"\"\"Save key rotation configuration.\"\"\"\n        self.config_path.parent.mkdir(parents=True, exist_ok=True)\n        self.config_path.write_text(json.dumps(self.config, indent=2))\n\n    def should_rotate_key(self) -&gt; bool:\n        \"\"\"Check if key should be rotated based on policy.\"\"\"\n        if not self.config.get(\"last_rotation\"):\n            return True\n\n        last_rotation = datetime.fromisoformat(self.config[\"last_rotation\"])\n        rotation_interval = timedelta(days=self.config[\"rotation_interval_days\"])\n\n        return datetime.utcnow() - last_rotation &gt; rotation_interval\n\n    def record_key_rotation(self):\n        \"\"\"Record that key was rotated.\"\"\"\n        self.config[\"last_rotation\"] = datetime.utcnow().isoformat()\n        self._save_config()\n</code></pre>"},{"location":"security/#database-security_1","title":"Database Security","text":""},{"location":"security/#connection-security_1","title":"Connection Security","text":"<pre><code># security/database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.engine import Engine\nimport ssl\n\nclass SecureDatabaseConfig:\n    @staticmethod\n    def create_secure_engine(database_url: str) -&gt; Engine:\n        \"\"\"Create database engine with security best practices.\"\"\"\n\n        # SSL/TLS configuration for PostgreSQL\n        if database_url.startswith(\"postgresql\"):\n            connect_args = {\n                \"sslmode\": \"require\",\n                \"sslcert\": os.getenv(\"DB_SSL_CERT\"),\n                \"sslkey\": os.getenv(\"DB_SSL_KEY\"),\n                \"sslrootcert\": os.getenv(\"DB_SSL_ROOT_CERT\"),\n            }\n\n            # Remove None values\n            connect_args = {k: v for k, v in connect_args.items() if v is not None}\n\n            return create_engine(\n                database_url,\n                connect_args=connect_args,\n                echo=False,  # Don't log SQL in production\n                pool_pre_ping=True,  # Verify connections\n                pool_recycle=3600,  # Recycle connections hourly\n            )\n\n        # MySQL with SSL\n        elif database_url.startswith(\"mysql\"):\n            connect_args = {\n                \"ssl_disabled\": False,\n                \"ssl_ca\": os.getenv(\"DB_SSL_CA\"),\n                \"ssl_cert\": os.getenv(\"DB_SSL_CERT\"),\n                \"ssl_key\": os.getenv(\"DB_SSL_KEY\"),\n            }\n\n            connect_args = {k: v for k, v in connect_args.items() if v is not None}\n\n            return create_engine(\n                database_url,\n                connect_args=connect_args,\n                echo=False,\n                pool_pre_ping=True,\n                pool_recycle=3600,\n            )\n\n        # SQLite with security considerations\n        elif database_url.startswith(\"sqlite\"):\n            # Ensure database file has proper permissions\n            db_path = database_url.replace(\"sqlite:///\", \"\")\n            if os.path.exists(db_path):\n                os.chmod(db_path, 0o600)  # Owner read/write only\n\n            return create_engine(\n                database_url,\n                echo=False,\n                pool_pre_ping=True,\n            )\n\n        else:\n            raise ValueError(f\"Unsupported database type: {database_url}\")\n</code></pre>"},{"location":"security/#data-encryption_1","title":"Data Encryption","text":"<pre><code># security/encryption.py\nfrom cryptography.fernet import Fernet\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nimport base64\nimport os\n\nclass DataEncryption:\n    def __init__(self, password: Optional[str] = None):\n        self.password = password or os.getenv(\"SWING_ENCRYPTION_KEY\")\n        if not self.password:\n            raise ValueError(\"Encryption password required\")\n\n        self.fernet = self._create_fernet_key()\n\n    def _create_fernet_key(self) -&gt; Fernet:\n        \"\"\"Create Fernet key from password.\"\"\"\n        password_bytes = self.password.encode()\n        salt = b'swing_agent_salt_v1'  # In production, use random salt per database\n\n        kdf = PBKDF2HMAC(\n            algorithm=hashes.SHA256(),\n            length=32,\n            salt=salt,\n            iterations=100000,\n        )\n\n        key = base64.urlsafe_b64encode(kdf.derive(password_bytes))\n        return Fernet(key)\n\n    def encrypt_sensitive_data(self, data: str) -&gt; str:\n        \"\"\"Encrypt sensitive string data.\"\"\"\n        return self.fernet.encrypt(data.encode()).decode()\n\n    def decrypt_sensitive_data(self, encrypted_data: str) -&gt; str:\n        \"\"\"Decrypt sensitive string data.\"\"\"\n        return self.fernet.decrypt(encrypted_data.encode()).decode()\n\n# Usage in models_db.py for sensitive fields\nclass Signal(Base):\n    # ... other fields ...\n\n    # Encrypted fields for sensitive data\n    _encrypted_notes = Column(String)  # Store encrypted\n\n    @hybrid_property\n    def notes(self) -&gt; Optional[str]:\n        if self._encrypted_notes:\n            encryptor = DataEncryption()\n            return encryptor.decrypt_sensitive_data(self._encrypted_notes)\n        return None\n\n    @notes.setter\n    def notes(self, value: Optional[str]):\n        if value:\n            encryptor = DataEncryption()\n            self._encrypted_notes = encryptor.encrypt_sensitive_data(value)\n        else:\n            self._encrypted_notes = None\n</code></pre>"},{"location":"security/#input-validation-and-sanitization","title":"Input Validation and Sanitization","text":""},{"location":"security/#enhanced-validation","title":"Enhanced Validation","text":"<pre><code># security/validation.py\nimport re\nfrom typing import Any, List, Dict\nfrom pydantic import BaseModel, validator, Field\nimport pandas as pd\n\nclass SecurityValidator:\n    @staticmethod\n    def validate_symbol(symbol: str) -&gt; str:\n        \"\"\"Validate stock symbol format.\"\"\"\n        # Allow alphanumeric, dots, dashes for international symbols\n        pattern = r'^[A-Z0-9.-]{1,12}$'\n        if not re.match(pattern, symbol.upper()):\n            raise ValueError(f\"Invalid symbol format: {symbol}\")\n        return symbol.upper()\n\n    @staticmethod\n    def validate_timeframe(timeframe: str) -&gt; str:\n        \"\"\"Validate timeframe against allowed values.\"\"\"\n        allowed = [\"15m\", \"30m\", \"1h\", \"1d\"]\n        if timeframe not in allowed:\n            raise ValueError(f\"Invalid timeframe: {timeframe}. Allowed: {allowed}\")\n        return timeframe\n\n    @staticmethod\n    def validate_lookback_days(days: int) -&gt; int:\n        \"\"\"Validate lookback days within reasonable limits.\"\"\"\n        if not 1 &lt;= days &lt;= 365:\n            raise ValueError(f\"Lookback days must be 1-365, got: {days}\")\n        return days\n\n    @staticmethod\n    def sanitize_llm_input(text: str) -&gt; str:\n        \"\"\"Sanitize text input for LLM to prevent injection.\"\"\"\n        # Remove potential prompt injection patterns\n        dangerous_patterns = [\n            r'ignore\\s+previous\\s+instructions',\n            r'system\\s*:',\n            r'assistant\\s*:',\n            r'user\\s*:',\n            r'&lt;\\|.*?\\|&gt;',  # Special tokens\n        ]\n\n        sanitized = text\n        for pattern in dangerous_patterns:\n            sanitized = re.sub(pattern, '', sanitized, flags=re.IGNORECASE)\n\n        # Limit length to prevent excessively long inputs\n        if len(sanitized) &gt; 10000:\n            sanitized = sanitized[:10000]\n\n        return sanitized.strip()\n\n# Enhanced data models with validation\nclass SecureTradeSignal(BaseModel):\n    symbol: str = Field(..., min_length=1, max_length=12)\n    timeframe: str\n    confidence: float = Field(..., ge=0.0, le=1.0)\n\n    @validator('symbol')\n    def validate_symbol(cls, v):\n        return SecurityValidator.validate_symbol(v)\n\n    @validator('timeframe')\n    def validate_timeframe(cls, v):\n        return SecurityValidator.validate_timeframe(v)\n\n    @validator('confidence')\n    def validate_confidence(cls, v):\n        # Additional business logic validation\n        if v &gt; 0.95:\n            # Log unusually high confidence for review\n            import logging\n            logging.getLogger(\"swing_agent.security\").info(\n                f\"High confidence signal: {v:.3f}\"\n            )\n        return v\n</code></pre>"},{"location":"security/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<pre><code># security/sql_security.py\nfrom sqlalchemy import text\nfrom sqlalchemy.orm import Session\nfrom typing import List, Any\n\nclass SecureQueryBuilder:\n    @staticmethod\n    def safe_symbol_query(session: Session, symbols: List[str]) -&gt; List[Any]:\n        \"\"\"Execute symbol query with parameterization.\"\"\"\n        # Validate all symbols first\n        validated_symbols = [\n            SecurityValidator.validate_symbol(symbol) \n            for symbol in symbols\n        ]\n\n        # Use parameterized query\n        query = text(\"\"\"\n            SELECT * FROM signals \n            WHERE symbol = ANY(:symbol_list)\n            ORDER BY created_at_utc DESC\n        \"\"\")\n\n        return session.execute(\n            query, \n            {\"symbol_list\": validated_symbols}\n        ).fetchall()\n\n    @staticmethod\n    def safe_date_range_query(session: Session, start_date: str, end_date: str) -&gt; List[Any]:\n        \"\"\"Execute date range query safely.\"\"\"\n        # Validate date formats\n        import datetime\n        try:\n            datetime.datetime.fromisoformat(start_date)\n            datetime.datetime.fromisoformat(end_date)\n        except ValueError:\n            raise ValueError(\"Invalid date format. Use ISO format: YYYY-MM-DD\")\n\n        query = text(\"\"\"\n            SELECT * FROM signals \n            WHERE asof &gt;= :start_date \n            AND asof &lt;= :end_date\n            ORDER BY asof DESC\n        \"\"\")\n\n        return session.execute(\n            query,\n            {\"start_date\": start_date, \"end_date\": end_date}\n        ).fetchall()\n</code></pre>"},{"location":"security/#network-security","title":"Network Security","text":""},{"location":"security/#tls-configuration","title":"TLS Configuration","text":"<pre><code># security/network.py\nimport ssl\nimport requests\nfrom urllib3.util.ssl_ import create_urllib3_context\n\nclass SecureHTTPClient:\n    def __init__(self):\n        self.session = requests.Session()\n        self._configure_tls()\n\n    def _configure_tls(self):\n        \"\"\"Configure secure TLS settings.\"\"\"\n        # Create secure SSL context\n        context = create_urllib3_context()\n        context.minimum_version = ssl.TLSVersion.TLSv1_2\n        context.set_ciphers('ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS')\n\n        # Configure adapter\n        adapter = requests.adapters.HTTPAdapter()\n        adapter.init_poolmanager(ssl_context=context)\n\n        self.session.mount('https://', adapter)\n\n        # Set timeouts\n        self.session.timeout = (10, 30)  # Connect, read timeouts\n\n    def secure_get(self, url: str, **kwargs) -&gt; requests.Response:\n        \"\"\"Make secure GET request.\"\"\"\n        # Validate URL\n        if not url.startswith('https://'):\n            raise ValueError(\"Only HTTPS URLs allowed\")\n\n        return self.session.get(url, **kwargs)\n\n# Usage in data fetching\nclass SecureDataProvider:\n    def __init__(self):\n        self.http_client = SecureHTTPClient()\n\n    def fetch_market_data(self, symbol: str) -&gt; pd.DataFrame:\n        \"\"\"Fetch market data with secure HTTP client.\"\"\"\n        # Use yfinance with secure session\n        import yfinance as yf\n\n        # Validate symbol first\n        symbol = SecurityValidator.validate_symbol(symbol)\n\n        # Configure yfinance to use secure session\n        ticker = yf.Ticker(symbol, session=self.http_client.session)\n        return ticker.history(period=\"30d\", interval=\"1h\")\n</code></pre>"},{"location":"security/#logging-and-audit-trails","title":"Logging and Audit Trails","text":""},{"location":"security/#secure-logging","title":"Secure Logging","text":"<pre><code># security/audit_logging.py\nimport logging\nimport json\nfrom datetime import datetime\nfrom typing import Any, Dict, Optional\nfrom pathlib import Path\n\nclass AuditLogger:\n    def __init__(self, log_file: str = \"logs/audit.log\"):\n        self.log_file = Path(log_file)\n        self.log_file.parent.mkdir(parents=True, exist_ok=True)\n\n        # Configure secure logging\n        self.logger = logging.getLogger(\"swing_agent.audit\")\n        handler = logging.FileHandler(self.log_file)\n        handler.setFormatter(logging.Formatter(\n            '%(asctime)s - %(levelname)s - %(message)s'\n        ))\n        self.logger.addHandler(handler)\n        self.logger.setLevel(logging.INFO)\n\n        # Set secure permissions on log file\n        self.log_file.chmod(0o600)\n\n    def log_signal_generation(self, user_id: str, symbol: str, \n                            signal_data: Dict[str, Any]):\n        \"\"\"Log signal generation event.\"\"\"\n        audit_event = {\n            \"event_type\": \"signal_generated\",\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"user_id\": user_id,\n            \"symbol\": symbol,\n            \"trend_label\": signal_data.get(\"trend\", {}).get(\"label\"),\n            \"confidence\": signal_data.get(\"confidence\"),\n            \"entry_side\": signal_data.get(\"entry\", {}).get(\"side\"),\n            \"ip_address\": self._get_client_ip(),\n        }\n\n        self.logger.info(json.dumps(audit_event))\n\n    def log_database_access(self, user_id: str, action: str, \n                          table: str, record_id: Optional[str] = None):\n        \"\"\"Log database access events.\"\"\"\n        audit_event = {\n            \"event_type\": \"database_access\",\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"user_id\": user_id,\n            \"action\": action,  # CREATE, READ, UPDATE, DELETE\n            \"table\": table,\n            \"record_id\": record_id,\n            \"ip_address\": self._get_client_ip(),\n        }\n\n        self.logger.info(json.dumps(audit_event))\n\n    def log_api_key_usage(self, service: str, operation: str, \n                         success: bool, tokens_used: Optional[int] = None):\n        \"\"\"Log API key usage for billing and security monitoring.\"\"\"\n        audit_event = {\n            \"event_type\": \"api_key_usage\",\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"service\": service,\n            \"operation\": operation,\n            \"success\": success,\n            \"tokens_used\": tokens_used,\n        }\n\n        self.logger.info(json.dumps(audit_event))\n\n    def log_security_event(self, event_type: str, severity: str, \n                          details: Dict[str, Any]):\n        \"\"\"Log security-related events.\"\"\"\n        audit_event = {\n            \"event_type\": \"security_event\",\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"security_event_type\": event_type,\n            \"severity\": severity,\n            \"details\": details,\n            \"ip_address\": self._get_client_ip(),\n        }\n\n        self.logger.warning(json.dumps(audit_event))\n\n    def _get_client_ip(self) -&gt; Optional[str]:\n        \"\"\"Get client IP address if available.\"\"\"\n        # Implementation depends on deployment context\n        # For web apps, use request.remote_addr\n        # For CLI tools, this might not be relevant\n        return None\n\n# Secure logging configuration\ndef configure_secure_logging():\n    \"\"\"Configure logging with security best practices.\"\"\"\n\n    # Create secure log directory\n    log_dir = Path(\"logs\")\n    log_dir.mkdir(exist_ok=True)\n    log_dir.chmod(0o700)  # Owner access only\n\n    # Configure root logger\n    logging.basicConfig(\n        level=logging.INFO,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.FileHandler('logs/swing_agent.log', mode='a'),\n            logging.StreamHandler()  # Console output for development\n        ]\n    )\n\n    # Set secure permissions on log files\n    for log_file in log_dir.glob(\"*.log\"):\n        log_file.chmod(0o600)\n\n    # Filter sensitive information from logs\n    class SensitiveDataFilter(logging.Filter):\n        def filter(self, record):\n            # Mask API keys in log messages\n            if hasattr(record, 'msg'):\n                record.msg = re.sub(\n                    r'sk-[A-Za-z0-9]{48}', \n                    'sk-****', \n                    str(record.msg)\n                )\n            return True\n\n    # Add filter to all handlers\n    for handler in logging.getLogger().handlers:\n        handler.addFilter(SensitiveDataFilter())\n</code></pre>"},{"location":"security/#production-deployment-security","title":"Production Deployment Security","text":""},{"location":"security/#environment-security","title":"Environment Security","text":"<pre><code># security/environment.py\nimport os\nfrom typing import Dict, List\nfrom pathlib import Path\n\nclass EnvironmentSecurity:\n    REQUIRED_PROD_VARS = [\n        \"SWING_DATABASE_URL\",\n        \"OPENAI_API_KEY\", \n        \"SWING_ENCRYPTION_KEY\",\n        \"SWING_LOG_LEVEL\",\n    ]\n\n    SENSITIVE_VARS = [\n        \"OPENAI_API_KEY\",\n        \"SWING_ENCRYPTION_KEY\", \n        \"DB_PASSWORD\",\n        \"DATABASE_URL\",\n    ]\n\n    @classmethod\n    def validate_production_environment(cls) -&gt; Dict[str, List[str]]:\n        \"\"\"Validate production environment configuration.\"\"\"\n        issues = {\n            \"missing_vars\": [],\n            \"weak_config\": [],\n            \"security_warnings\": []\n        }\n\n        # Check required variables\n        for var in cls.REQUIRED_PROD_VARS:\n            if not os.getenv(var):\n                issues[\"missing_vars\"].append(var)\n\n        # Check for weak configurations\n        if os.getenv(\"SWING_LOG_LEVEL\") == \"DEBUG\":\n            issues[\"weak_config\"].append(\"DEBUG logging enabled in production\")\n\n        if os.getenv(\"SWING_DATABASE_URL\", \"\").startswith(\"sqlite://\"):\n            issues[\"security_warnings\"].append(\"SQLite not recommended for production\")\n\n        # Check file permissions\n        sensitive_files = [\n            \".env\",\n            \"data/swing_agent.sqlite\",\n            \"logs/audit.log\"\n        ]\n\n        for file_path in sensitive_files:\n            path = Path(file_path)\n            if path.exists():\n                stat = path.stat()\n                if stat.st_mode &amp; 0o077:  # Group/other permissions\n                    issues[\"security_warnings\"].append(\n                        f\"File {file_path} has overly permissive permissions\"\n                    )\n\n        return issues\n\n    @classmethod\n    def secure_environment_setup(cls):\n        \"\"\"Set up secure environment configuration.\"\"\"\n\n        # Set secure file creation mask\n        os.umask(0o077)\n\n        # Create secure directories\n        secure_dirs = [\"data\", \"logs\", \"backups\"]\n        for dir_name in secure_dirs:\n            path = Path(dir_name)\n            path.mkdir(exist_ok=True)\n            path.chmod(0o700)  # Owner only\n\n        # Validate environment\n        issues = cls.validate_production_environment()\n\n        if any(issues.values()):\n            import logging\n            logger = logging.getLogger(\"swing_agent.security\")\n\n            for category, problems in issues.items():\n                for problem in problems:\n                    logger.warning(f\"Environment {category}: {problem}\")\n\n    @classmethod\n    def sanitize_environment_for_logging(cls) -&gt; Dict[str, str]:\n        \"\"\"Get environment variables safe for logging.\"\"\"\n        env_vars = {}\n\n        for key, value in os.environ.items():\n            if key.startswith(\"SWING_\"):\n                if any(sensitive in key for sensitive in cls.SENSITIVE_VARS):\n                    env_vars[key] = \"***MASKED***\"\n                else:\n                    env_vars[key] = value\n\n        return env_vars\n\n# Production deployment checker\ndef production_security_check():\n    \"\"\"Run comprehensive security check for production deployment.\"\"\"\n    print(\"SwingAgent Production Security Check\")\n    print(\"=\" * 40)\n\n    # Environment validation\n    issues = EnvironmentSecurity.validate_production_environment()\n\n    if not any(issues.values()):\n        print(\"\u2705 Environment configuration passed security check\")\n    else:\n        print(\"\u26a0\ufe0f  Security issues found:\")\n        for category, problems in issues.items():\n            if problems:\n                print(f\"\\n{category.upper()}:\")\n                for problem in problems:\n                    print(f\"  - {problem}\")\n\n    # File permission check\n    print(\"\\n\ud83d\udd12 File Permission Check:\")\n    sensitive_files = [\".env\", \"data/\", \"logs/\"]\n\n    for file_path in sensitive_files:\n        path = Path(file_path)\n        if path.exists():\n            stat = path.stat()\n            perms = oct(stat.st_mode)[-3:]\n\n            if file_path == \"data/\" or file_path == \"logs/\":\n                expected = \"700\"\n            else:\n                expected = \"600\"\n\n            if perms == expected:\n                print(f\"  \u2705 {file_path}: {perms}\")\n            else:\n                print(f\"  \u26a0\ufe0f  {file_path}: {perms} (recommended: {expected})\")\n\n    # Database connection security\n    db_url = os.getenv(\"SWING_DATABASE_URL\", \"\")\n    print(f\"\\n\ud83d\uddc4\ufe0f  Database Security:\")\n\n    if db_url.startswith(\"postgresql://\") and \"sslmode=require\" in db_url:\n        print(\"  \u2705 PostgreSQL with SSL required\")\n    elif db_url.startswith(\"sqlite://\"):\n        print(\"  \u26a0\ufe0f  SQLite - ensure file permissions are secure\")\n    else:\n        print(\"  \u26a0\ufe0f  Database connection security unclear\")\n\n    print(\"\\n\" + \"=\" * 40)\n    print(\"Security check complete. Address any warnings before production deployment.\")\n\nif __name__ == \"__main__\":\n    production_security_check()\n</code></pre>"},{"location":"security/#security-checklist","title":"Security Checklist","text":""},{"location":"security/#pre-production-checklist","title":"Pre-Production Checklist","text":"<ul> <li>[ ] API Keys</li> <li>[ ] All API keys stored in environment variables</li> <li>[ ] API key validation implemented</li> <li>[ ] Key rotation policy documented</li> <li> <p>[ ] Keys masked in all logs</p> </li> <li> <p>[ ] Database Security</p> </li> <li>[ ] SSL/TLS enabled for database connections</li> <li>[ ] Database credentials not hardcoded</li> <li>[ ] Sensitive data encrypted at rest</li> <li> <p>[ ] Database backups encrypted</p> </li> <li> <p>[ ] Input Validation</p> </li> <li>[ ] All user inputs validated and sanitized</li> <li>[ ] SQL injection protection verified</li> <li>[ ] LLM prompt injection protection implemented</li> <li> <p>[ ] File upload restrictions (if applicable)</p> </li> <li> <p>[ ] Network Security</p> </li> <li>[ ] HTTPS required for all external communications</li> <li>[ ] TLS 1.2+ enforced</li> <li>[ ] Secure ciphers configured</li> <li> <p>[ ] Request timeouts configured</p> </li> <li> <p>[ ] Logging and Monitoring</p> </li> <li>[ ] Audit logging implemented</li> <li>[ ] Log files have secure permissions</li> <li>[ ] Sensitive data filtered from logs</li> <li> <p>[ ] Security events monitored</p> </li> <li> <p>[ ] Environment</p> </li> <li>[ ] Production environment variables validated</li> <li>[ ] File permissions secured (600/700)</li> <li>[ ] Debug logging disabled</li> <li>[ ] Error messages don't expose sensitive data</li> </ul>"},{"location":"security/#regular-security-maintenance","title":"Regular Security Maintenance","text":"<p>Monthly: - Review audit logs for suspicious activity - Check for outdated dependencies with security vulnerabilities - Validate API key rotation compliance</p> <p>Quarterly: - Review and update security policies - Penetration testing of public interfaces - Security training for development team</p> <p>Annually: - Comprehensive security audit - Disaster recovery testing - Security policy review and updates</p> <p>This security guide provides a comprehensive framework for securing SwingAgent in production environments while maintaining functionality and ease of development.</p>"},{"location":"testing/","title":"Testing Strategy &amp; Implementation","text":"<p>Comprehensive testing approach for SwingAgent v1.6.1 to ensure reliability, correctness, and performance.</p>"},{"location":"testing/#testing-philosophy","title":"Testing Philosophy","text":"<p>SwingAgent uses a multi-layered testing strategy:</p> <ol> <li>Unit Tests: Individual component functionality</li> <li>Integration Tests: Component interaction and data flow  </li> <li>Database Tests: Database operations and migrations</li> <li>Property Tests: Mathematical invariants and edge cases</li> <li>Performance Tests: Speed and memory usage validation</li> <li>End-to-End Tests: Complete workflow scenarios</li> </ol>"},{"location":"testing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/                    # Isolated component tests\n\u2502   \u251c\u2500\u2500 test_indicators.py   # Technical indicator functions\n\u2502   \u251c\u2500\u2500 test_strategy.py     # Strategy logic validation\n\u2502   \u251c\u2500\u2500 test_features.py     # Feature engineering tests\n\u2502   \u251c\u2500\u2500 test_models.py       # Pydantic model validation\n\u2502   \u251c\u2500\u2500 test_vectorstore.py  # Vector operations\n\u2502   \u251c\u2500\u2500 test_config.py       # Configuration management\n\u2502   \u2514\u2500\u2500 test_llm.py         # LLM integration (mocked)\n\u251c\u2500\u2500 integration/             # Component interaction tests\n\u2502   \u251c\u2500\u2500 test_agent.py        # Full agent workflow\n\u2502   \u251c\u2500\u2500 test_database.py     # Database operations\n\u2502   \u251c\u2500\u2500 test_migrations.py   # Database migration tests\n\u2502   \u251c\u2500\u2500 test_pipeline.py     # Data processing pipeline\n\u2502   \u2514\u2500\u2500 test_signals.py      # Signal generation scenarios\n\u251c\u2500\u2500 database/               # Database-specific tests\n\u2502   \u251c\u2500\u2500 test_sqlite.py       # SQLite backend tests\n\u2502   \u251c\u2500\u2500 test_postgresql.py   # PostgreSQL backend tests\n\u2502   \u251c\u2500\u2500 test_mysql.py        # MySQL backend tests\n\u2502   \u2514\u2500\u2500 test_cnpg.py         # CloudNativePG tests\n\u251c\u2500\u2500 property/               # Property-based testing\n\u2502   \u251c\u2500\u2500 test_math_properties.py  # Mathematical correctness\n\u2502   \u2514\u2500\u2500 test_invariants.py       # System invariants\n\u251c\u2500\u2500 performance/            # Performance benchmarks\n\u2502   \u251c\u2500\u2500 test_benchmarks.py   # Speed benchmarks\n\u2502   \u2514\u2500\u2500 test_memory.py       # Memory usage tests\n\u251c\u2500\u2500 fixtures/               # Shared test data\n\u2502   \u251c\u2500\u2500 sample_data.py       # Market data fixtures\n\u2502   \u251c\u2500\u2500 mock_responses.py    # API response mocks\n\u2502   \u251c\u2500\u2500 test_databases.py    # Test database fixtures\n\u2502   \u2514\u2500\u2500 scenarios.py         # Trading scenarios\n\u2514\u2500\u2500 conftest.py             # Pytest configuration\n</code></pre>"},{"location":"testing/#database-testing","title":"Database Testing","text":""},{"location":"testing/#test-database-setup","title":"Test Database Setup","text":"<pre><code># tests/conftest.py\nimport pytest\nfrom sqlalchemy import create_engine\nfrom swing_agent.database import Base, get_session\nfrom swing_agent.models_db import Signal, VectorStore\n\n@pytest.fixture(scope=\"session\")\ndef test_database():\n    \"\"\"Create a test database for testing.\"\"\"\n    engine = create_engine(\"sqlite:///:memory:\")\n    Base.metadata.create_all(engine)\n    return engine\n\n@pytest.fixture\ndef db_session(test_database):\n    \"\"\"Provide a database session for tests.\"\"\"\n    with get_session(test_database) as session:\n        yield session\n        session.rollback()\n</code></pre>"},{"location":"testing/#migration-testing","title":"Migration Testing","text":"<pre><code># tests/integration/test_migrations.py\nimport pytest\nfrom pathlib import Path\nfrom swing_agent.migrate import migrate_all_data\nfrom swing_agent.database import init_database\n\ndef test_legacy_migration(tmp_path, db_session):\n    \"\"\"Test migration from legacy separate databases.\"\"\"\n    # Create legacy test databases\n    legacy_signals = tmp_path / \"signals.sqlite\"\n    legacy_vectors = tmp_path / \"vectors.sqlite\"\n\n    # Setup test data in legacy format\n    # ... setup code ...\n\n    # Test migration\n    migrate_all_data(\n        data_dir=tmp_path,\n        target_db_url=\"sqlite:///:memory:\"\n    )\n\n    # Verify migration success\n    signals = db_session.query(Signal).all()\n    assert len(signals) &gt; 0\n</code></pre>"},{"location":"testing/#unit-testing","title":"Unit Testing","text":""},{"location":"testing/#technical-indicators","title":"Technical Indicators","text":"<pre><code># tests/unit/test_indicators.py\nimport pytest\nimport pandas as pd\nimport numpy as np\nfrom swing_agent.indicators import ema, rsi, atr, fibonacci_range, bollinger_width\n\nclass TestTechnicalIndicators:\n    @pytest.fixture\n    def trending_data(self):\n        \"\"\"Generate uptrending price data for testing.\"\"\"\n        dates = pd.date_range('2024-01-01', periods=100, freq='1h')\n        np.random.seed(42)  # Reproducible tests\n\n        # Create realistic trending price series\n        trend = np.linspace(100, 120, 100)  # 20% uptrend\n        noise = np.random.randn(100) * 0.5\n        prices = trend + noise\n\n        return pd.DataFrame({\n            'open': prices * (1 + np.random.randn(100) * 0.001),\n            'high': prices * (1 + np.abs(np.random.randn(100)) * 0.002),\n            'low': prices * (1 - np.abs(np.random.randn(100)) * 0.002),\n            'close': prices,\n            'volume': np.random.randint(1000000, 10000000, 100)\n        }, index=dates)\n\n    def test_ema_basic_properties(self, trending_data):\n        \"\"\"Test EMA calculation basic properties.\"\"\"\n        ema_20 = ema(trending_data['close'], 20)\n\n        # Length preservation\n        assert len(ema_20) == len(trending_data)\n\n        # No NaN in final values (after warmup)\n        assert not ema_20.iloc[-50:].isna().any()\n\n        # EMA follows trend but is smoother\n        price_volatility = trending_data['close'].pct_change().std()\n        ema_volatility = ema_20.pct_change().std()\n        assert ema_volatility &lt; price_volatility\n\n        # EMA lags but converges toward price\n        final_price = trending_data['close'].iloc[-1]\n        final_ema = ema_20.iloc[-1]\n        assert abs(final_price - final_ema) / final_price &lt; 0.1  # Within 10%\n\n    def test_rsi_bounds_and_behavior(self, trending_data):\n        \"\"\"Test RSI calculation bounds and expected behavior.\"\"\"\n        rsi_14 = rsi(trending_data['close'], 14)\n        rsi_values = rsi_14.dropna()\n\n        # RSI must stay within bounds\n        assert all(0 &lt;= val &lt;= 100 for val in rsi_values)\n\n        # Should have reasonable number of non-NaN values\n        assert len(rsi_values) &gt; 50\n\n        # In trending market, RSI should show some directional bias\n        recent_rsi = rsi_values.iloc[-20:]  # Last 20 values\n        assert recent_rsi.mean() &gt; 45  # Slight upward bias in uptrend\n\n    def test_atr_calculation(self, trending_data):\n        \"\"\"Test ATR calculation properties.\"\"\"\n        atr_14 = atr(trending_data, 14)\n        atr_values = atr_14.dropna()\n\n        # ATR must be positive\n        assert all(val &gt;= 0 for val in atr_values)\n\n        # ATR should reflect price movement\n        price_range = trending_data['high'] - trending_data['low']\n        avg_range = price_range.mean()\n        avg_atr = atr_values.mean()\n\n        # ATR should be comparable to average range\n        assert 0.5 * avg_range &lt; avg_atr &lt; 2.0 * avg_range\n\n    def test_fibonacci_levels_ordering(self, trending_data):\n        \"\"\"Test Fibonacci level calculations and ordering.\"\"\"\n        fib = fibonacci_range(trending_data, lookback=40)\n\n        # Levels must be properly ordered\n        levels = list(fib.levels.values())\n        sorted_levels = sorted(levels)\n        assert levels == sorted_levels or levels == sorted_levels[::-1]\n\n        # Golden pocket bounds\n        assert fib.golden_low &lt;= fib.golden_high\n\n        # Levels should be within reasonable range of price data\n        price_min = trending_data['close'].min()\n        price_max = trending_data['close'].max()\n        price_range = price_max - price_min\n\n        for level in levels:\n            # Fibonacci levels can extend beyond price range\n            assert price_min - price_range &lt;= level &lt;= price_max + price_range\n\n    def test_bollinger_width_calculation(self, trending_data):\n        \"\"\"Test Bollinger Band width calculation.\"\"\"\n        bw = bollinger_width(trending_data['close'], length=20, ndev=2.0)\n        bw_values = bw.dropna()\n\n        # Width should be positive\n        assert all(val &gt; 0 for val in bw_values)\n\n        # Width should be reasonable percentage of price\n        assert all(0.001 &lt; val &lt; 0.5 for val in bw_values)  # 0.1% to 50%\n</code></pre>"},{"location":"testing/#strategy-logic","title":"Strategy Logic","text":"<pre><code># tests/unit/test_strategy.py\nimport pytest\nfrom swing_agent.strategy import label_trend, build_entry\nfrom swing_agent.models import TrendLabel, SignalSide\n\nclass TestStrategyLogic:\n    def test_trend_labeling_consistency(self, trending_data):\n        \"\"\"Test trend labeling produces consistent results.\"\"\"\n        trend = label_trend(trending_data)\n\n        # Trend should be valid enum value\n        assert trend.label in list(TrendLabel)\n\n        # RSI should be in valid range\n        assert 0 &lt;= trend.rsi_14 &lt;= 100\n\n        # EMA slope should be reasonable\n        assert -0.1 &lt;= trend.ema_slope &lt;= 0.1  # Within \u00b110%\n\n        # Price vs EMA should be boolean\n        assert isinstance(trend.price_above_ema, bool)\n\n    def test_entry_plan_risk_reward_validation(self, trending_data):\n        \"\"\"Test entry plan risk/reward calculations.\"\"\"\n        trend = label_trend(trending_data)\n        entry = build_entry(trending_data, trend)\n\n        if entry:  # If entry plan was generated\n            # R-multiple should be positive\n            assert entry.r_multiple &gt; 0\n\n            # Entry, stop, and target should be different\n            assert entry.stop_price != entry.entry_price\n            assert entry.take_profit != entry.entry_price\n\n            # Validate long trade logic\n            if entry.side == SignalSide.LONG:\n                assert entry.stop_price &lt; entry.entry_price\n                assert entry.take_profit &gt; entry.entry_price\n\n                # R-multiple calculation verification\n                risk = entry.entry_price - entry.stop_price\n                reward = entry.take_profit - entry.entry_price\n                expected_r = reward / risk\n                assert abs(entry.r_multiple - expected_r) &lt; 0.01\n\n            # Validate short trade logic\n            elif entry.side == SignalSide.SHORT:\n                assert entry.stop_price &gt; entry.entry_price\n                assert entry.take_profit &lt; entry.entry_price\n\n                # R-multiple calculation verification\n                risk = entry.stop_price - entry.entry_price\n                reward = entry.entry_price - entry.take_profit\n                expected_r = reward / risk\n                assert abs(entry.r_multiple - expected_r) &lt; 0.01\n\n    def test_fibonacci_golden_pocket_logic(self, trending_data):\n        \"\"\"Test Fibonacci golden pocket entry logic.\"\"\"\n        from swing_agent.indicators import fibonacci_range\n\n        trend = label_trend(trending_data)\n        fib = fibonacci_range(trending_data, lookback=40)\n\n        # Manually test golden pocket logic\n        current_price = trending_data['close'].iloc[-1]\n\n        if fib.golden_low &lt;= current_price &lt;= fib.golden_high:\n            entry = build_entry(trending_data, trend)\n\n            if entry and \"golden-pocket\" in entry.comment.lower():\n                # Entry should be at current price for golden pocket setup\n                assert abs(entry.entry_price - current_price) &lt; 0.01\n\n                # Fibonacci targets should be set\n                assert entry.fib_golden_low is not None\n                assert entry.fib_golden_high is not None\n</code></pre>"},{"location":"testing/#feature-engineering","title":"Feature Engineering","text":"<pre><code># tests/unit/test_features.py\nimport pytest\nimport numpy as np\nfrom swing_agent.features import build_setup_vector, time_of_day_bucket, vol_regime_from_series\n\nclass TestFeatureEngineering:\n    def test_setup_vector_properties(self, sample_trend, sample_entry):\n        \"\"\"Test feature vector generation properties.\"\"\"\n        vector = build_setup_vector(\n            price=150.0,\n            trend=sample_trend,\n            entry=sample_entry,\n            prev_range_pct=0.02,\n            gap_pct=0.001,\n            atr_pct=0.015,\n            session_bin=1,\n            llm_conf=0.7\n        )\n\n        # Vector should be normalized\n        norm = np.linalg.norm(vector)\n        assert abs(norm - 1.0) &lt; 1e-6\n\n        # Vector should have expected length\n        assert len(vector) == 16  # Current feature count\n\n        # All values should be finite\n        assert np.all(np.isfinite(vector))\n\n        # Values should be in reasonable ranges\n        assert np.all(vector &gt;= -1.0)\n        assert np.all(vector &lt;= 1.0)\n\n    def test_time_of_day_bucketing(self):\n        \"\"\"Test time of day bucket assignment.\"\"\"\n        import pandas as pd\n\n        # Test different times (ET assumed)\n        open_time = pd.Timestamp(\"2024-01-01 09:30:00\", tz=\"America/New_York\")\n        mid_time = pd.Timestamp(\"2024-01-01 13:00:00\", tz=\"America/New_York\")\n        close_time = pd.Timestamp(\"2024-01-01 15:30:00\", tz=\"America/New_York\")\n\n        assert time_of_day_bucket(open_time) == \"open\"\n        assert time_of_day_bucket(mid_time) == \"mid\"\n        assert time_of_day_bucket(close_time) == \"close\"\n\n    def test_volatility_regime_classification(self):\n        \"\"\"Test volatility regime classification.\"\"\"\n        # Create price series with known volatility patterns\n        low_vol_prices = pd.Series(100 + np.random.randn(100) * 0.1)  # Low volatility\n        high_vol_prices = pd.Series(100 + np.random.randn(100) * 2.0)  # High volatility\n\n        # Should classify correctly (though not deterministic)\n        low_regime = vol_regime_from_series(low_vol_prices)\n        high_regime = vol_regime_from_series(high_vol_prices)\n\n        # Regimes should be valid\n        assert low_regime in [\"L\", \"M\", \"H\"]\n        assert high_regime in [\"L\", \"M\", \"H\"]\n</code></pre>"},{"location":"testing/#integration-testing","title":"Integration Testing","text":""},{"location":"testing/#full-agent-workflow","title":"Full Agent Workflow","text":"<pre><code># tests/integration/test_agent.py\nimport pytest\nfrom unittest.mock import patch, MagicMock\nfrom swing_agent.agent import SwingAgent\nfrom swing_agent.models import TrendLabel\n\nclass TestAgentIntegration:\n    @pytest.fixture\n    def mock_agent(self):\n        \"\"\"Create agent with controlled dependencies.\"\"\"\n        return SwingAgent(\n            interval=\"30m\",\n            lookback_days=30,\n            use_llm=False,  # Avoid API calls\n            log_db=\":memory:\",  # In-memory database\n            vec_db=\":memory:\"\n        )\n\n    @patch('swing_agent.data.load_ohlcv')\n    def test_complete_signal_generation(self, mock_load_ohlcv, mock_agent, trending_data):\n        \"\"\"Test complete signal generation pipeline.\"\"\"\n        mock_load_ohlcv.return_value = trending_data\n\n        signal = mock_agent.analyze(\"AAPL\")\n\n        # Basic signal validation\n        assert signal.symbol == \"AAPL\"\n        assert signal.timeframe == \"30m\"\n        assert signal.trend.label in list(TrendLabel)\n        assert 0 &lt;= signal.confidence &lt;= 1\n        assert signal.asof is not None\n\n        # Trend analysis should be consistent\n        if signal.trend.label in [TrendLabel.UP, TrendLabel.STRONG_UP]:\n            assert signal.trend.ema_slope &gt; 0\n            assert signal.trend.price_above_ema\n        elif signal.trend.label in [TrendLabel.DOWN, TrendLabel.STRONG_DOWN]:\n            assert signal.trend.ema_slope &lt; 0\n            assert not signal.trend.price_above_ema\n\n    @patch('swing_agent.data.load_ohlcv')\n    def test_signal_storage_and_retrieval(self, mock_load_ohlcv, mock_agent, trending_data):\n        \"\"\"Test signal database storage.\"\"\"\n        mock_load_ohlcv.return_value = trending_data\n\n        # Generate and store signal\n        signal = mock_agent.analyze(\"AAPL\")\n\n        # Signal should be automatically stored in database\n        # This tests the integration between agent and storage\n        assert signal.symbol == \"AAPL\"\n\n        # Test that database operations don't raise errors\n        # (Detailed database tests in test_database.py)\n\n    def test_vector_store_integration(self, mock_agent):\n        \"\"\"Test vector store operations integration.\"\"\"\n        from swing_agent.vectorstore import add_vector, knn\n        import numpy as np\n\n        # Add test vector\n        test_vector = np.random.randn(16)\n        add_vector(\n            \":memory:\",\n            vid=\"test-1\",\n            ts_utc=\"2024-01-01T10:00:00Z\",\n            symbol=\"TEST\",\n            timeframe=\"30m\",\n            vec=test_vector,\n            realized_r=1.5,\n            exit_reason=\"target\",\n            payload={\"test\": True}\n        )\n\n        # Search for similar vectors\n        results = knn(\":memory:\", test_vector, k=5)\n\n        # Should find the vector we just added\n        assert len(results) &gt;= 1\n</code></pre>"},{"location":"testing/#property-based-testing","title":"Property-Based Testing","text":"<pre><code># tests/property/test_math_properties.py\nfrom hypothesis import given, strategies as st, assume\nimport hypothesis.extra.pandas as pdst\nimport pandas as pd\nimport numpy as np\nfrom swing_agent.indicators import ema, rsi\n\nclass TestMathematicalProperties:\n    @given(\n        prices=pdst.series(\n            elements=st.floats(min_value=1.0, max_value=1000.0, \n                             allow_nan=False, allow_infinity=False),\n            min_size=50,\n            max_size=200\n        ),\n        span=st.integers(min_value=2, max_value=50)\n    )\n    def test_ema_smoothing_property(self, prices, span):\n        \"\"\"EMA should be less volatile than input series.\"\"\"\n        assume(prices.std() &gt; 0)  # Avoid constant series\n\n        ema_result = ema(prices, span)\n\n        # EMA volatility should be &lt;= input volatility\n        input_volatility = prices.pct_change().std()\n        ema_volatility = ema_result.pct_change().std()\n\n        # Allow small numerical errors\n        assert ema_volatility &lt;= input_volatility * 1.05\n\n    @given(\n        prices=pdst.series(\n            elements=st.floats(min_value=1.0, max_value=1000.0,\n                             allow_nan=False, allow_infinity=False),\n            min_size=30,\n            max_size=100\n        ),\n        period=st.integers(min_value=2, max_value=30)\n    )\n    def test_rsi_bounds_property(self, prices, period):\n        \"\"\"RSI must always be between 0 and 100.\"\"\"\n        assume(prices.std() &gt; 0)  # Avoid constant series\n\n        rsi_result = rsi(prices, period)\n        rsi_values = rsi_result.dropna()\n\n        # RSI bounds are strict\n        assert all(0 &lt;= val &lt;= 100 for val in rsi_values)\n\n        # Should produce some non-NaN values\n        assert len(rsi_values) &gt; 0\n\n    @given(\n        r_multiple=st.floats(min_value=0.1, max_value=10.0),\n        entry_price=st.floats(min_value=1.0, max_value=1000.0),\n        side=st.sampled_from([\"long\", \"short\"])\n    )\n    def test_risk_reward_calculation_property(self, r_multiple, entry_price, side):\n        \"\"\"Risk/reward calculations should be consistent.\"\"\"\n        from swing_agent.models import EntryPlan, SignalSide\n\n        # Calculate stop and target based on R-multiple\n        risk_amount = entry_price * 0.02  # 2% risk\n\n        if side == \"long\":\n            stop_price = entry_price - risk_amount\n            target_price = entry_price + (risk_amount * r_multiple)\n\n            # Verify R-multiple calculation\n            actual_risk = entry_price - stop_price\n            actual_reward = target_price - entry_price\n            calculated_r = actual_reward / actual_risk\n\n            assert abs(calculated_r - r_multiple) &lt; 0.01\n\n        else:  # short\n            stop_price = entry_price + risk_amount\n            target_price = entry_price - (risk_amount * r_multiple)\n\n            # Verify R-multiple calculation\n            actual_risk = stop_price - entry_price\n            actual_reward = entry_price - target_price\n            calculated_r = actual_reward / actual_risk\n\n            assert abs(calculated_r - r_multiple) &lt; 0.01\n</code></pre>"},{"location":"testing/#performance-testing","title":"Performance Testing","text":"<pre><code># tests/performance/test_benchmarks.py\nimport time\nimport pytest\nimport numpy as np\nfrom swing_agent.vectorstore import knn, add_vector\nfrom swing_agent.agent import SwingAgent\n\nclass TestPerformanceBenchmarks:\n    def test_vector_search_speed(self):\n        \"\"\"Vector search should complete within reasonable time.\"\"\"\n        # Create larger test dataset\n        n_vectors = 1000\n        vector_dim = 16\n\n        # Add vectors to database\n        db_path = \":memory:\"\n        for i in range(n_vectors):\n            test_vector = np.random.randn(vector_dim)\n            add_vector(\n                db_path,\n                vid=f\"test-{i}\",\n                ts_utc=\"2024-01-01T10:00:00Z\",\n                symbol=\"TEST\",\n                timeframe=\"30m\",\n                vec=test_vector,\n                realized_r=np.random.randn(),\n                exit_reason=\"test\",\n                payload={}\n            )\n\n        # Benchmark search speed\n        query_vector = np.random.randn(vector_dim)\n\n        start_time = time.time()\n        results = knn(db_path, query_vector, k=10)\n        elapsed = time.time() - start_time\n\n        # Should complete within 1 second for 1000 vectors\n        assert elapsed &lt; 1.0\n        assert len(results) &lt;= 10\n\n    @pytest.mark.slow\n    def test_signal_generation_speed(self, trending_data):\n        \"\"\"Signal generation should complete quickly.\"\"\"\n        agent = SwingAgent(use_llm=False)  # Skip LLM for speed\n\n        start_time = time.time()\n        signal = agent.analyze_df(\"TEST\", trending_data)\n        elapsed = time.time() - start_time\n\n        # Should complete within reasonable time\n        assert elapsed &lt; 5.0  # 5 seconds max\n        assert signal is not None\n</code></pre>"},{"location":"testing/#test-fixtures-and-utilities","title":"Test Fixtures and Utilities","text":"<pre><code># tests/fixtures/sample_data.py\nimport pytest\nimport pandas as pd\nimport numpy as np\nfrom swing_agent.models import TrendState, EntryPlan, TrendLabel, SignalSide\n\n@pytest.fixture\ndef trending_data():\n    \"\"\"Generate realistic trending OHLCV data.\"\"\"\n    dates = pd.date_range('2024-01-01', periods=100, freq='1h')\n    np.random.seed(42)\n\n    # Generate trending price series\n    trend = np.linspace(100, 120, 100)  # 20% uptrend\n    noise = np.random.randn(100) * 0.5\n    prices = trend + noise\n\n    return pd.DataFrame({\n        'open': prices * (1 + np.random.randn(100) * 0.001),\n        'high': prices * (1 + np.abs(np.random.randn(100)) * 0.002),\n        'low': prices * (1 - np.abs(np.random.randn(100)) * 0.002),\n        'close': prices,\n        'volume': np.random.randint(1000000, 10000000, 100)\n    }, index=dates)\n\n@pytest.fixture\ndef sideways_data():\n    \"\"\"Generate sideways/consolidating OHLCV data.\"\"\"\n    dates = pd.date_range('2024-01-01', periods=100, freq='1h')\n    np.random.seed(123)\n\n    # Generate sideways price series\n    base_price = 100\n    noise = np.random.randn(100) * 0.5\n    prices = base_price + noise\n\n    return pd.DataFrame({\n        'open': prices * (1 + np.random.randn(100) * 0.001),\n        'high': prices * (1 + np.abs(np.random.randn(100)) * 0.002),\n        'low': prices * (1 - np.abs(np.random.randn(100)) * 0.002),\n        'close': prices,\n        'volume': np.random.randint(1000000, 10000000, 100)\n    }, index=dates)\n\n@pytest.fixture\ndef sample_trend():\n    \"\"\"Sample TrendState for testing.\"\"\"\n    return TrendState(\n        label=TrendLabel.UP,\n        ema_slope=0.015,\n        price_above_ema=True,\n        rsi_14=65.0\n    )\n\n@pytest.fixture\ndef sample_entry():\n    \"\"\"Sample EntryPlan for testing.\"\"\"\n    return EntryPlan(\n        side=SignalSide.LONG,\n        entry_price=150.0,\n        stop_price=147.0,\n        take_profit=156.0,\n        r_multiple=2.0,\n        comment=\"Test entry\",\n        fib_golden_low=148.0,\n        fib_golden_high=150.0,\n        fib_target_1=155.0,\n        fib_target_2=160.0\n    )\n</code></pre>"},{"location":"testing/#running-tests","title":"Running Tests","text":""},{"location":"testing/#basic-test-execution","title":"Basic Test Execution","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=swing_agent --cov-report=html --cov-report=term\n\n# Run specific test categories\npytest tests/unit/           # Unit tests only\npytest tests/integration/    # Integration tests only\npytest tests/property/       # Property-based tests\n\n# Run performance tests (marked as slow)\npytest -m slow\n\n# Exclude slow tests\npytest -m \"not slow\"\n\n# Run tests with specific markers\npytest -m \"unit\"\npytest -m \"integration\"\n\n# Verbose output with test names\npytest -v\n\n# Stop on first failure\npytest -x\n\n# Run tests matching pattern\npytest -k \"test_fibonacci\"\n\n# Parallel execution (with pytest-xdist)\npytest -n auto\n</code></pre>"},{"location":"testing/#test-configuration","title":"Test Configuration","text":"<pre><code># tests/conftest.py\nimport pytest\nimport tempfile\nimport os\nfrom pathlib import Path\n\ndef pytest_configure(config):\n    \"\"\"Configure pytest with custom markers.\"\"\"\n    config.addinivalue_line(\"markers\", \"unit: Unit tests\")\n    config.addinivalue_line(\"markers\", \"integration: Integration tests\")  \n    config.addinivalue_line(\"markers\", \"slow: Slow tests\")\n    config.addinivalue_line(\"markers\", \"property: Property-based tests\")\n\n@pytest.fixture(scope=\"session\")\ndef temp_dir():\n    \"\"\"Create temporary directory for test files.\"\"\"\n    with tempfile.TemporaryDirectory() as temp_dir:\n        yield Path(temp_dir)\n\n@pytest.fixture(autouse=True)\ndef setup_test_environment(monkeypatch):\n    \"\"\"Set up clean test environment.\"\"\"\n    # Don't use real API keys in tests\n    monkeypatch.setenv(\"OPENAI_API_KEY\", \"test-key\")\n    monkeypatch.setenv(\"SWING_LLM_MODEL\", \"test-model\")\n\n    # Use test database paths\n    monkeypatch.setenv(\"SWING_DATABASE_URL\", \"sqlite:///:memory:\")\n</code></pre> <p>This comprehensive testing strategy ensures SwingAgent maintains high quality and reliability across all components while providing fast feedback during development.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>Common issues and solutions for the SwingAgent v1.6.1 system.</p>"},{"location":"troubleshooting/#database-issues","title":"Database Issues","text":""},{"location":"troubleshooting/#database-connection-problems","title":"Database Connection Problems","text":"<p>Problem: Cannot connect to database or database not found.</p> <pre><code>sqlalchemy.exc.OperationalError: no such table: signals\n</code></pre> <p>Solutions: <pre><code># Test database connection and configuration\npython scripts/db_info.py --info\npython scripts/db_info.py --test\n\n# Initialize database tables if missing  \npython scripts/db_info.py --init\n\n# Check environment variables\necho $SWING_DATABASE_URL\necho $SWING_DB_TYPE\n</code></pre></p>"},{"location":"troubleshooting/#migration-issues","title":"Migration Issues","text":"<p>Problem: Error migrating from legacy separate databases.</p> <p>Solutions: <pre><code># Check if legacy databases exist\nls -la data/signals.sqlite data/vec_store.sqlite\n\n# Migrate with explicit paths\npython -m swing_agent.migrate \\\n  --signals-db data/signals.sqlite \\\n  --vectors-db data/vec_store.sqlite\n\n# Check migration progress\npython scripts/db_info.py --info\n</code></pre></p>"},{"location":"troubleshooting/#postgresql-connection-issues","title":"PostgreSQL Connection Issues","text":"<p>Problem: Cannot connect to PostgreSQL database.</p> <p>Solutions: <pre><code># Install PostgreSQL dependencies\npip install -e \".[postgresql]\"\n\n# Test connection manually\npython -c \"\nimport psycopg2\nconn = psycopg2.connect('postgresql://user:pass@host:5432/swing_agent')\nprint('Connection successful')\nconn.close()\n\"\n\n# Check PostgreSQL service\nsudo systemctl status postgresql\n</code></pre></p>"},{"location":"troubleshooting/#cnpg-kubernetes-issues","title":"CNPG Kubernetes Issues","text":"<p>Problem: Cannot connect to CloudNativePG cluster.</p> <p>Solutions: <pre><code># Test CNPG configuration\npython scripts/test_cnpg.py\n\n# Check cluster status\nkubectl get clusters -n swing-agent\nkubectl describe cluster swing-postgres -n swing-agent\n\n# Verify service names\nkubectl get svc -n swing-agent | grep postgres\n\n# Check credentials secret\nkubectl get secret swing-postgres-credentials -n swing-agent -o yaml\n</code></pre></p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#python-version-compatibility","title":"Python Version Compatibility","text":"<p>Problem: <code>ImportError</code> or syntax errors during installation.</p> <pre><code>python -c \"import sys; print(sys.version)\"\n# Should show Python 3.10 or higher\n</code></pre> <p>Solutions: <pre><code># Install Python 3.10+\nsudo apt install python3.10 python3.10-venv python3.10-dev\n\n# Create virtual environment with correct Python\npython3.10 -m venv .venv\nsource .venv/bin/activate\n\n# Verify version in virtual environment\npython --version\n</code></pre></p>"},{"location":"troubleshooting/#dependency-installation-failures","title":"Dependency Installation Failures","text":"<p>Problem: Package installation errors, especially with numpy/pandas.</p> <p>Solutions: <pre><code># Update pip first\npip install --upgrade pip setuptools wheel\n\n# Install system dependencies (Ubuntu/Debian)\nsudo apt install build-essential python3-dev\n\n# Install packages individually if bulk install fails\npip install numpy&gt;=1.26\npip install pandas&gt;=2.1\npip install pydantic&gt;=2.6\npip install yfinance&gt;=0.2.40\npip install -e .\n</code></pre></p>"},{"location":"troubleshooting/#networkproxy-issues","title":"Network/Proxy Issues","text":"<p>Problem: Cannot reach PyPI or external APIs.</p> <p>Solutions: <pre><code># Configure pip for proxy\npip install --proxy http://proxy.company.com:8080 -e .\n\n# Use alternative PyPI index\npip install -i https://pypi.org/simple/ -e .\n\n# Test network connectivity\ncurl -I https://pypi.org\ncurl -I https://query1.finance.yahoo.com\ncurl -I https://api.openai.com\n</code></pre></p>"},{"location":"troubleshooting/#data-fetching-issues","title":"Data Fetching Issues","text":""},{"location":"troubleshooting/#yahoo-finance-api-problems","title":"Yahoo Finance API Problems","text":"<p>Problem: <code>RuntimeError: No data for SYMBOL @ interval</code></p> <p>Diagnosis: <pre><code>import yfinance as yf\n\n# Test direct yfinance access\nticker = yf.Ticker(\"AAPL\")\ninfo = ticker.info\nprint(f\"Symbol exists: {info.get('symbol', 'Not found')}\")\n\n# Test data download\ndata = yf.download(\"AAPL\", period=\"5d\", interval=\"30m\")\nprint(f\"Data shape: {data.shape}\")\n</code></pre></p> <p>Solutions: <pre><code># 1. Check symbol validity\nvalid_symbols = [\"AAPL\", \"MSFT\", \"GOOGL\", \"TSLA\"]\n# Invalid: \"INVALID\", delisted stocks, wrong exchanges\n\n# 2. Use proper timeframe combinations\nvalid_combinations = {\n    \"15m\": \"5d\",    # Max 60 days\n    \"30m\": \"60d\",   # Max 60 days  \n    \"1h\": \"730d\",   # Max 2 years\n    \"1d\": \"max\"     # No limit\n}\n\n# 3. Handle market holidays\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\nend = datetime.now()\nstart = end - timedelta(days=7)  # Use longer period for holidays\n\n# 4. Add retry logic\nimport time\ndef fetch_with_retry(symbol, interval, retries=3):\n    for i in range(retries):\n        try:\n            return load_ohlcv(symbol, interval, 30)\n        except Exception as e:\n            if i == retries - 1:\n                raise e\n            time.sleep(5 * (i + 1))  # Exponential backoff\n</code></pre></p>"},{"location":"troubleshooting/#missing-ohlcv-columns","title":"Missing OHLCV Columns","text":"<p>Problem: <code>RuntimeError: Missing column 'X' in data</code></p> <p>Solutions: <pre><code># Debug missing columns\ndf = yf.download(\"AAPL\", period=\"5d\")\nprint(f\"Columns: {list(df.columns)}\")\n\n# Handle multi-index columns\nif isinstance(df.columns, pd.MultiIndex):\n    df.columns = df.columns.droplevel(1)\n\n# Rename columns to lowercase\ndf.columns = [col.lower().replace(' ', '_') for col in df.columns]\n\n# Verify required columns\nrequired = ['open', 'high', 'low', 'close', 'volume']\nmissing = [col for col in required if col not in df.columns]\nif missing:\n    print(f\"Missing columns: {missing}\")\n</code></pre></p>"},{"location":"troubleshooting/#timezone-issues","title":"Timezone Issues","text":"<p>Problem: Inconsistent timestamps or timezone errors.</p> <p>Solutions: <pre><code>import pandas as pd\nfrom datetime import timezone\n\n# Ensure UTC timezone\ndf.index = pd.to_datetime(df.index, utc=True)\n\n# Convert from market timezone\nmarket_tz = \"US/Eastern\"\ndf.index = df.index.tz_localize(market_tz).tz_convert('UTC')\n\n# Remove timezone info if needed\ndf.index = df.index.tz_localize(None)\n</code></pre></p>"},{"location":"troubleshooting/#database-issues_1","title":"Database Issues","text":""},{"location":"troubleshooting/#sqlite-permission-errors","title":"SQLite Permission Errors","text":"<p>Problem: <code>sqlite3.OperationalError: unable to open database file</code></p> <p>Solutions: <pre><code># Check file permissions\nls -la data/\nchmod 755 data/\nchmod 644 data/*.sqlite\n\n# Check parent directory permissions\nmkdir -p data/\ntouch data/test.sqlite\nrm data/test.sqlite\n\n# Use absolute paths\nexport SWING_SIGNALS_DB=\"/full/path/to/signals.sqlite\"\n</code></pre></p>"},{"location":"troubleshooting/#database-corruption","title":"Database Corruption","text":"<p>Problem: <code>sqlite3.DatabaseError: database disk image is malformed</code></p> <p>Solutions: <pre><code># Check database integrity\nsqlite3 data/signals.sqlite \"PRAGMA integrity_check;\"\n\n# Attempt repair\nsqlite3 data/signals.sqlite \".recover\" | sqlite3 data/signals_recovered.sqlite\n\n# Backup before recovery\ncp data/signals.sqlite data/signals.backup\n\n# Rebuild from scratch if necessary\nrm data/signals.sqlite\npython -c \"from swing_agent.storage import record_signal; print('Database recreated')\"\n</code></pre></p>"},{"location":"troubleshooting/#database-lock-errors","title":"Database Lock Errors","text":"<p>Problem: <code>sqlite3.OperationalError: database is locked</code></p> <p>Solutions: <pre><code># Use connection with timeout\nimport sqlite3\nconn = sqlite3.connect(\"data/signals.sqlite\", timeout=30.0)\n\n# Check for hung processes\nps aux | grep python | grep swing\n\n# Kill hung processes\npkill -f \"python.*swing\"\n\n# Use WAL mode for better concurrency\nsqlite3 data/signals.sqlite \"PRAGMA journal_mode=WAL;\"\n</code></pre></p>"},{"location":"troubleshooting/#llm-integration-issues","title":"LLM Integration Issues","text":""},{"location":"troubleshooting/#api-key-problems","title":"API Key Problems","text":"<p>Problem: <code>openai.AuthenticationError: Incorrect API key</code></p> <p>Solutions: <pre><code># Verify environment variable\necho $OPENAI_API_KEY\n# Should start with 'sk-'\n\n# Test API key directly\ncurl -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n     https://api.openai.com/v1/models\n\n# Load from file if needed\nexport OPENAI_API_KEY=$(cat ~/.openai_key)\n</code></pre></p>"},{"location":"troubleshooting/#rate-limiting","title":"Rate Limiting","text":"<p>Problem: <code>openai.RateLimitError: Rate limit exceeded</code></p> <p>Solutions: <pre><code>import time\nimport openai\nfrom functools import wraps\n\ndef retry_with_backoff(retries=3, backoff_in_seconds=1):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            for i in range(retries):\n                try:\n                    return func(*args, **kwargs)\n                except openai.RateLimitError as e:\n                    if i == retries - 1:\n                        raise e\n                    wait_time = backoff_in_seconds * (2 ** i)\n                    time.sleep(wait_time)\n        return wrapper\n    return decorator\n\n# Apply to LLM functions\n@retry_with_backoff(retries=3, backoff_in_seconds=5)\ndef llm_call_with_retry(**kwargs):\n    return llm_extra_prediction(**kwargs)\n</code></pre></p>"},{"location":"troubleshooting/#model-not-found","title":"Model Not Found","text":"<p>Problem: <code>openai.NotFoundError: The model 'gpt-X' does not exist</code></p> <p>Solutions: <pre><code># Check available models\ncurl -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n     https://api.openai.com/v1/models | jq '.data[].id' | grep gpt\n\n# Use supported models\nexport SWING_LLM_MODEL=\"gpt-4o-mini\"  # Most cost-effective\nexport SWING_LLM_MODEL=\"gpt-4o\"       # Best performance\nexport SWING_LLM_MODEL=\"gpt-3.5-turbo\" # Fastest\n</code></pre></p>"},{"location":"troubleshooting/#llm-response-parsing-errors","title":"LLM Response Parsing Errors","text":"<p>Problem: <code>pydantic.ValidationError</code> when parsing LLM responses.</p> <p>Solutions: <pre><code># Add fallback parsing\ndef safe_llm_prediction(**features):\n    try:\n        return llm_extra_prediction(**features)\n    except Exception as e:\n        print(f\"LLM error: {e}\")\n        # Return default response\n        return LlmVote(\n            trend_label=\"sideways\",\n            entry_bias=\"none\",\n            confidence=0.0,\n            rationale=\"LLM unavailable\"\n        )\n\n# Validate JSON before parsing\nimport json\ndef validate_llm_response(response_text):\n    try:\n        data = json.loads(response_text)\n        return LlmVote(**data)\n    except (json.JSONDecodeError, ValueError) as e:\n        print(f\"Invalid LLM response: {e}\")\n        return None\n</code></pre></p>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-signal-generation","title":"Slow Signal Generation","text":"<p>Problem: Signal generation takes too long (&gt;30 seconds).</p> <p>Diagnosis: <pre><code>import time\nimport cProfile\n\ndef profile_analysis():\n    start = time.time()\n\n    # Profile each component\n    data_start = time.time()\n    df = load_ohlcv(\"AAPL\", \"30m\", 30)\n    print(f\"Data fetch: {time.time() - data_start:.2f}s\")\n\n    analysis_start = time.time()\n    agent = SwingAgent(use_llm=False)  # Test without LLM first\n    signal = agent.analyze_df(\"AAPL\", df)\n    print(f\"Analysis: {time.time() - analysis_start:.2f}s\")\n\n    print(f\"Total: {time.time() - start:.2f}s\")\n\n# Use cProfile for detailed analysis\ncProfile.run('agent.analyze(\"AAPL\")', 'profile_output.prof')\n</code></pre></p> <p>Solutions: <pre><code># 1. Reduce lookback period\nagent = SwingAgent(lookback_days=15)  # vs default 30\n\n# 2. Disable LLM for speed testing\nagent = SwingAgent(use_llm=False)\n\n# 3. Cache data for multiple symbols\ndata_cache = {}\nsymbols = [\"AAPL\", \"MSFT\", \"GOOGL\"]\nfor symbol in symbols:\n    if symbol not in data_cache:\n        data_cache[symbol] = load_ohlcv(symbol, \"30m\", 30)\n    signal = agent.analyze_df(symbol, data_cache[symbol])\n\n# 4. Use smaller KNN neighborhoods\n# Modify vectorstore.py knn() function default k=25 instead of 50\n</code></pre></p>"},{"location":"troubleshooting/#memory-usage-issues","title":"Memory Usage Issues","text":"<p>Problem: High memory usage or out-of-memory errors.</p> <p>Solutions: <pre><code># Monitor memory usage\nimport psutil\nimport os\n\ndef print_memory_usage(label):\n    process = psutil.Process(os.getpid())\n    memory_mb = process.memory_info().rss / 1024 / 1024\n    print(f\"{label}: {memory_mb:.1f} MB\")\n\nprint_memory_usage(\"Start\")\ndf = load_ohlcv(\"AAPL\", \"30m\", 30)\nprint_memory_usage(\"After data load\")\n\n# Optimize data types\ndf = df.astype({\n    'open': 'float32',\n    'high': 'float32', \n    'low': 'float32',\n    'close': 'float32',\n    'volume': 'int32'\n})\n\n# Clear variables when done\ndel df\nimport gc\ngc.collect()\n</code></pre></p>"},{"location":"troubleshooting/#vector-store-performance","title":"Vector Store Performance","text":"<p>Problem: Slow KNN searches in vector store.</p> <p>Solutions: <pre><code># 1. Add indexes to vector store\nimport sqlite3\nconn = sqlite3.connect(\"data/vec_store.sqlite\")\nconn.execute(\"CREATE INDEX IF NOT EXISTS idx_vec_symbol_ts ON vec_store(symbol, ts_utc);\")\nconn.close()\n\n# 2. Limit search scope\nneighbors = knn(\n    db_path=\"data/vec_store.sqlite\",\n    query_vec=vector,\n    k=25,  # Reduce from default 50\n    symbol=\"AAPL\"  # Symbol-specific search\n)\n\n# 3. Filter by time period\ndef recent_knn(db_path, query_vec, k=50, days_back=365):\n    cutoff_date = (datetime.now() - timedelta(days=days_back)).isoformat()\n    # Add WHERE clause to filter by ts_utc &gt; cutoff_date\n</code></pre></p>"},{"location":"troubleshooting/#runtime-errors","title":"Runtime Errors","text":""},{"location":"troubleshooting/#import-errors","title":"Import Errors","text":"<p>Problem: <code>ModuleNotFoundError: No module named 'swing_agent'</code></p> <p>Solutions: <pre><code># Check Python path\npython -c \"import sys; print(sys.path)\"\n\n# Add src directory to Python path\nexport PYTHONPATH=\"${PYTHONPATH}:/path/to/ITL.SwingAgent/src\"\n\n# Or install in development mode\npip install -e .\n\n# Verify installation\npython -c \"import swing_agent; print(swing_agent.__file__)\"\n</code></pre></p>"},{"location":"troubleshooting/#attribute-errors","title":"Attribute Errors","text":"<p>Problem: <code>AttributeError: 'DataFrame' object has no attribute 'X'</code></p> <p>Solutions: <pre><code># Debug DataFrame structure\nprint(f\"DataFrame columns: {list(df.columns)}\")\nprint(f\"DataFrame index: {df.index}\")\nprint(f\"DataFrame shape: {df.shape}\")\nprint(f\"DataFrame dtypes:\\n{df.dtypes}\")\n\n# Check for empty DataFrames\nif df.empty:\n    print(\"DataFrame is empty!\")\n\n# Verify required columns\nrequired_columns = ['open', 'high', 'low', 'close', 'volume']\nmissing = [col for col in required_columns if col not in df.columns]\nif missing:\n    print(f\"Missing columns: {missing}\")\n</code></pre></p>"},{"location":"troubleshooting/#index-errors","title":"Index Errors","text":"<p>Problem: <code>IndexError: single positional indexer is out-of-bounds</code></p> <p>Solutions: <pre><code># Check DataFrame length before indexing\nif len(df) &lt; 50:\n    print(f\"Warning: DataFrame too short ({len(df)} rows)\")\n\n# Use safe indexing\ndef safe_iloc(series, index, default=None):\n    try:\n        return series.iloc[index]\n    except (IndexError, KeyError):\n        return default\n\n# Example usage\nlast_close = safe_iloc(df['close'], -1, 0.0)\nprev_close = safe_iloc(df['close'], -2, 0.0)\n</code></pre></p>"},{"location":"troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/#environment-variables-not-loading","title":"Environment Variables Not Loading","text":"<p>Problem: Environment variables not recognized.</p> <p>Solutions: <pre><code># Check current environment\nenv | grep SWING\nenv | grep OPENAI\n\n# Source environment file\nsource ~/.bashrc\nsource .env\n\n# Set variables for current session\nexport OPENAI_API_KEY=\"sk-your-key\"\nexport SWING_LLM_MODEL=\"gpt-4o-mini\"\n\n# Verify in Python\npython -c \"import os; print(os.getenv('OPENAI_API_KEY', 'Not set'))\"\n</code></pre></p>"},{"location":"troubleshooting/#path-issues","title":"Path Issues","text":"<p>Problem: Files not found or incorrect paths.</p> <p>Solutions: <pre><code>import os\nfrom pathlib import Path\n\n# Use absolute paths\nproject_root = Path(__file__).parent.parent\ndata_dir = project_root / \"data\"\ndata_dir.mkdir(exist_ok=True)\n\nsignals_db = data_dir / \"signals.sqlite\"\nvectors_db = data_dir / \"vec_store.sqlite\"\n\n# Verify paths exist\nprint(f\"Project root: {project_root}\")\nprint(f\"Data directory exists: {data_dir.exists()}\")\nprint(f\"Signals DB: {signals_db}\")\n</code></pre></p>"},{"location":"troubleshooting/#testing-and-validation","title":"Testing and Validation","text":""},{"location":"troubleshooting/#minimal-test-script","title":"Minimal Test Script","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nMinimal test script to validate SwingAgent installation and basic functionality.\n\"\"\"\n\ndef test_imports():\n    \"\"\"Test all required imports.\"\"\"\n    try:\n        import swing_agent\n        from swing_agent.agent import SwingAgent\n        from swing_agent.data import load_ohlcv\n        from swing_agent.strategy import label_trend, build_entry\n        from swing_agent.indicators import ema, rsi, atr\n        print(\"\u2713 All imports successful\")\n        return True\n    except Exception as e:\n        print(f\"\u2717 Import error: {e}\")\n        return False\n\ndef test_data_fetch():\n    \"\"\"Test data fetching.\"\"\"\n    try:\n        from swing_agent.data import load_ohlcv\n        df = load_ohlcv(\"AAPL\", \"1d\", 5)  # 5 days of daily data\n        print(f\"\u2713 Data fetch successful: {df.shape}\")\n        return True\n    except Exception as e:\n        print(f\"\u2717 Data fetch error: {e}\")\n        return False\n\ndef test_technical_analysis():\n    \"\"\"Test technical indicators.\"\"\"\n    try:\n        from swing_agent.data import load_ohlcv\n        from swing_agent.strategy import label_trend, build_entry\n\n        df = load_ohlcv(\"AAPL\", \"1d\", 30)\n        trend = label_trend(df)\n        entry = build_entry(df, trend)\n\n        print(f\"\u2713 Technical analysis successful\")\n        print(f\"  Trend: {trend.label}, RSI: {trend.rsi_14:.1f}\")\n        print(f\"  Entry: {entry.side if entry else 'None'}\")\n        return True\n    except Exception as e:\n        print(f\"\u2717 Technical analysis error: {e}\")\n        return False\n\ndef test_agent_basic():\n    \"\"\"Test basic agent functionality without LLM.\"\"\"\n    try:\n        from swing_agent.agent import SwingAgent\n\n        agent = SwingAgent(\n            interval=\"1d\",\n            lookback_days=30,\n            use_llm=False,  # Skip LLM for basic test\n            log_db=None,\n            vec_db=None\n        )\n\n        signal = agent.analyze(\"AAPL\")\n        print(f\"\u2713 Agent analysis successful\")\n        print(f\"  Symbol: {signal.symbol}\")\n        print(f\"  Trend: {signal.trend.label}\")\n        print(f\"  Confidence: {signal.confidence}\")\n        return True\n    except Exception as e:\n        print(f\"\u2717 Agent analysis error: {e}\")\n        return False\n\ndef test_llm_optional():\n    \"\"\"Test LLM functionality if API key available.\"\"\"\n    import os\n    if not os.getenv(\"OPENAI_API_KEY\"):\n        print(\"~ LLM test skipped (no API key)\")\n        return True\n\n    try:\n        from swing_agent.llm_predictor import llm_extra_prediction\n\n        vote = llm_extra_prediction(\n            symbol=\"AAPL\",\n            price=150.0,\n            trend_label=\"up\",\n            rsi_14=60.0\n        )\n        print(f\"\u2713 LLM test successful\")\n        print(f\"  Trend: {vote.trend_label}\")\n        print(f\"  Confidence: {vote.confidence}\")\n        return True\n    except Exception as e:\n        print(f\"\u2717 LLM test error: {e}\")\n        return False\n\ndef main():\n    \"\"\"Run all tests.\"\"\"\n    print(\"SwingAgent System Test\")\n    print(\"=\" * 30)\n\n    tests = [\n        test_imports,\n        test_data_fetch,\n        test_technical_analysis,\n        test_agent_basic,\n        test_llm_optional\n    ]\n\n    results = []\n    for test in tests:\n        try:\n            result = test()\n            results.append(result)\n        except Exception as e:\n            print(f\"\u2717 Test {test.__name__} failed: {e}\")\n            results.append(False)\n        print()\n\n    passed = sum(results)\n    total = len(results)\n\n    print(f\"Test Results: {passed}/{total} passed\")\n\n    if passed == total:\n        print(\"\ud83c\udf89 All tests passed! SwingAgent is ready to use.\")\n        return 0\n    else:\n        print(\"\u274c Some tests failed. Check the errors above.\")\n        return 1\n\nif __name__ == \"__main__\":\n    exit(main())\n</code></pre>"},{"location":"troubleshooting/#run-the-test","title":"Run the Test","text":"<pre><code># Save as test_system.py and run\npython test_system.py\n\n# Expected output:\n# SwingAgent System Test\n# ==============================\n# \u2713 All imports successful\n# \u2713 Data fetch successful: (5, 5)\n# \u2713 Technical analysis successful\n#   Trend: up, RSI: 62.3\n#   Entry: long\n# \u2713 Agent analysis successful\n#   Symbol: AAPL\n#   Trend: up\n#   Confidence: 0.72\n# \u2713 LLM test successful\n#   Trend: up\n#   Confidence: 0.8\n# \n# Test Results: 5/5 passed\n# \ud83c\udf89 All tests passed! SwingAgent is ready to use.\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/#debug-information-collection","title":"Debug Information Collection","text":"<pre><code>def collect_debug_info():\n    \"\"\"Collect system information for debugging.\"\"\"\n    import sys\n    import platform\n    import pandas as pd\n    import numpy as np\n\n    info = {\n        \"Python version\": sys.version,\n        \"Platform\": platform.platform(),\n        \"Pandas version\": pd.__version__,\n        \"Numpy version\": np.__version__,\n        \"Working directory\": os.getcwd(),\n        \"Python path\": sys.path[:3]  # First 3 entries\n    }\n\n    # Environment variables\n    env_vars = [\"OPENAI_API_KEY\", \"SWING_LLM_MODEL\", \"PYTHONPATH\"]\n    for var in env_vars:\n        value = os.getenv(var, \"Not set\")\n        if \"API_KEY\" in var and value != \"Not set\":\n            value = f\"{value[:8]}...\"  # Hide most of API key\n        info[var] = value\n\n    print(\"Debug Information:\")\n    print(\"=\" * 50)\n    for key, value in info.items():\n        print(f\"{key}: {value}\")\n\n# Run when reporting issues\ncollect_debug_info()\n</code></pre>"},{"location":"troubleshooting/#additional-troubleshooting-scenarios","title":"Additional Troubleshooting Scenarios","text":""},{"location":"troubleshooting/#database-migration-issues","title":"Database Migration Issues","text":"<p>Problem: Error migrating from separate SQLite files to centralized database.</p> <pre><code>Error: duplicate column name: id\n</code></pre> <p>Solutions: <pre><code># Check current database schema\npython -c \"\nfrom swing_agent.database import get_session\nwith get_session() as session:\n    result = session.execute('PRAGMA table_info(signals)').fetchall()\n    print('Signals table columns:', result)\n\"\n\n# If migration fails, backup and recreate\nmv data/swing_agent.sqlite data/swing_agent_backup.sqlite\npython -m swing_agent.migrate --data-dir data/ --force-recreate\n</code></pre></p>"},{"location":"troubleshooting/#vector-store-performance-issues","title":"Vector Store Performance Issues","text":"<p>Problem: Slow vector similarity search with large datasets.</p> <p>Solutions: <pre><code># Check vector store size\nfrom swing_agent.vectorstore import get_vector_count\ncount = get_vector_count(\"data/swing_agent.sqlite\")\nprint(f\"Vector count: {count}\")\n\n# If &gt;10,000 vectors, consider pruning old vectors\nfrom swing_agent.vectorstore import prune_old_vectors\nprune_old_vectors(\"data/swing_agent.sqlite\", keep_days=365)\n\n# Or rebuild with performance indexes\npython scripts/backfill_vector_store.py --rebuild-indexes\n</code></pre></p>"},{"location":"troubleshooting/#configuration-conflicts","title":"Configuration Conflicts","text":"<p>Problem: Environment variables not taking effect.</p> <p>Solutions: <pre><code># Check environment variable precedence\npython -c \"\nimport os\nfrom swing_agent.database import get_database_config\nconfig = get_database_config()\nprint('Database URL:', config.database_url)\nprint('Environment SWING_DATABASE_URL:', os.getenv('SWING_DATABASE_URL'))\n\"\n\n# Clear any cached configurations\nrm -rf __pycache__\nrm -rf src/swing_agent/__pycache__\n</code></pre></p>"},{"location":"troubleshooting/#memory-usage-issues_1","title":"Memory Usage Issues","text":"<p>Problem: High memory usage during backtesting.</p> <p>Solutions: <pre><code># Monitor memory usage\nimport psutil\nimport os\n\ndef monitor_memory():\n    process = psutil.Process(os.getpid())\n    memory_mb = process.memory_info().rss / 1024 / 1024\n    print(f\"Memory usage: {memory_mb:.1f} MB\")\n\n# Reduce batch size for large backtests\npython scripts/backtest_generate_signals.py --batch-size 100 --symbol AAPL\n</code></pre></p>"},{"location":"troubleshooting/#llm-rate-limiting","title":"LLM Rate Limiting","text":"<p>Problem: OpenAI API rate limits during batch processing.</p> <p>Solutions: <pre><code># Add rate limiting\nimport time\nfrom functools import wraps\n\ndef rate_limit(calls_per_minute=60):\n    def decorator(func):\n        last_called = [0.0]\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            elapsed = time.time() - last_called[0]\n            left_to_wait = 60.0 / calls_per_minute - elapsed\n            if left_to_wait &gt; 0:\n                time.sleep(left_to_wait)\n            ret = func(*args, **kwargs)\n            last_called[0] = time.time()\n            return ret\n        return wrapper\n    return decorator\n\n# Apply to LLM functions\n@rate_limit(calls_per_minute=30)\ndef llm_with_rate_limit(**features):\n    return llm_extra_prediction(**features)\n</code></pre></p>"},{"location":"troubleshooting/#development-troubleshooting","title":"Development Troubleshooting","text":""},{"location":"troubleshooting/#ide-setup-issues","title":"IDE Setup Issues","text":"<p>Problem: VSCode/PyCharm not recognizing swing_agent imports.</p> <p>Solutions: <pre><code># Install in development mode\npip install -e .\n\n# Set Python interpreter to virtual environment\n# VSCode: Ctrl+Shift+P -&gt; \"Python: Select Interpreter\"\n# PyCharm: File -&gt; Settings -&gt; Project -&gt; Python Interpreter\n\n# Add src to Python path in IDE settings\nexport PYTHONPATH=\"${PYTHONPATH}:$(pwd)/src\"\n</code></pre></p>"},{"location":"troubleshooting/#testing-framework-issues","title":"Testing Framework Issues","text":"<p>Problem: Tests not discovering or running properly.</p> <p>Solutions: <pre><code># Ensure pytest is installed\npip install pytest pytest-cov\n\n# Run from project root\ncd /path/to/ITL.SwingAgent\npytest tests/\n\n# Check test discovery\npytest --collect-only\n\n# If modules not found, install package\npip install -e .\n</code></pre></p>"},{"location":"troubleshooting/#git-and-version-control","title":"Git and Version Control","text":"<p>Problem: Large database files in git history.</p> <p>Solutions: <pre><code># Add to .gitignore if not already there\necho \"data/*.sqlite\" &gt;&gt; .gitignore\necho \"logs/\" &gt;&gt; .gitignore\necho \"__pycache__/\" &gt;&gt; .gitignore\n\n# Remove from git history (careful!)\ngit filter-branch --force --index-filter \\\n'git rm --cached --ignore-unmatch data/*.sqlite' \\\n--prune-empty --tag-name-filter cat -- --all\n</code></pre></p>"},{"location":"troubleshooting/#performance-optimization-troubleshooting","title":"Performance Optimization Troubleshooting","text":""},{"location":"troubleshooting/#slow-data-fetching","title":"Slow Data Fetching","text":"<p>Problem: yfinance data fetching is slow or unreliable.</p> <p>Solutions: <pre><code># Add caching for development\nimport functools\nimport pickle\nfrom pathlib import Path\n\n@functools.lru_cache(maxsize=128)\ndef cached_load_ohlcv(symbol, interval, lookback_days):\n    cache_file = Path(f\"cache/{symbol}_{interval}_{lookback_days}.pkl\")\n\n    if cache_file.exists():\n        # Check if cache is recent (&lt; 1 hour)\n        import time\n        if time.time() - cache_file.stat().st_mtime &lt; 3600:\n            with open(cache_file, 'rb') as f:\n                return pickle.load(f)\n\n    # Fetch fresh data\n    df = load_ohlcv(symbol, interval, lookback_days)\n\n    # Cache for next time\n    cache_file.parent.mkdir(exist_ok=True)\n    with open(cache_file, 'wb') as f:\n        pickle.dump(df, f)\n\n    return df\n</code></pre></p>"},{"location":"troubleshooting/#database-performance","title":"Database Performance","text":"<p>Problem: Slow database queries with large signal history.</p> <p>Solutions: <pre><code>-- Add indexes for common queries\nCREATE INDEX IF NOT EXISTS idx_signals_symbol_asof ON signals(symbol, asof);\nCREATE INDEX IF NOT EXISTS idx_signals_created_at ON signals(created_at_utc);\nCREATE INDEX IF NOT EXISTS idx_vectorstore_symbol_ts ON vec_store(symbol, ts_utc);\n\n-- Analyze query performance\nEXPLAIN QUERY PLAN SELECT * FROM signals WHERE symbol = 'AAPL' ORDER BY asof DESC LIMIT 10;\n</code></pre></p>"},{"location":"troubleshooting/#common-error-messages-and-solutions","title":"Common Error Messages and Solutions","text":""},{"location":"troubleshooting/#import-errors_1","title":"Import Errors","text":"<p><pre><code>ModuleNotFoundError: No module named 'swing_agent'\n</code></pre> Solution: Install package with <code>pip install -e .</code></p>"},{"location":"troubleshooting/#database-errors","title":"Database Errors","text":"<p><pre><code>sqlalchemy.exc.OperationalError: no such table: signals\n</code></pre> Solution: Initialize database with <code>python -m swing_agent.database --init</code></p>"},{"location":"troubleshooting/#api-errors","title":"API Errors","text":"<p><pre><code>openai.error.AuthenticationError: Invalid API key\n</code></pre> Solution: Check <code>OPENAI_API_KEY</code> environment variable</p>"},{"location":"troubleshooting/#permission-errors","title":"Permission Errors","text":"<p><pre><code>PermissionError: [Errno 13] Permission denied: 'data/swing_agent.sqlite'\n</code></pre> Solution: Check file permissions with <code>ls -la data/</code> and fix with <code>chmod 600 data/swing_agent.sqlite</code></p>"},{"location":"troubleshooting/#debug-information-collection_1","title":"Debug Information Collection","text":"<p>Create a comprehensive debug script to gather system information:</p>"},{"location":"tutorial/","title":"SwingAgent Tutorial: Your First Week of Trading","text":"<p>This hands-on tutorial will walk you through a complete week of using SwingAgent, from generating your first signals to evaluating results.</p>"},{"location":"tutorial/#day-1-setting-up-and-understanding-signals","title":"Day 1: Setting Up and Understanding Signals","text":""},{"location":"tutorial/#morning-setup-5-minutes","title":"Morning Setup (5 minutes)","text":"<p>Let's start by scanning a few popular stocks for potential setups:</p> <pre><code># Scan some technology stocks\npython scripts/run_swing_agent.py --symbol AAPL --interval 30m --lookback-days 30 --sector QQQ\npython scripts/run_swing_agent.py --symbol MSFT --interval 30m --lookback-days 30 --sector QQQ\npython scripts/run_swing_agent.py --symbol GOOGL --interval 30m --lookback-days 30 --sector QQQ\n</code></pre>"},{"location":"tutorial/#understanding-the-output","title":"Understanding the Output","text":"<p>Let's say SwingAgent found a signal for AAPL:</p> <pre><code>{\n  \"symbol\": \"AAPL\",\n  \"asof\": \"2024-01-15T15:30:00+00:00\",\n  \"trend\": {\n    \"label\": \"up\",\n    \"ema_slope\": 0.0156,\n    \"price_above_ema\": true,\n    \"rsi_14\": 62.3\n  },\n  \"entry\": {\n    \"side\": \"long\",\n    \"entry_price\": 185.50,\n    \"stop_price\": 182.20,\n    \"take_profit\": 190.80,\n    \"r_multiple\": 1.61,\n    \"fib_golden_low\": 184.20,\n    \"fib_golden_high\": 186.10\n  },\n  \"confidence\": 0.72,\n  \"expected_r\": 0.95,\n  \"expected_winrate\": 0.58,\n  \"mtf_alignment\": 2,\n  \"vol_regime\": \"M\",\n  \"action_plan\": \"Strong uptrend with price holding above EMA. RSI at 62 shows momentum without being overbought. Entry recommended in the Fibonacci golden pocket between $184.20-$186.10. Stop below recent swing low at $182.20 limits risk to $3.30 per share. Target $190.80 offers 1.61R reward-to-risk ratio. Monitor for entry between market open and 11 AM when volume is typically highest.\"\n}\n</code></pre>"},{"location":"tutorial/#what-this-tells-you","title":"What This Tells You:","text":"<p>The Setup: - AAPL is in an uptrend (trend.label = \"up\") - Price is above the moving average (price_above_ema = true) - Momentum is healthy (RSI = 62.3, not overbought) - Medium volatility environment (vol_regime = \"M\")</p> <p>The Trade Plan: - Direction: Long (buy) - Entry Zone: $184.20 - $186.10 (Fibonacci golden pocket) - Stop Loss: $182.20 (risk = $3.30 per share if entering at $185.50) - Take Profit: $190.80 (reward = $5.30 per share) - Risk/Reward: 1.61 (risk $1 to potentially make $1.61)</p> <p>The Confidence: - System Confidence: 72% (fairly high) - Historical Expected Return: 0.95R (historically, similar setups averaged 95% of risk as profit) - Win Rate: 58% (similar setups were profitable 58% of the time)</p>"},{"location":"tutorial/#your-decision-process","title":"Your Decision Process","text":"<p>Ask yourself: 1. Do I understand the trade? \u2713 Buy AAPL between $184.20-$186.10 2. Is the risk acceptable? If you're willing to lose $3.30 per share 3. Does the timeframe fit? This is a 1-2 day swing trade 4. Do I like the setup? 58% win rate with 1.61 reward-to-risk is reasonable</p>"},{"location":"tutorial/#day-2-monitoring-and-entry","title":"Day 2: Monitoring and Entry","text":""},{"location":"tutorial/#morning-check","title":"Morning Check","text":"<p>Check if AAPL is trading in your entry zone:</p> <pre><code># Generate a fresh signal to see current price\npython scripts/run_swing_agent.py --symbol AAPL --interval 30m --lookback-days 30 --sector QQQ\n</code></pre>"},{"location":"tutorial/#entry-scenarios","title":"Entry Scenarios","text":"<p>Scenario A: Price is at $184.80 (in the golden pocket) - \u2705 Enter the trade - Place stop at $182.20 - Set target at $190.80 - Position size based on your $3.30 risk per share</p> <p>Scenario B: Price is at $187.50 (above the entry zone) - \u274c Skip this trade - The risk/reward is no longer favorable - Wait for the next opportunity</p> <p>Scenario C: Price is at $180.00 (below the entry zone) - \u23f3 Wait and watch - The setup may be invalidated - Generate a new signal to see if conditions changed</p>"},{"location":"tutorial/#day-3-position-management","title":"Day 3: Position Management","text":"<p>Let's say you entered AAPL at $184.80 yesterday.</p>"},{"location":"tutorial/#morning-check_1","title":"Morning Check","text":"<pre><code># See how AAPL is performing\npython scripts/run_swing_agent.py --symbol AAPL --interval 30m --lookback-days 30 --sector QQQ\n</code></pre>"},{"location":"tutorial/#management-scenarios","title":"Management Scenarios","text":"<p>Scenario A: AAPL is at $189.50 (near target) - Consider taking partial profits (sell 50% of position) - Move stop loss to breakeven ($184.80) - Let the rest run to full target</p> <p>Scenario B: AAPL is at $183.00 (near stop) - Prepare to exit if it hits $182.20 - Don't hope it will turn around - Stick to your plan</p> <p>Scenario C: AAPL is at $186.20 (moving in your favor) - Hold the position - Consider moving stop to $183.50 (original entry zone low) - Let it run toward target</p>"},{"location":"tutorial/#day-4-generating-new-signals","title":"Day 4: Generating New Signals","text":"<p>Whether your AAPL trade is still active or closed, let's find new opportunities:</p> <pre><code># Scan different sectors\npython scripts/run_swing_agent.py --symbol XLF --interval 30m --lookback-days 30  # Financial sector ETF\npython scripts/run_swing_agent.py --symbol JPM --interval 30m --lookback-days 30 --sector XLF\npython scripts/run_swing_agent.py --symbol BAC --interval 30m --lookback-days 30 --sector XLF\n\n# Try energy sector\npython scripts/run_swing_agent.py --symbol XLE --interval 30m --lookback-days 30  # Energy sector ETF\npython scripts/run_swing_agent.py --symbol XOM --interval 30m --lookback-days 30 --sector XLE\n</code></pre>"},{"location":"tutorial/#signal-quality-assessment","title":"Signal Quality Assessment","text":"<p>Rate each signal:</p> <p>High Quality Signal: - Confidence &gt; 70% - R-multiple &gt; 1.5 - Win rate &gt; 55% - Clear entry zone - MTF alignment \u2265 2</p> <p>Medium Quality Signal: - Confidence 50-70% - R-multiple 1.2-1.5 - Win rate 45-55%</p> <p>Low Quality Signal: - Confidence &lt; 50% - R-multiple &lt; 1.2 - Win rate &lt; 45%</p>"},{"location":"tutorial/#day-5-backtesting-and-analysis","title":"Day 5: Backtesting and Analysis","text":"<p>Let's generate some historical signals to see how the system performed:</p> <pre><code># Generate 180 days of historical signals for AAPL (this takes a few minutes)\npython scripts/backtest_generate_signals.py --symbol AAPL --interval 30m --lookback-days 180 --warmup-bars 80 --sector QQQ --no-llm\n</code></pre> <p>Then evaluate the historical performance:</p> <pre><code># Evaluate all historical signals\npython scripts/eval_signals.py --max-hold-days 2.0\n\n# Analyze the results\npython scripts/analyze_performance.py\n</code></pre>"},{"location":"tutorial/#understanding-backtest-results","title":"Understanding Backtest Results","text":"<p>The analysis will show you:</p> <p>Overall Performance: - Total number of signals - Win rate percentage - Average R per trade - Best and worst trades</p> <p>By Volatility Regime: - How signals performed in Low/Medium/High volatility environments - Which regimes were most profitable</p> <p>By Confidence Buckets: - How well the system's confidence predictions matched reality - Whether high-confidence signals actually performed better</p>"},{"location":"tutorial/#weekend-review-and-planning","title":"Weekend: Review and Planning","text":""},{"location":"tutorial/#weekly-review-questions","title":"Weekly Review Questions","text":"<ol> <li>What did I learn about the system?</li> <li>Which signal types worked best?</li> <li> <p>What market conditions were most favorable?</p> </li> <li> <p>How was my execution?</p> </li> <li>Did I follow the entry rules?</li> <li>Did I stick to stop losses?</li> <li> <p>Did I take profits at targets?</p> </li> <li> <p>What would I do differently?</p> </li> <li>Position sizing adjustments?</li> <li>Different stocks or sectors?</li> <li>Different timeframes?</li> </ol>"},{"location":"tutorial/#next-week-planning","title":"Next Week Planning","text":"<pre><code># Create a watchlist of sectors to monitor\npython scripts/run_swing_agent.py --symbol QQQ --interval 30m --lookback-days 30  # Tech\npython scripts/run_swing_agent.py --symbol XLF --interval 30m --lookback-days 30  # Finance\npython scripts/run_swing_agent.py --symbol XLE --interval 30m --lookback-days 30  # Energy\npython scripts/run_swing_agent.py --symbol XLI --interval 30m --lookback-days 30  # Industrial\npython scripts/run_swing_agent.py --symbol XLV --interval 30m --lookback-days 30  # Healthcare\n</code></pre>"},{"location":"tutorial/#pro-tips-from-your-first-week","title":"Pro Tips from Your First Week","text":""},{"location":"tutorial/#1-quality-over-quantity","title":"1. Quality Over Quantity","text":"<ul> <li>It's better to take one high-quality signal than three mediocre ones</li> <li>High confidence (&gt;70%) signals with good R-multiples (&gt;1.5) tend to work best</li> </ul>"},{"location":"tutorial/#2-respect-the-stop-loss","title":"2. Respect the Stop Loss","text":"<ul> <li>Always set your stop loss before entering</li> <li>Never move it against you</li> <li>The system calculates stops based on technical levels</li> </ul>"},{"location":"tutorial/#3-use-the-action-plan","title":"3. Use the Action Plan","text":"<ul> <li>Read the AI-generated action plan carefully</li> <li>It often contains important timing and context information</li> <li>Use it to understand the reasoning behind the signal</li> </ul>"},{"location":"tutorial/#4-track-your-results","title":"4. Track Your Results","text":"<ul> <li>Keep a simple trading journal</li> <li>Note which signals you took and why</li> <li>Compare your actual results to the system's expectations</li> </ul>"},{"location":"tutorial/#5-start-small","title":"5. Start Small","text":"<ul> <li>Use small position sizes while learning</li> <li>Focus on learning the system rather than making money initially</li> <li>Increase size only after you're comfortable with the process</li> </ul>"},{"location":"tutorial/#whats-next","title":"What's Next?","text":"<p>After your first week, you might want to explore:</p> <ul> <li>Use Cases - Advanced trading scenarios</li> <li>Best Practices - Professional trading tips</li> <li>Configuration - Customizing the system</li> <li>FAQ - Common questions and solutions</li> </ul> <p>Remember: The goal of this first week is to learn how SwingAgent works and develop confidence in using it. Focus on understanding the signals rather than maximizing profits.</p>"},{"location":"use-cases/","title":"Real-World Use Cases for SwingAgent","text":"<p>This guide demonstrates how to use SwingAgent in different trading scenarios and market conditions.</p>"},{"location":"use-cases/#use-case-1-technology-stock-momentum-trading","title":"Use Case 1: Technology Stock Momentum Trading","text":""},{"location":"use-cases/#scenario","title":"Scenario","text":"<p>You want to trade momentum breakouts in technology stocks during earnings season.</p>"},{"location":"use-cases/#setup","title":"Setup","text":"<pre><code># Monitor major tech stocks\npython scripts/run_swing_agent.py --symbol AAPL --interval 30m --sector QQQ\npython scripts/run_swing_agent.py --symbol MSFT --interval 30m --sector QQQ\npython scripts/run_swing_agent.py --symbol NVDA --interval 30m --sector QQQ\npython scripts/run_swing_agent.py --symbol GOOGL --interval 30m --sector QQQ\npython scripts/run_swing_agent.py --symbol META --interval 30m --sector QQQ\n</code></pre>"},{"location":"use-cases/#what-to-look-for","title":"What to Look For","text":"<ul> <li>High confidence signals (&gt;75%) with strong momentum</li> <li>MTF alignment of 2 (both 15m and 1h trends aligned)</li> <li>RSI between 50-80 (momentum without being overbought)</li> <li>R-multiple &gt; 1.5 for good risk/reward</li> </ul>"},{"location":"use-cases/#example-signal-analysis","title":"Example Signal Analysis","text":"<pre><code>{\n  \"symbol\": \"NVDA\",\n  \"trend\": {\"label\": \"up\", \"rsi_14\": 68.5},\n  \"entry\": {\n    \"side\": \"long\",\n    \"entry_price\": 875.50,\n    \"stop_price\": 855.20,\n    \"take_profit\": 905.80,\n    \"r_multiple\": 1.49\n  },\n  \"confidence\": 0.82,\n  \"mtf_alignment\": 2,\n  \"vol_regime\": \"H\",\n  \"action_plan\": \"Strong momentum breakout above $870 resistance...\"\n}\n</code></pre> <p>Why This Works: - High confidence (82%) indicates strong pattern match - MTF alignment confirms trend on multiple timeframes - High volatility regime (\"H\") is typical during earnings season - Clear risk management with defined stop and target</p>"},{"location":"use-cases/#trading-plan","title":"Trading Plan","text":"<ol> <li>Entry: Between market open and 10:30 AM for best volume</li> <li>Position Size: Reduce by 25% due to high volatility</li> <li>Management: Take 50% profits at 1R, let rest run to target</li> <li>Exit: Close position by end of day 2 regardless of target</li> </ol>"},{"location":"use-cases/#use-case-2-defensive-sector-rotation","title":"Use Case 2: Defensive Sector Rotation","text":""},{"location":"use-cases/#scenario_1","title":"Scenario","text":"<p>Market uncertainty is increasing, and you want to trade defensive sectors while avoiding high-beta stocks.</p>"},{"location":"use-cases/#setup_1","title":"Setup","text":"<pre><code># Focus on defensive sectors\npython scripts/run_swing_agent.py --symbol XLU --interval 30m  # Utilities\npython scripts/run_swing_agent.py --symbol KO --interval 30m --sector XLP   # Consumer staples\npython scripts/run_swing_agent.py --symbol JNJ --interval 30m --sector XLV  # Healthcare\npython scripts/run_swing_agent.py --symbol PG --interval 30m --sector XLP   # Consumer staples\npython scripts/run_swing_agent.py --symbol WMT --interval 30m --sector XLP  # Consumer staples\n</code></pre>"},{"location":"use-cases/#what-to-look-for_1","title":"What to Look For","text":"<ul> <li>Medium volatility regime (\"M\") for stability</li> <li>Steady uptrends with consistent EMA support</li> <li>Win rates &gt; 60% (defensive stocks tend to be more predictable)</li> <li>Lower R-multiples acceptable (1.2-1.5) due to lower volatility</li> </ul>"},{"location":"use-cases/#example-signal-analysis_1","title":"Example Signal Analysis","text":"<pre><code>{\n  \"symbol\": \"KO\",\n  \"trend\": {\"label\": \"up\", \"rsi_14\": 58.2},\n  \"entry\": {\n    \"side\": \"long\",\n    \"entry_price\": 62.80,\n    \"stop_price\": 61.20,\n    \"take_profit\": 65.60,\n    \"r_multiple\": 1.25\n  },\n  \"confidence\": 0.68,\n  \"expected_winrate\": 0.64,\n  \"vol_regime\": \"M\",\n  \"action_plan\": \"Steady uptrend in defensive name during market uncertainty...\"\n}\n</code></pre>"},{"location":"use-cases/#trading-plan_1","title":"Trading Plan","text":"<ol> <li>Larger Position Sizes: Lower volatility allows for larger positions</li> <li>Longer Holds: Consider holding for full 2 days due to steady trends</li> <li>Multiple Positions: Can hold 3-4 defensive positions simultaneously</li> <li>Stop Management: Less aggressive stop management due to lower volatility</li> </ol>"},{"location":"use-cases/#use-case-3-mean-reversion-in-etfs","title":"Use Case 3: Mean Reversion in ETFs","text":""},{"location":"use-cases/#scenario_2","title":"Scenario","text":"<p>Major ETFs have pulled back to support levels, and you want to trade the bounce.</p>"},{"location":"use-cases/#setup_2","title":"Setup","text":"<pre><code># Monitor major ETFs for mean reversion\npython scripts/run_swing_agent.py --symbol SPY --interval 30m\npython scripts/run_swing_agent.py --symbol QQQ --interval 30m\npython scripts/run_swing_agent.py --symbol IWM --interval 30m\npython scripts/run_swing_agent.py --symbol XLF --interval 30m\npython scripts/run_swing_agent.py --symbol XLE --interval 30m\n</code></pre>"},{"location":"use-cases/#what-to-look-for_2","title":"What to Look For","text":"<ul> <li>Fibonacci golden pocket entries (fib_golden_low to fib_golden_high)</li> <li>RSI &lt; 40 indicating oversold conditions</li> <li>Recent downtrend with price approaching EMA support</li> <li>High R-multiples (&gt;2.0) due to strong support levels</li> </ul>"},{"location":"use-cases/#example-signal-analysis_2","title":"Example Signal Analysis","text":"<pre><code>{\n  \"symbol\": \"SPY\",\n  \"trend\": {\"label\": \"down\", \"rsi_14\": 35.8},\n  \"entry\": {\n    \"side\": \"long\",\n    \"entry_price\": 445.20,\n    \"stop_price\": 440.50,\n    \"take_profit\": 455.80,\n    \"r_multiple\": 2.25,\n    \"fib_golden_low\": 444.50,\n    \"fib_golden_high\": 446.10\n  },\n  \"confidence\": 0.71,\n  \"vol_regime\": \"M\",\n  \"action_plan\": \"Oversold bounce from 61.8% Fibonacci level...\"\n}\n</code></pre>"},{"location":"use-cases/#trading-plan_2","title":"Trading Plan","text":"<ol> <li>Wait for Golden Pocket: Only enter within the Fibonacci zone</li> <li>Quick Exits: Mean reversion trades can reverse quickly</li> <li>Scale Out: Take 75% profits at 1.5R, let 25% run to target</li> <li>Tight Management: Move stop to breakeven once trade moves 0.5R in your favor</li> </ol>"},{"location":"use-cases/#use-case-4-post-earnings-continuation","title":"Use Case 4: Post-Earnings Continuation","text":""},{"location":"use-cases/#scenario_3","title":"Scenario","text":"<p>A stock has reported earnings and moved strongly. You want to catch the continuation move.</p>"},{"location":"use-cases/#setup_3","title":"Setup","text":"<pre><code># After earnings announcement, generate fresh signal\npython scripts/run_swing_agent.py --symbol AAPL --interval 15m --lookback-days 15 --sector QQQ\n</code></pre>"},{"location":"use-cases/#what-to-look-for_3","title":"What to Look For","text":"<ul> <li>Fresh signals generated after earnings (not pre-earnings setups)</li> <li>15-minute timeframe for more precise entry timing</li> <li>High volume confirmation in the action plan</li> <li>Strong MTF alignment as trend establishes</li> </ul>"},{"location":"use-cases/#example-signal-analysis_3","title":"Example Signal Analysis","text":"<pre><code>{\n  \"symbol\": \"AAPL\",\n  \"asof\": \"2024-01-25T10:15:00+00:00\",  # Day after earnings\n  \"trend\": {\"label\": \"up\", \"rsi_14\": 72.3},\n  \"entry\": {\n    \"side\": \"long\",\n    \"entry_price\": 195.80,\n    \"stop_price\": 190.20,\n    \"take_profit\": 208.40,\n    \"r_multiple\": 2.25\n  },\n  \"confidence\": 0.76,\n  \"vol_regime\": \"H\",\n  \"action_plan\": \"Post-earnings momentum continuation above $195 with high volume confirmation...\"\n}\n</code></pre>"},{"location":"use-cases/#trading-plan_3","title":"Trading Plan","text":"<ol> <li>Fast Execution: Enter quickly as momentum can fade</li> <li>Volume Confirmation: Ensure high volume supports the move</li> <li>Tight Timeframe: Use 15m charts for precision</li> <li>Quick Management: Take profits aggressively (50% at 1R)</li> </ol>"},{"location":"use-cases/#use-case-5-sector-rotation-strategy","title":"Use Case 5: Sector Rotation Strategy","text":""},{"location":"use-cases/#scenario_4","title":"Scenario","text":"<p>You want to systematically rotate between sectors based on relative strength.</p>"},{"location":"use-cases/#weekly-sector-scan","title":"Weekly Sector Scan","text":"<pre><code># Monday morning sector analysis\npython scripts/run_swing_agent.py --symbol XLK --interval 1h --lookback-days 30  # Technology\npython scripts/run_swing_agent.py --symbol XLF --interval 1h --lookback-days 30  # Financial\npython scripts/run_swing_agent.py --symbol XLE --interval 1h --lookback-days 30  # Energy\npython scripts/run_swing_agent.py --symbol XLV --interval 1h --lookback-days 30  # Healthcare\npython scripts/run_swing_agent.py --symbol XLI --interval 1h --lookback-days 30  # Industrial\npython scripts/run_swing_agent.py --symbol XLP --interval 1h --lookback-days 30  # Consumer Staples\npython scripts/run_swing_agent.py --symbol XLRE --interval 1h --lookback-days 30 # Real Estate\npython scripts/run_swing_agent.py --symbol XLU --interval 1h --lookback-days 30  # Utilities\npython scripts/run_swing_agent.py --symbol XLB --interval 1h --lookback-days 30  # Materials\n</code></pre>"},{"location":"use-cases/#sector-selection-criteria","title":"Sector Selection Criteria","text":"<ol> <li>Rank by confidence: Start with highest confidence sectors</li> <li>Check relative strength: Prefer sectors outperforming SPY</li> <li>Assess momentum: Look for uptrending sectors with RSI 45-75</li> <li>Evaluate risk/reward: Target R-multiples &gt; 1.3</li> </ol>"},{"location":"use-cases/#stock-selection-within-sector","title":"Stock Selection Within Sector","text":"<pre><code># Once you identify strong sector (e.g., XLF), pick individual stocks\npython scripts/run_swing_agent.py --symbol JPM --interval 30m --sector XLF\npython scripts/run_swing_agent.py --symbol BAC --interval 30m --sector XLF\npython scripts/run_swing_agent.py --symbol WFC --interval 30m --sector XLF\npython scripts/run_swing_agent.py --symbol GS --interval 30m --sector XLF\n</code></pre>"},{"location":"use-cases/#use-case-6-low-volatility-grinding-trades","title":"Use Case 6: Low Volatility Grinding Trades","text":""},{"location":"use-cases/#scenario_5","title":"Scenario","text":"<p>Market is in a low volatility, steady uptrend. You want to capture consistent small gains.</p>"},{"location":"use-cases/#setup_4","title":"Setup","text":"<pre><code># Focus on steady, low-vol names\npython scripts/run_swing_agent.py --symbol MSFT --interval 1h --lookback-days 45\npython scripts/run_swing_agent.py --symbol AAPL --interval 1h --lookback-days 45\npython scripts/run_swing_agent.py --symbol COST --interval 1h --lookback-days 45\npython scripts/run_swing_agent.py --symbol HD --interval 1h --lookback-days 45\n</code></pre>"},{"location":"use-cases/#what-to-look-for_4","title":"What to Look For","text":"<ul> <li>Low volatility regime (\"L\")</li> <li>Consistent uptrends with steady EMA support</li> <li>High win rates (&gt;65%) even with lower R-multiples</li> <li>Longer timeframes (1h) for smoother signals</li> </ul>"},{"location":"use-cases/#trading-strategy","title":"Trading Strategy","text":"<ol> <li>Size Up: Lower volatility allows larger positions</li> <li>Hold Longer: Can hold full 2 days comfortably</li> <li>Multiple Positions: Run 4-5 positions simultaneously</li> <li>Target Management: Take full profits at targets (less likely to extend)</li> </ol>"},{"location":"use-cases/#use-case-7-event-driven-trading","title":"Use Case 7: Event-Driven Trading","text":""},{"location":"use-cases/#scenario_6","title":"Scenario","text":"<p>Trading around known events like FDA approvals, product launches, or sector-specific news.</p>"},{"location":"use-cases/#pre-event-setup","title":"Pre-Event Setup","text":"<pre><code># Day before FDA approval decision for biotech\npython scripts/run_swing_agent.py --symbol GILD --interval 15m --lookback-days 10 --sector XBI\n</code></pre>"},{"location":"use-cases/#risk-management-for-events","title":"Risk Management for Events","text":"<ul> <li>Reduce position size by 50% due to binary outcome risk</li> <li>Tighter stops (risk only 1-2% per trade instead of 3-4%)</li> <li>Quick exits if event doesn't go as expected</li> <li>Avoid holding through events unless specifically trading the outcome</li> </ul>"},{"location":"use-cases/#performance-tracking-across-use-cases","title":"Performance Tracking Across Use Cases","text":""},{"location":"use-cases/#monthly-review","title":"Monthly Review","text":"<pre><code># Generate comprehensive analysis\npython scripts/analyze_performance.py\n\n# Look at performance by volatility regime\n# This tells you which use cases (high/medium/low vol) work best for you\n</code></pre>"},{"location":"use-cases/#key-metrics-to-track","title":"Key Metrics to Track","text":"<ol> <li>Win Rate by Use Case: Which scenarios work best for you?</li> <li>Average R by Volatility: Are you adapting position size correctly?</li> <li>Time in Trade: Are you holding too long or too short?</li> <li>Sector Performance: Which sectors provide the most consistent signals?</li> </ol>"},{"location":"use-cases/#adaptation-strategies","title":"Adaptation Strategies","text":"<ul> <li>If tech momentum isn't working: Focus more on defensive sectors</li> <li>If mean reversion is failing: Look for trending continuation setups</li> <li>If win rate is low: Increase minimum confidence threshold</li> <li>If R-multiple is poor: Be more selective with risk/reward ratios</li> </ul>"},{"location":"use-cases/#common-mistakes-to-avoid","title":"Common Mistakes to Avoid","text":""},{"location":"use-cases/#1-use-case-mixing","title":"1. Use Case Mixing","text":"<ul> <li>Don't trade momentum strategies in low volatility environments</li> <li>Don't use mean reversion tactics during strong trends</li> <li>Match your strategy to current market conditions</li> </ul>"},{"location":"use-cases/#2-ignoring-volatility-regime","title":"2. Ignoring Volatility Regime","text":"<ul> <li>\"H\" (High): Reduce position size, take profits faster</li> <li>\"M\" (Medium): Standard approach works well</li> <li>\"L\" (Low): Can size up, hold longer</li> </ul>"},{"location":"use-cases/#3-sector-blindness","title":"3. Sector Blindness","text":"<ul> <li>Technology stocks behave differently than utilities</li> <li>Adjust expectations based on sector characteristics</li> <li>Use appropriate sector ETFs for relative strength comparison</li> </ul>"},{"location":"use-cases/#4-timeframe-confusion","title":"4. Timeframe Confusion","text":"<ul> <li>15m: Best for precise entries, requires active monitoring</li> <li>30m: Good balance of precision and practicality</li> <li>1h: Smoother signals, good for part-time traders</li> </ul> <p>Remember: The key to successful use case application is matching the strategy to current market conditions and your own trading style and availability.</p>"}]}