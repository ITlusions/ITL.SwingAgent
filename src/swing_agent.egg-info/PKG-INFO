Metadata-Version: 2.4
Name: swing-agent
Version: 1.6.1
Summary: 1â€“2 day swing agent with fibs, vector priors, LLM plan, holding-time, and enriched features (MTF, RS, TOD, vol regime).
Author: You
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: pydantic>=2.11
Requires-Dist: pandas>=2.3
Requires-Dist: numpy>=2.3
Requires-Dist: yfinance>=0.2.65
Requires-Dist: openai>=1.101
Requires-Dist: pydantic-ai-slim[openai]>=0.0.16
Requires-Dist: sqlalchemy>=2.0.43
Requires-Dist: scikit-learn>=1.5
Requires-Dist: matplotlib>=3.9
Provides-Extra: postgresql
Requires-Dist: psycopg2-binary>=2.9.10; extra == "postgresql"
Provides-Extra: mysql
Requires-Dist: PyMySQL>=1.1.0; extra == "mysql"
Provides-Extra: external-db
Requires-Dist: psycopg2-binary>=2.9.10; extra == "external-db"
Requires-Dist: PyMySQL>=1.1.0; extra == "external-db"

# Swing Agent v1.6.1

**Adds** Copilot-friendly `instructions.md` and `scripts/backtest_generate_signals.py` (walk-forward historical signal generation). Based on v1.6 enrichments:
- Multi-timeframe alignment (15m + 1h)
- Relative strength vs sector ETF (default `XLK`) + SPY fallback
- Time-of-day bucket (open/mid/close)
- Volatility regime filter for KNN priors
- Signals DB stores expectations + LLM plan + enrichments
- **Centralized database architecture with SQLAlchemy ORM**
- **External database support (PostgreSQL, MySQL, etc.)**

## Quick Start for New Users

### 1. Installation
```bash
python -m venv .venv && source .venv/bin/activate
pip install -e .
```

### 2. Your First Signal
```bash
# Generate a trading signal for Apple stock
python scripts/run_swing_agent.py --symbol AAPL --interval 30m --lookback-days 30
```

### 3. Learn the System
- **New to SwingAgent?** Start with the [Getting Started Guide](docs/getting-started.md)
- **Want hands-on experience?** Follow the [Tutorial](docs/tutorial.md)
- **Have questions?** Check the [FAQ](docs/faq.md)

## Documentation

ðŸ“š **[Complete Documentation](docs/index.md)** - Everything you need to know

### For Users
- [Getting Started](docs/getting-started.md) - Setup and first signal
- [Tutorial](docs/tutorial.md) - Your first week of trading
- [Use Cases](docs/use-cases.md) - Real-world trading scenarios  
- [Best Practices](docs/best-practices.md) - Professional tips
- [FAQ](docs/faq.md) - Common questions
- [Glossary](docs/glossary.md) - Trading terms explained

### For Developers
- [API Reference](docs/api-reference.md) - Function documentation
- [Architecture](docs/architecture.md) - System design
- [Configuration](docs/configuration.md) - Customization options
- [Development](docs/development.md) - Contributing guide

## What SwingAgent Does

SwingAgent combines technical analysis, machine learning, and AI to generate 1-2 day swing trading signals:

âœ… **Technical Analysis**: Fibonacci retracements, trend analysis, momentum indicators  
âœ… **Pattern Recognition**: ML-based historical pattern matching  
âœ… **AI Insights**: OpenAI-powered explanations and action plans  
âœ… **Risk Management**: Automatic stop-loss and take-profit calculations

## Example Signal Output

```json
{
  "symbol": "AAPL",
  "entry": {
    "side": "long",
    "entry_price": 185.50,
    "stop_price": 182.20,
    "take_profit": 190.80,
    "r_multiple": 1.61
  },
  "confidence": 0.72,
  "expected_winrate": 0.58,
  "action_plan": "Strong uptrend with Fibonacci support..."
}
```

## Database Configuration

SwingAgent v1.6.1 uses a centralized database architecture with SQLAlchemy ORM. By default, it uses a single SQLite file, but supports external databases for production deployments.

### Default (SQLite)
```bash
# Uses data/swing_agent.sqlite automatically
python scripts/run_swing_agent.py --symbol AMD --interval 30m --lookback-days 30
```

### External Database (PostgreSQL/MySQL)
```bash
# Option 1: Direct URL
export SWING_DATABASE_URL="postgresql://user:pass@localhost:5432/swing_agent"

# Option 2: Individual components
export SWING_DB_TYPE=postgresql
export SWING_DB_HOST=localhost
export SWING_DB_NAME=swing_agent
export SWING_DB_USER=your_username
export SWING_DB_PASSWORD=your_password

# Then run normally
python scripts/run_swing_agent.py --symbol AMD
```

### CNPG (CloudNativePG) for Kubernetes
```bash
# For Kubernetes deployments with CNPG operator
export SWING_DB_TYPE=cnpg
export CNPG_CLUSTER_NAME=swing-postgres
export CNPG_NAMESPACE=default
export SWING_DB_NAME=swing_agent
export SWING_DB_USER=swing_user
export SWING_DB_PASSWORD=your_password

# Test configuration
python scripts/test_cnpg.py
```

### Features
- **Centralized Storage**: Signals and vector patterns stored in single database
- **Multiple Backends**: SQLite for development, PostgreSQL/MySQL for production
- **Kubernetes Ready**: Native CloudNativePG (CNPG) support for scalable deployments
- **Migration Tools**: Automated migration from legacy separate databases

For detailed database setup:
- [EXTERNAL_DATABASES.md](EXTERNAL_DATABASES.md) - PostgreSQL/MySQL setup
- [CNPG_SETUP.md](CNPG_SETUP.md) - CloudNativePG for Kubernetes
- [k8s/cnpg/](k8s/cnpg/) - Complete Kubernetes deployment manifests

## Run live signal
```bash
python scripts/run_swing_agent.py --symbol AMD --interval 30m --lookback-days 30 --sector XLK
```

## Generate historical signals (no look-ahead)
```bash
python scripts/backtest_generate_signals.py --symbol AMD --interval 30m --lookback-days 180 --warmup-bars 80 --sector XLK --no-llm
```

## Evaluate stored signals
```bash
python scripts/eval_signals.py --max-hold-days 2.0
```

## Backfill vector store from signal history
```bash
python scripts/backfill_vector_store.py
```

## Performance snapshot
```bash
python scripts/analyze_performance.py
```

## Train ML models
```bash
python scripts/train_ml_model.py --db data/swing_agent.sqlite
```
Generates baseline classification and regression models from the vector store and saves them to `models/`.


## Database Migration

### From Separate Files to Centralized Database
```bash
# Migrate existing separate SQLite files to centralized database
python -m swing_agent.migrate --data-dir data/
```

### From SQLite to External Database
```bash
# First set up external database connection
export SWING_DATABASE_URL="postgresql://user:pass@localhost:5432/swing_agent"

# Migrate from centralized SQLite to external database
python -m swing_agent.migrate --sqlite-to-external "$SWING_DATABASE_URL"
```

## Database Utilities
```bash
# Show current database configuration
python scripts/db_info.py --info

# Test database connection
python scripts/db_info.py --test

# Initialize database tables
python scripts/db_info.py --init
```
